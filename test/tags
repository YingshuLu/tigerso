!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLDIRS	Makefile	/^ALLDIRS := $(shell ls -R $(WORKPATH) | grep '^\\\/.*$$' | grep -v "test" | awk '{gsub(":","");print}')$/;"	m
Acceptor	Acceptor.cpp	/^Acceptor::Acceptor(const std::string& ipaddr, const int& port, const ConnectionType& type)$/;"	f	class:tigerso::Acceptor
Acceptor	Acceptor.h	/^class Acceptor: public nocopyable {$/;"	c	namespace:tigerso
AsyncDNSResolver	backup/test_ares.cpp	/^class AsyncDNSResolver {$/;"	c	file:
BIND_EVENTHANDLE	backup/http_proxy.cpp	42;"	d	file:
BUILDDIR	Makefile	/^BUILDDIR := $(OUTPUT)\/Build\/objs$/;"	m
CC	Makefile	/^CC := g++$/;"	m
CONNECTION_LIMIT	Acceptor.cpp	/^int Acceptor::CONNECTION_LIMIT = 1024;$/;"	m	class:tigerso::Acceptor	file:
CONNECTION_LIMIT	TCPServerLoop.h	/^    static int CONNECTION_LIMIT;$/;"	v
CPPFLAGS	Makefile	/^CPPFLAGS := -fPIC -shared$/;"	m
ChannelSet	backup/TimedEvent.h	/^    std::set<Channel*> ChannelSet;$/;"	m	struct:TimeNode
ChunkState	HttpFile/HttpBodyFile.h	/^    } ChunkState;$/;"	t	class:HttpBodyFile	typeref:enum:HttpBodyFile::_chunk_send_state
Connection	Connection.cpp	/^Connection::Connection(std::shared_ptr<ConnectionFactory>& connfactptr, const unsigned int id) {$/;"	f	class:tigerso::Connection
Connection	Connection.h	/^class Connection: public nocopyable {$/;"	c	namespace:tigerso
Connection	TCPServerLoop.h	/^    Connection(ConnectionFactory* cf, const unsigned int id): id_(id), connfactptr_(cf) {}$/;"	f	class:tigerso::Connection
Connection	TCPServerLoop.h	/^class Connection {$/;"	c	namespace:tigerso
ConnectionFactory	ConnectionFactory.cpp	/^ConnectionFactory::ConnectionFactory(std::shared_ptr<EventsLoop>& eloop): epollptr_(eloop) {}$/;"	f	class:tigerso::ConnectionFactory
ConnectionFactory	ConnectionFactory.h	/^class ConnectionFactory: public nocopyable {$/;"	c	namespace:tigerso
ConnectionFactory	TCPServerLoop.h	/^    ConnectionFactory(EventsLoopPtr& eloop, const ConnectionType type): eloop_(eloop), type_(type) {}$/;"	f	class:tigerso::ConnectionFactory
ConnectionFactory	TCPServerLoop.h	/^class ConnectionFactory {$/;"	c	namespace:tigerso
ConnectionFactoryPtr	TCPServerLoop.h	/^typedef std::unique_ptr<ConnectionFactory> ConnectionFactoryPtr;$/;"	t	namespace:tigerso
ConnectionPtr	TCPServerLoop.h	/^typedef std::shared_ptr<Connection> ConnectionPtr;$/;"	t	namespace:tigerso
ConnectionType	TCPServerLoop.h	/^} ConnectionType;$/;"	t	namespace:tigerso	typeref:enum:tigerso::__anon4
DAEMON_CHILD	DaemonBase.cpp	/^    DAEMON_CHILD$/;"	e	enum:tigerso::daemon_role_s	file:
DAEMON_PARENT	DaemonBase.cpp	/^    DAEMON_PARENT,$/;"	e	enum:tigerso::daemon_role_s	file:
DBG_LOG	HttpFile/sendcontent.cc	20;"	d	file:
DBG_LOG	HttpFile/sendcontent.cc	22;"	d	file:
DBG_LOG	HttpFile/sendfile.cc	20;"	d	file:
DBG_LOG	HttpFile/sendfile.cc	22;"	d	file:
DBG_LOG	backup/http_proxy.cpp	29;"	d	file:
DBG_LOG	sendfile/sendfile.cc	20;"	d	file:
DBG_LOG	sendfile/sendfile.cc	22;"	d	file:
DEPY	Makefile	/^DEPY := http_parser$/;"	m
DNSInstance	test_dns.cpp	/^DNSResolver DNSInstance;$/;"	v
DNS_SERVER_ADDR	backup/test_ares.cpp	8;"	d	file:
DNS_SERVER_PORT	backup/test_ares.cpp	9;"	d	file:
DaemonBase	Daemon.h	/^class DaemonBase {$/;"	c	namespace:tigerso
DaemonBase	DaemonBase.cpp	/^DaemonBase::DaemonBase(const std::string& name) {$/;"	f	class:tigerso::DaemonBase
DaemonRole	DaemonBase.cpp	/^} DaemonRole;$/;"	t	namespace:tigerso	typeref:enum:tigerso::daemon_role_s	file:
DaemonSignals	DaemonBase.cpp	/^static const int DaemonSignals[] = {$/;"	m	namespace:tigerso	file:
ERR_HANDLE	backup/http_proxy.cpp	25;"	d	file:
FILE_ACTION_OK	File.h	21;"	d
FILE_ACTION_OK	HttpFile/File.h	24;"	d
FILE_ACTION_OK	sendfile/File.h	21;"	d
FILE_ARGS_INVALID	File.h	26;"	d
FILE_ARGS_INVALID	HttpFile/File.h	29;"	d
FILE_ARGS_INVALID	sendfile/File.h	26;"	d
FILE_FD_INVALID	File.h	25;"	d
FILE_FD_INVALID	HttpFile/File.h	28;"	d
FILE_FD_INVALID	sendfile/File.h	25;"	d
FILE_NAME_MAX_LENGTH	File.h	20;"	d
FILE_NAME_MAX_LENGTH	HttpFile/File.h	23;"	d
FILE_NAME_MAX_LENGTH	sendfile/File.h	20;"	d
FILE_OPEN_ERROR	File.h	22;"	d
FILE_OPEN_ERROR	HttpFile/File.h	25;"	d
FILE_OPEN_ERROR	sendfile/File.h	22;"	d
FILE_READ_ACCESS_DENY	File.h	24;"	d
FILE_READ_ACCESS_DENY	HttpFile/File.h	27;"	d
FILE_READ_ACCESS_DENY	sendfile/File.h	24;"	d
FILE_SENDFILE_DONE	File.h	30;"	d
FILE_SENDFILE_DONE	HttpFile/File.h	33;"	d
FILE_SENDFILE_DONE	sendfile/File.h	30;"	d
FILE_SENDFILE_ERROR	File.h	28;"	d
FILE_SENDFILE_ERROR	HttpFile/File.h	31;"	d
FILE_SENDFILE_ERROR	sendfile/File.h	28;"	d
FILE_SENDFILE_RECALL	File.h	29;"	d
FILE_SENDFILE_RECALL	HttpFile/File.h	32;"	d
FILE_SENDFILE_RECALL	sendfile/File.h	29;"	d
FILE_WRITE_ACCESS_DENY	File.h	23;"	d
FILE_WRITE_ACCESS_DENY	HttpFile/File.h	26;"	d
FILE_WRITE_ACCESS_DENY	sendfile/File.h	23;"	d
FUNC	shared_ptr_test.cpp	/^typedef std::function<void()> FUNC;$/;"	t	file:
File	File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	File.h	/^class File {$/;"	c
File	HttpFile/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	HttpFile/File.h	/^class File {$/;"	c
File	sendfile/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	sendfile/File.h	/^class File {$/;"	c
GLOBAL	https_lib/Https.h	6;"	d
HEX2CHAR	inter2hex.c	12;"	d	file:
HEXCHAR2DEC	inter2hex.c	11;"	d	file:
HEX_DIV	inter2hex.c	10;"	d	file:
HEX_MOD	inter2hex.c	9;"	d	file:
HTTPCONNECTIONPTR	http_server.cpp	/^typedef std::shared_ptr<HttpConnection> HTTPCONNECTIONPTR;$/;"	t	file:
HTTPPROXYCONNECTIONPTR	backup/http_proxy.cpp	/^typedef std::shared_ptr<HttpProxyConnection> HTTPPROXYCONNECTIONPTR;$/;"	t	file:
HTTPSErrorType	backup/SSLContext.h	/^} HTTPSErrorType;$/;"	t	typeref:enum:__anon1
HTTPS_CERT_VERIFY_MAX_DEPTH	backup/SSLContext.h	15;"	d
HTTPS_ERROR_ERR	backup/SSLContext.h	/^    HTTPS_ERROR_ERR = -100,$/;"	e	enum:__anon1
HTTPS_ERROR_OK	backup/SSLContext.h	/^    HTTPS_ERROR_OK = 0$/;"	e	enum:__anon1
HTTPS_IO_ERROR	backup/SSLContext.h	/^    HTTPS_IO_ERROR = -1,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_OK	backup/SSLContext.h	/^    HTTPS_IO_OK,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_RECALL	backup/SSLContext.h	/^    HTTPS_IO_RECALL,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_STATE	backup/SSLContext.h	/^typedef enum HTTPS_IO_STATE {$/;"	g
HTTPS_MODE_PROXY	backup/SSLContext.h	/^    HTTPS_MODE_PROXY;$/;"	e	enum:__anon2
HTTPS_MODE_SERVICE	backup/SSLContext.h	/^    HTTPS_MODE_SERVICE;$/;"	e	enum:__anon2
HTTPS_MODE_UNKNOWN	backup/SSLContext.h	/^    HTTPS_MODE_UNKNOWN;$/;"	e	enum:__anon2
HTTPS_ROLE_CLIENT	backup/SSLContext.h	/^    HTTPS_ROLE_CLIENT,$/;"	e	enum:_SSL_ROLE_
HTTPS_ROLE_SERVER	backup/SSLContext.h	/^    HTTPS_ROLE_SERVER$/;"	e	enum:_SSL_ROLE_
HTTPS_ROLE_UNKNOWN	backup/SSLContext.h	/^    HTTPS_ROLE_UNKNOWN = -1,$/;"	e	enum:_SSL_ROLE_
HTTP_CONNECTION	TCPServerLoop.h	/^    HTTP_CONNECTION,$/;"	e	enum:tigerso::__anon4
HTTP_PROXY_CONNECTION	TCPServerLoop.h	/^    HTTP_PROXY_CONNECTION,$/;"	e	enum:tigerso::__anon4
HashTable	hashtable/HashTable.h	/^class HashTable {$/;"	c
HexCharSet	inter2hex.c	/^char HexCharSet[] = {$/;"	v
HttpBodyFile	HttpFile/HttpBodyFile.h	/^    HttpBodyFile(const char* filename):_ringbuf(4096), _file(filename) {}$/;"	f	class:HttpBodyFile
HttpBodyFile	HttpFile/HttpBodyFile.h	/^class HttpBodyFile {$/;"	c
HttpBodyFile	sendfile/HttpBodyFile.h	/^class HttpBodyFile {$/;"	c
HttpConnection	http_server.cpp	/^    HttpConnection(): sockptr(std::make_shared<Socket>()) {}$/;"	f	class:HttpConnection
HttpConnection	http_server.cpp	/^class HttpConnection {$/;"	c	file:
HttpMode	backup/SSLContext.h	/^} HttpMode;$/;"	t	typeref:enum:__anon2
HttpProxyConnection	backup/http_proxy.cpp	/^    HttpProxyConnection(): ID_(HttpProxyConnection::uuid()), $/;"	f	class:HttpProxyConnection
HttpProxyConnection	backup/http_proxy.cpp	/^class HttpProxyConnection {$/;"	c	file:
HttpProxyLoop	backup/http_proxy.cpp	/^    HttpProxyLoop(const std::string& ipaddr, const std::string& port):$/;"	f	class:HttpProxyLoop
HttpProxyLoop	backup/http_proxy.cpp	/^class HttpProxyLoop {   $/;"	c	file:
HttpServer	http_server.cpp	/^class HttpServer {$/;"	c	file:
HttpTransaction	backup/http_proxy.cpp	/^struct HttpTransaction {$/;"	s	class:HttpProxyConnection	file:
HttpsContext	backup/SSLContex.h	/^    HttpsContext():  {}$/;"	f	class:HttpsContext
HttpsContext	backup/SSLContex.h	/^class HttpsContext {$/;"	c
HttpsContext	https_lib/SSLContext.cpp	/^    HttpsContext():  {}$/;"	f	class:SSLContext::HttpsContext
HttpsContext	https_lib/SSLContext.cpp	/^class HttpsContext {$/;"	c	namespace:SSLContext	file:
HtttsRole	backup/SSLContext.h	/^} HtttsRole;$/;"	t	typeref:enum:_SSL_ROLE_
IDTYPE	backup/http_proxy.cpp	/^typedef unsigned long IDTYPE;  $/;"	t	file:
ID_	backup/http_proxy.cpp	/^    const IDTYPE  ID_;$/;"	m	class:HttpProxyConnection	file:
INCFLAGS	Makefile	/^INCFLAGS := -I $(WORKPATH)$/;"	m
INCS	Makefile	/^INCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.h))$/;"	m
LIBFLAGS	Makefile	/^LIBFLAGS := -L$(LIBPATH) -l$(DEPY) $(PTHREAD_FLAG) $(SHM_FLAG)$/;"	m
LOOP_CALLBACK	backup/http_proxy.cpp	/^typedef std::function<int(HttpProxyConnection&)> LOOP_CALLBACK ;$/;"	t	class:HttpProxyConnection	file:
MCBUFFER_DEBUG_	test_buffer.cpp	16;"	d	file:
OBJS	Makefile	/^OBJS := $(foreach obj, $(OBJSLIST), $(BUILDDIR)\/$(obj))$/;"	m
OBJSLIST	Makefile	/^OBJSLIST := $(notdir $(OLDOBJS))$/;"	m
OLDOBJS	Makefile	/^OLDOBJS := $(patsubst %.cpp, %.o, $(SRCS))$/;"	m
OUTPUT	Makefile	/^OUTPUT := $(WORKPATH)\/output$/;"	m
POINTER	HttpFile/RingBuffer.h	35;"	d
POINTER	RingBuffer.h	32;"	d
POINTER	sendfile/RingBuffer.h	28;"	d
PROJECT	Makefile	/^PROJECT := httpd$/;"	m
PROXY_LOG	backup/http_proxy.cpp	43;"	d	file:
PTHREAD_FLAG	Makefile	/^PTHREAD_FLAG := -lpthread$/;"	m
PUSH2HEXBUF	inter2hex.c	13;"	d	file:
ProxyConnection	test_http.cpp	/^    explicit ProxyConnection(SocketPtr& clientptr, SocketPtr& serverptr): sockfd_(clientptr->getSocket()) {$/;"	f	class:ProxyConnection
ProxyConnection	test_http.cpp	/^    explicit ProxyConnection(SocketPtr& sockptr): sockfd_(sockptr->getSocket()) {$/;"	f	class:ProxyConnection
ProxyConnection	test_http.cpp	/^class ProxyConnection {$/;"	c	file:
QQindexAd	HttpFile/index.html	/^	function QQindexAd(obj){$/;"	f
QQindexAdShut	HttpFile/index.html	/^	function QQindexAdShut(){$/;"	f
REVERSESTRING	inter2hex.c	14;"	d	file:
RINGBUFFER_DEFAULT_LENGTH	HttpFile/RingBuffer.h	47;"	d
RINGBUFFER_DEFAULT_LENGTH	RingBuffer.h	44;"	d
RINGBUFFER_MAX_LENGTH	HttpFile/RingBuffer.h	45;"	d
RINGBUFFER_MAX_LENGTH	RingBuffer.h	42;"	d
RINGBUFFER_MAX_LENGTH	sendfile/RingBuffer.h	35;"	d
RINGBUFFER_MIN_LENGTH	HttpFile/RingBuffer.h	46;"	d
RINGBUFFER_MIN_LENGTH	RingBuffer.h	43;"	d
RINGBUFFER_MIN_LENGTH	sendfile/RingBuffer.h	36;"	d
RINGBUFFER_NO_DATA	HttpFile/RingBuffer.h	24;"	d
RINGBUFFER_NO_DATA	RingBuffer.h	21;"	d
RINGBUFFER_NO_DATA	sendfile/RingBuffer.h	17;"	d
RINGBUFFER_NO_SPACE	HttpFile/RingBuffer.h	23;"	d
RINGBUFFER_NO_SPACE	RingBuffer.h	20;"	d
RINGBUFFER_NO_SPACE	sendfile/RingBuffer.h	16;"	d
RingBuffer	HttpFile/RingBuffer.h	/^    RingBuffer(const size_t len = RINGBUFFER_DEFAULT_LENGTH) {$/;"	f	class:RingBuffer
RingBuffer	HttpFile/RingBuffer.h	/^class RingBuffer {$/;"	c
RingBuffer	RingBuffer.h	/^    RingBuffer(const size_t len = RINGBUFFER_DEFAULT_LENGTH) {$/;"	f	class:RingBuffer
RingBuffer	RingBuffer.h	/^class RingBuffer {$/;"	c
RingBuffer	sendfile/RingBuffer.h	/^    RingBuffer(const size_t& len) {$/;"	f	class:RingBuffer
RingBuffer	sendfile/RingBuffer.h	/^class RingBuffer {$/;"	c
SEND_DEBUG	HttpFile/sendcontent.cc	18;"	d	file:
SEND_DEBUG	HttpFile/sendfile.cc	18;"	d	file:
SEND_DEBUG	sendfile/sendfile.cc	18;"	d	file:
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHM_FLAG	Makefile	/^SHM_FLAG := -lrt$/;"	m
SOCKETPTR	backup/http_proxy.cpp	/^typedef std::shared_ptr<Socket> SOCKETPTR;$/;"	t	file:
SOCKET_EVENT_ERROR	TCPServerLoop.h	/^       master_->setEventHandle(BIND_EVENTHANDLE(TCPServerLoop::errorHandle), SOCKET_EVENT_ERROR);$/;"	m	namespace:tigerso
SOCKET_EVENT_READ	TCPServerLoop.h	/^       master_->setEventHandle(BIND_EVENTHANDLE(TCPServerLoop::acceptHandle),SOCKET_EVENT_READ);$/;"	m	namespace:tigerso
SRCS	Makefile	/^SRCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
SSLContext	backup/SSLContex.h	/^namespace SSLContext {$/;"	n
SSLContext	backup/SSLContext.h	/^class SSLContext {$/;"	c
SSLContext	https_lib/SSLContext.cpp	/^namespace SSLContext {$/;"	n	file:
SSLContextFactory	https_lib/Https.h	/^class SSLContextFactory {$/;"	c
SSLStrerror	backup/SSLContext.h	14;"	d
SSLVersion	https_lib/Https.h	/^} SSLVersion;$/;"	t	typeref:enum:_SSL_version
SSL_VERSION_ALL	https_lib/Https.h	/^    SSL_VERSION_ALL,$/;"	e	enum:_SSL_version
SSL_VERSION_SSLV3	https_lib/Https.h	/^    SSL_VERSION_SSLV3,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS10	https_lib/Https.h	/^    SSL_VERSION_TLS10,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS11	https_lib/Https.h	/^    SSL_VERSION_TLS11,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS12	https_lib/Https.h	/^    SSL_VERSION_TLS12,$/;"	e	enum:_SSL_version
SSL_VERSION_UNKNOW	https_lib/Https.h	/^    SSL_VERSION_UNKNOW$/;"	e	enum:_SSL_version
ServerCertVerifyCallback	backup/SSLContex.h	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t
ServerCertVerifyCallback	backup/SSLContext.h	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t
ServerCertVerifyCallback	https_lib/SSLContext.cpp	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t	namespace:SSLContext	file:
TARGET	Makefile	/^TARGET := $(OUTPUT)\/$(PROJECT)$/;"	m
TCP_CONNECTION	TCPServerLoop.h	/^    TCP_CONNECTION$/;"	e	enum:tigerso::__anon4
TEST_FILEACCESS	File.h	18;"	d
TEST_FILEACCESS	HttpFile/File.h	21;"	d
TEST_FILEACCESS	sendfile/File.h	18;"	d
TS_CORE_DAEMONBASE_H_	Daemon.h	2;"	d
TS_CORE_FILE_H_	HttpFile/File.h	2;"	d
TS_CORE_RINGBUFFER_H_	HttpFile/RingBuffer.h	2;"	d
TS_NET_ACCEPTOR_H_	Acceptor.h	2;"	d
TS_NET_CONNECTIONFACTORY_H_	ConnectionFactory.h	2;"	d
TS_NET_CONNECTION_H_	Connection.h	2;"	d
TS_SSL_SSLCONTEXT_H_	backup/SSLContext.h	2;"	d
TcpConnection	test_http.cpp	/^class TcpConnection {$/;"	c	file:
Test	shared_ptr_test.cpp	/^    Test() {}$/;"	f	class:Test
Test	shared_ptr_test.cpp	/^class Test: public std::enable_shared_from_this<Test> {$/;"	c	file:
TimeEvent	backup/TimedEvent.h	/^    TimeEvent(const int nodenum = 4): _nodeNum(nodenum) {$/;"	f	class:TimedEvent
TimeNode	backup/TimedEvent.h	/^struct TimeNode{$/;"	s
TimedEvent	backup/TimedEvent.h	/^class TimedEvent {$/;"	c
UUID_T	http_server.cpp	/^typedef unsigned int UUID_T; $/;"	t	file:
WORKPATH	Makefile	/^WORKPATH := $(shell cd .. && pwd)$/;"	m
_SSL_ROLE_	backup/SSLContext.h	/^typedef enum _SSL_ROLE_{$/;"	g
_SSL_version	https_lib/Https.h	/^typedef enum _SSL_version {$/;"	g
__BACKTRACE_NUM	DaemonBase.cpp	24;"	d	file:
__CONFIG_FILE	Daemon.h	15;"	d
__DAEMON_NAME	DaemonBase.cpp	23;"	d	file:
__child_loop	DaemonBase.cpp	/^static bool __child_loop = true;$/;"	m	namespace:tigerso	file:
__childrens	DaemonBase.cpp	/^static std::set<pid_t> __childrens;$/;"	m	namespace:tigerso	file:
__daemon_role	DaemonBase.cpp	/^static DaemonRole __daemon_role = DAEMON_PARENT;$/;"	m	namespace:tigerso	file:
__del__	HttpFile/client.py	/^    def __del__(self):$/;"	m	class:client	file:
__eraseChildPid	DaemonBase.cpp	/^void __eraseChildPid(const pid_t pid) {$/;"	f	namespace:tigerso
__init__	HttpFile/client.py	/^    def __init__(self, addr, port):$/;"	m	class:client
__parent_loop	DaemonBase.cpp	/^static bool __parent_loop = true;$/;"	m	namespace:tigerso	file:
__reload	DaemonBase.cpp	/^static bool __reload = false;$/;"	m	namespace:tigerso	file:
__signalHandle	DaemonBase.cpp	/^void __signalHandle(int signo) {$/;"	f	namespace:tigerso
__storeChildPid	DaemonBase.cpp	/^void __storeChildPid(const pid_t pid) {$/;"	f	namespace:tigerso
_baseID	http_server.cpp	/^    static UUID_T _baseID;$/;"	m	class:HttpConnection	file:
_baseID	http_server.cpp	/^UUID_T HttpConnection::_baseID = 0;$/;"	m	class:HttpConnection	file:
_buffer	HttpFile/RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_buffer	RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_buffer	sendfile/RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_chunkNulldone	HttpFile/HttpBodyFile.h	/^        _chunkNulldone$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkNullon	HttpFile/HttpBodyFile.h	/^        _chunkNullon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunk_send_state	HttpFile/HttpBodyFile.h	/^typedef  enum _chunk_send_state{$/;"	g	class:HttpBodyFile
_chunkedatadone	HttpFile/HttpBodyFile.h	/^        _chunkedatadone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkedataon	HttpFile/HttpBodyFile.h	/^        _chunkedataon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkeofdone	HttpFile/HttpBodyFile.h	/^        _chunkeofdone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkeofon	HttpFile/HttpBodyFile.h	/^        _chunkeofon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkfiledone	HttpFile/HttpBodyFile.h	/^        _chunkfiledone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunksize	HttpFile/HttpBodyFile.h	/^    int _chunksize = 4096;$/;"	m	class:HttpBodyFile
_chunksizedone	HttpFile/HttpBodyFile.h	/^        _chunksizedone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunksizeon	HttpFile/HttpBodyFile.h	/^        _chunksizeon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkstate	HttpFile/HttpBodyFile.h	/^    ChunkState _chunkstate = _chunkuinit;$/;"	m	class:HttpBodyFile
_chunkuinit	HttpFile/HttpBodyFile.h	/^        _chunkuinit,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_clientSocket	backup/http_proxy.cpp	38;"	d	file:
_clientVerifyServerCertCallback	backup/SSLContex.h	/^    int _clientVerifyServerCertCallback(int ok, X509_STORE_CTX* xstore) {$/;"	f	namespace:SSLContext
_clientVerifyServerCertCallback	https_lib/SSLContext.cpp	/^    int _clientVerifyServerCertCallback(int ok, X509_STORE_CTX* xstore) {$/;"	f	namespace:SSLContext
_connections	http_server.cpp	/^    std::map<UUID_T, HTTPCONNECTIONPTR> _connections;$/;"	m	class:HttpServer	file:
_countConnections	http_server.cpp	/^    int _countConnections() { return _connections.size() - discardIDs_.size(); }$/;"	f	class:HttpServer	file:
_createListenMaster	http_server.cpp	/^    int _createListenMaster(const char* ipaddr, int port) {$/;"	f	class:HttpServer	file:
_current	backup/TimedEvent.h	/^    TimeNode* _current= nullptr;$/;"	m	class:TimedEvent
_dnsSocket	backup/http_proxy.cpp	40;"	d	file:
_eloop	http_server.cpp	/^    EventsLoop _eloop;$/;"	m	class:HttpServer	file:
_file	HttpFile/HttpBodyFile.h	/^    File _file;$/;"	m	class:HttpBodyFile
_file	sendfile/HttpBodyFile.h	/^    File _file;$/;"	m	class:HttpBodyFile
_head	backup/TimedEvent.h	/^    TimeNode* _head = nullptr;$/;"	m	class:TimedEvent
_host	http_server.cpp	/^    const std::string _host;$/;"	m	class:HttpServer	file:
_initClientContext	backup/SSLContex.h	/^    int _initClientContext(const char* trustCAPath, const char* crlPath) {$/;"	f	namespace:SSLContext
_initClientContext	https_lib/SSLContext.cpp	/^    int _initClientContext(const char* trustCAPath, const char* crlPath) {$/;"	f	namespace:SSLContext
_initServerContext	backup/SSLContex.h	/^    int _initServerContext(const char* servercert, const char* privatekey) {$/;"	f	namespace:SSLContext
_initServerContext	https_lib/SSLContext.cpp	/^    int _initServerContext(const char* servercert, const char* privatekey) {$/;"	f	namespace:SSLContext
_masterSock	http_server.cpp	/^    SocketPtr _masterSock;$/;"	m	class:HttpServer	file:
_newConnection	http_server.cpp	/^    HTTPCONNECTIONPTR _newConnection() {$/;"	f	class:HttpServer	file:
_nodeNum	backup/TimedEvent.h	/^    int _nodeNum = 2;$/;"	m	class:TimedEvent
_ownCert	backup/SSLContex.h	/^    X509* _ownCert = nullptr;$/;"	m	class:HttpsContext
_ownCert	backup/SSLContext.h	/^    X509* _ownCert = nullptr;$/;"	m	class:SSLContext
_ownCert	https_lib/SSLContext.cpp	/^    X509* _ownCert = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_parser	http_server.cpp	/^    HttpParser        _parser;$/;"	m	class:HttpConnection	file:
_peerCert	backup/SSLContex.h	/^    X509* _peerCert = nullptr;$/;"	m	class:HttpsContext
_peerCert	backup/SSLContext.h	/^    X509* _peerCert = nullptr;$/;"	m	class:SSLContext
_peerCert	https_lib/SSLContext.cpp	/^    X509* _peerCert = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_readoffset	HttpFile/HttpBodyFile.h	/^    off_t _readoffset = 0;$/;"	m	class:HttpBodyFile
_readptr	HttpFile/RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_readptr	RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_readptr	sendfile/RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_request	http_server.cpp	/^    HttpRquest        _request;$/;"	m	class:HttpConnection	file:
_response	http_server.cpp	/^    HttpResponse      _response;$/;"	m	class:HttpConnection	file:
_ringbuf	HttpFile/HttpBodyFile.h	/^    RingBuffer _ringbuf; \/\/ Cache for file$/;"	m	class:HttpBodyFile
_ringbuf	sendfile/HttpBodyFile.h	/^    RingBuffer _ringbuf;$/;"	m	class:HttpBodyFile
_role	backup/SSLContex.h	/^    HttpsRole _role = HTTPS_ROLE_UNKNOWN;$/;"	m	class:HttpsContext
_role	backup/SSLContext.h	/^    HttpsRole _role = SCTX_ROLE_UNKNOWN;$/;"	m	class:SSLContext
_role	https_lib/SSLContext.cpp	/^    HttpsRole _role = HTTPS_ROLE_UNKNOWN;$/;"	m	class:SSLContext::HttpsContext	file:
_senddone	HttpFile/HttpBodyFile.h	/^    bool _senddone = false;$/;"	m	class:HttpBodyFile
_serverSocket	backup/http_proxy.cpp	39;"	d	file:
_size	HttpFile/RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_size	RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_size	sendfile/RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_ssl	backup/SSLContex.h	/^    SSL* _ssl = nullptr;$/;"	m	class:HttpsContext
_ssl	backup/SSLContext.h	/^    SSL* _ssl = nullptr;$/;"	m	class:SSLContext
_ssl	https_lib/SSLContext.cpp	/^    SSL* _ssl = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_sslctx	backup/SSLContex.h	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:HttpsContext
_sslctx	backup/SSLContext.h	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:SSLContext
_sslctx	https_lib/SSLContext.cpp	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_timerfd	backup/TimedEvent.h	/^    int _timerfd = -1;$/;"	m	class:TimedEvent
_uinitClientContext	backup/SSLContex.h	/^    void _uinitClientContext() {$/;"	f	namespace:SSLContext
_uinitClientContext	https_lib/SSLContext.cpp	/^    void _uinitClientContext() {$/;"	f	namespace:SSLContext
_uinitServerContext	backup/SSLContex.h	/^    void _uinitServerContext() {$/;"	f	namespace:SSLContext
_uinitServerContext	https_lib/SSLContext.cpp	/^    void _uinitServerContext() {$/;"	f	namespace:SSLContext
_updateUID	http_server.cpp	/^UUID_T HttpConnection::_updateUID() {$/;"	f	class:HttpConnection
_uuid	http_server.cpp	/^    UUID_T _uuid = 0;$/;"	m	class:HttpConnection	file:
_writeptr	HttpFile/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
_writeptr	RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
_writeptr	sendfile/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
aa	test_thread.cpp	/^int aa = 0;$/;"	v
accept	backup/SSLContex.h	/^    int accept() {$/;"	f	class:HttpsContext
accept	https_lib/SSLContext.cpp	/^    int accept() {$/;"	f	class:SSLContext::HttpsContext
acceptConnections	http_server.cpp	/^    int acceptConnections(Socket& master) {$/;"	f	class:HttpServer
acceptHandle	Acceptor.cpp	/^int Acceptor::acceptHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
acceptHandle	TCPServerLoop.h	/^    int acceptHandle(Socket& _l) {$/;"	f
acceptHttpClientConnection	backup/http_proxy.cpp	/^     int acceptHttpClientConnection(Socket& master) {$/;"	f	class:HttpProxyLoop
acceptMasterSocket	test_http.cpp	/^int acceptMasterSocket(SocketPtr& master) {$/;"	f
acceptMutex_	TCPServerLoop.h	/^    ShmMutex acceptMutex_;$/;"	v
active	backup/SSLContex.h	/^    bool active() {$/;"	f	class:HttpsContext
active	https_lib/SSLContext.cpp	/^    bool active() {$/;"	f	class:SSLContext::HttpsContext
addIntoLoop	Acceptor.cpp	/^int Acceptor::addIntoLoop(std::shared_ptr<ConnectionFactory>& connfact) {$/;"	f	class:tigerso::Acceptor
adjustPidFileName	DaemonBase.cpp	/^int DaemonBase::adjustPidFileName(const std::string& name) {$/;"	f	class:tigerso::DaemonBase
adjustResources	DaemonBase.cpp	/^int DaemonBase::adjustResources() {$/;"	f	class:tigerso::DaemonBase
afterCallback	test_http.cpp	/^int afterCallback(SocketPtr& sockptr) {$/;"	f
allocID	ConnectionFactory.cpp	/^unsigned int ConnectionFactory::allocID() {$/;"	f	class:tigerso::ConnectionFactory
allocID	TCPServerLoop.h	/^    static unsigned int allocID() {$/;"	f	class:tigerso::ConnectionFactory
appendWriteIn	File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
appendWriteIn	HttpFile/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
appendWriteIn	sendfile/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
base_	backup/http_proxy.cpp	/^    static IDTYPE base_;$/;"	m	class:HttpProxyConnection	file:
base_	backup/http_proxy.cpp	/^IDTYPE HttpProxyConnection::base_ = 0;$/;"	m	class:HttpProxyConnection	file:
beforeCallback	test_http.cpp	/^int beforeCallback(SocketPtr& sockptr) {$/;"	f
bindSocket	backup/SSLContex.h	/^    int bindSocket(int sockfd) {$/;"	f	class:HttpsContext
bindSocket	https_lib/SSLContext.cpp	/^    int bindSocket(int sockfd) {$/;"	f	class:SSLContext::HttpsContext
blocking	File.h	15;"	d
blocking	HttpFile/File.h	18;"	d
blocking	sendfile/File.h	15;"	d
bossZoneHandler	HttpFile/index.html	/^	function bossZoneHandler(){$/;"	f
buf	HttpFile/client.py	/^        buf = cli.recv()$/;"	v
buffer	test_ringbuffer.cpp	/^char buffer[] = "I am testing RingBuffer cache!";$/;"	v
buffer2	test_ringbuffer.cpp	/^char buffer2[] = "padding to fulfill the cache! hahaha";$/;"	v
c_ptr	test_mutex.cpp	/^share_count* c_ptr = nullptr;$/;"	v
checkImgErr	HttpFile/index.html	/^			function checkImgErr(n) {$/;"	f
checkOldDaemon	DaemonBase.cpp	/^int DaemonBase::checkOldDaemon() {$/;"	f	class:tigerso::DaemonBase
child	test_class.cpp	/^    child() {}$/;"	f	class:child
child	test_class.cpp	/^class child: public parent{$/;"	c	file:
childInit	DaemonBase.cpp	/^int DaemonBase::childInit() {$/;"	f	class:tigerso::DaemonBase
childMaxNum_	Daemon.h	/^    int childMaxNum_ = 1;$/;"	m	class:tigerso::DaemonBase
childStart	DaemonBase.cpp	/^int DaemonBase::childStart() {$/;"	f	class:tigerso::DaemonBase
childStop	DaemonBase.cpp	/^int DaemonBase::childStop() {$/;"	f	class:tigerso::DaemonBase
child_start	test_mutex.cpp	/^int child_start() {$/;"	f
chunked	HttpFile/HttpBodyFile.h	/^    bool chunked = false; $/;"	m	class:HttpBodyFile
chunked	sendfile/HttpBodyFile.h	/^    bool chunked = false; $/;"	m	class:HttpBodyFile
cleanup_openssl	HttpsServer.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	https_client.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	https_lib/https_client.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	https_lib/https_server.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	https_server.cpp	/^void cleanup_openssl()$/;"	f
clear	HttpFile/RingBuffer.h	/^    void clear() {$/;"	f	class:RingBuffer
clear	backup/http_proxy.cpp	/^    void clear() {$/;"	f	class:HttpProxyLoop	file:
clearCurrentTimeNode	backup/TimedEvent.h	/^    int clearCurrentTimeNode() {$/;"	f	class:TimedEvent
cli	HttpFile/client.py	/^    cli = client(ip, port)$/;"	v
client	HttpFile/client.py	/^class client:$/;"	c
client2close_	backup/http_proxy.cpp	/^    bool client2close_ = false;$/;"	m	class:HttpProxyConnection	file:
clientCloseHandle	backup/http_proxy.cpp	/^  int clientCloseHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientContexts	https_lib/Https.h	/^    SSL_CTX* clientContexts[SSL_VERSION_UNKNOW];$/;"	m	class:SSLContextFactory
clientErrorHandle	backup/http_proxy.cpp	/^    int clientErrorHandle(Socket& client) {  return clientRDHUPHandle(client); }$/;"	f	class:HttpProxyConnection
clientFinalWriteHandle	backup/http_proxy.cpp	/^    int clientFinalWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientFirstReadHandle	backup/http_proxy.cpp	/^    int clientFirstReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientOnlyWriteHandle	backup/http_proxy.cpp	/^    int clientOnlyWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientRDHUPHandle	backup/http_proxy.cpp	/^    int clientRDHUPHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientReadHandle	backup/http_proxy.cpp	/^    int clientReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientSafeClose	backup/http_proxy.cpp	/^   int clientSafeClose(Socket& client) {$/;"	f	class:HttpProxyConnection
clientTunnelReadHandle	backup/http_proxy.cpp	/^    int clientTunnelReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientTunnelWriteHandle	backup/http_proxy.cpp	/^    int clientTunnelWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientWriteHandle	backup/http_proxy.cpp	/^    int clientWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientptr_	Connection.h	/^    std::shared_ptr<Socket> clientptr_ = nullptr;$/;"	m	class:tigerso::Connection
clientptr_	TCPServerLoop.h	/^    SocketPtr clientptr_;$/;"	m	class:tigerso::Connection
clientptr_	test_http.cpp	/^    SocketPtr clientptr_ = nullptr;$/;"	m	class:ProxyConnection	file:
clockJump	backup/TimedEvent.h	/^    void clockJump() {$/;"	f	class:TimedEvent
close	backup/SSLContex.h	/^    int close() {$/;"	f	class:HttpsContext
close	https_lib/SSLContext.cpp	/^    int close() {$/;"	f	class:SSLContext::HttpsContext
closeProxy	test_http.cpp	/^    void closeProxy() {$/;"	f	class:ProxyConnection
closeProxyConnection	backup/http_proxy.cpp	/^    void closeProxyConnection() {$/;"	f	class:HttpProxyConnection
cnt	HttpFile/client.py	/^                cnt = cnt + 1$/;"	v
cnt	HttpFile/client.py	/^    cnt = 0;$/;"	v
cnt	test_dns.cpp	/^static int cnt = 0;$/;"	v	file:
config	HttpsServer.cpp	/^void config() {$/;"	f
configPtr_	Daemon.h	/^    ConfigParser* configPtr_ = nullptr;$/;"	m	class:tigerso::DaemonBase
configure_context	https_client.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	https_lib/https_client.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	https_lib/https_server.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	https_server.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
connect	HttpFile/client.py	/^    def connect(self):$/;"	m	class:client
connect	backup/SSLContex.h	/^    int connect() {$/;"	f	class:HttpsContext
connect	https_lib/SSLContext.cpp	/^    int connect() {$/;"	f	class:SSLContext::HttpsContext
connections_	ConnectionFactory.h	/^    std::map<unsigned int, std::shared_ptr<Connection>> connections_;$/;"	m	class:tigerso::ConnectionFactory
connections_	TCPServerLoop.h	/^    std::map<unsigned int, ConnectionPtr> connections_;$/;"	m	class:tigerso::ConnectionFactory
connections_	backup/http_proxy.cpp	/^    std::map<IDTYPE, HTTPPROXYCONNECTIONPTR> connections_; $/;"	m	class:HttpProxyLoop	file:
connfact_	TCPServerLoop.h	/^    ConnectionFactory* connfact_ = nullptr;$/;"	m	class:tigerso::Connection
connfact_	TCPServerLoop.h	/^    ConnectionFactoryPtr connfact_;$/;"	v
connfactptr	test_proxy.cpp	/^std::shared_ptr<ConnectionFactory> connfactptr = std::shared_ptr<ConnectionFactory>(new ConnectionFactory(eloop));$/;"	v
connfactptr	test_server.cpp	/^std::shared_ptr<ConnectionFactory> connfactptr = std::shared_ptr<ConnectionFactory>(new ConnectionFactory(eloop));$/;"	v
connfactptr_	Acceptor.h	/^    std::shared_ptr<ConnectionFactory> connfactptr_ = nullptr;$/;"	m	class:tigerso::Acceptor
connfactptr_	Connection.h	/^    std::shared_ptr<ConnectionFactory> connfactptr_ = nullptr;$/;"	m	class:tigerso::Connection
containsInCurrentTimeNode	backup/TimedEvent.h	/^    bool containsInCurrentTimeNode(Channel* cnptr) {$/;"	f	class:TimedEvent
content_encoding	HttpFile/HttpBodyFile.h	/^    char content_encoding[1024];$/;"	m	class:HttpBodyFile
content_type	HttpFile/HttpBodyFile.h	/^    char content_type [1024];$/;"	m	class:HttpBodyFile
content_type	sendfile/HttpBodyFile.h	/^    char content_type [1024];$/;"	m	class:HttpBodyFile
coreDumpPrints	DaemonBase.cpp	/^void coreDumpPrints() {$/;"	f	namespace:tigerso
count	test_mutex.cpp	/^    int count;$/;"	m	struct:share_count	file:
countAlive	TCPServerLoop.h	/^    int countAlive() {$/;"	f	class:tigerso::ConnectionFactory
countAliveConnection	ConnectionFactory.cpp	/^int ConnectionFactory::countAliveConnection() {$/;"	f	class:tigerso::ConnectionFactory
countHttpConnections	backup/http_proxy.cpp	/^    int countHttpConnections() {$/;"	f	class:HttpProxyLoop
cparser_	backup/http_proxy.cpp	/^    HttpParser cparser_;$/;"	m	class:HttpProxyConnection	file:
createConnection	ConnectionFactory.cpp	/^std::shared_ptr<Connection>& ConnectionFactory::createConnection(const ConnectionType type) {$/;"	f	class:tigerso::ConnectionFactory
createConnection	TCPServerLoop.h	/^    ConnectionPtr createConnection() {$/;"	f	class:tigerso::ConnectionFactory
createMasterListening	DaemonBase.cpp	/^int DaemonBase::createMasterListening(const std::string& ipaddr, const int port) {$/;"	f	class:tigerso::DaemonBase
createQuery	backup/test_ares.cpp	/^    int createQuery(const char* host, unsigned char* buf, size_t len) {$/;"	f	class:AsyncDNSResolver	file:
create_context	https_client.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	https_lib/https_client.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	https_lib/https_server.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	https_server.cpp	/^SSL_CTX *create_context()$/;"	f
create_socket	HttpsServer.cpp	/^int create_socket(int port)$/;"	f
create_socket	https_client.cpp	/^int create_socket(Socket& server, const char* host)$/;"	f
create_socket	https_lib/https_client.cpp	/^int create_socket(Socket& server, const char* host)$/;"	f
create_socket	https_lib/https_server.cpp	/^int create_socket(int port)$/;"	f
create_socket	https_server.cpp	/^int create_socket(int port)$/;"	f
csockptr	backup/http_proxy.cpp	/^    const SOCKETPTR csockptr;$/;"	m	class:HttpProxyConnection	file:
ctransaction_	backup/http_proxy.cpp	/^    HttpTransaction ctransaction_;$/;"	m	class:HttpProxyConnection	file:
cur_	File.h	/^    off_t cur_;$/;"	m	class:File
cur_	HttpFile/File.h	/^    off_t cur_;$/;"	m	class:File
cur_	sendfile/File.h	/^    off_t cur_;$/;"	m	class:File
daemon_role_s	DaemonBase.cpp	/^typedef enum daemon_role_s {$/;"	g	namespace:tigerso	file:
daemonlize	DaemonBase.cpp	/^void DaemonBase::daemonlize() {$/;"	f	class:tigerso::DaemonBase
dec2hex	inter2hex.c	/^const char* dec2hex(unsigned int num) {$/;"	f
deleteChannel	backup/TimedEvent.h	/^    int deleteChannel(Channel* cnptr) {$/;"	f	class:TimedEvent
deleteChannelFromTimeNode	backup/TimedEvent.h	/^    int deleteChannelFromTimeNode(TimeNode* node, Channel* cnptr) {$/;"	f	class:TimedEvent
deleteConnection	http_server.cpp	/^    int deleteConnection(HTTPCONNECTIONPTR& hcptr) {$/;"	f	class:HttpServer	file:
deleteProxyConnection	test_http.cpp	/^bool deleteProxyConnection(SocketPtr& clientptr) {$/;"	f
deleteself	backup/deleteself.cc	/^   int  deleteself() {$/;"	f	class:mytest
destory	DaemonBase.cpp	/^int DaemonBase::destory() {$/;"	f	class:tigerso::DaemonBase
destory	backup/TimedEvent.h	/^    void destory() {$/;"	f	class:TimedEvent
destory	https_lib/Https.h	/^    void destory() {$/;"	f	class:SSLContextFactory
destoryHttpProxyPool	backup/http_proxy.cpp	/^int destoryHttpProxyPool() {$/;"	f
destoryProxy	http_proxy.cpp	/^int destoryProxy() {$/;"	f
discardIDs_	backup/http_proxy.cpp	/^    std::set<IDTYPE> discardIDs_;$/;"	m	class:HttpProxyLoop	file:
discardIDs_	http_server.cpp	/^    std::set<UUID_T> discardIDs_;$/;"	m	class:HttpServer	file:
discardThisHttpProxyConnection	backup/http_proxy.cpp	/^     int discardThisHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:HttpProxyLoop
dsockptr	backup/http_proxy.cpp	/^    const SOCKETPTR dsockptr;$/;"	m	class:HttpProxyConnection	file:
eloop	test_http.cpp	/^EventsLoop eloop;$/;"	v
eloop_	TCPServerLoop.h	/^    EventsLoopPtr eloop_;$/;"	m	class:tigerso::ConnectionFactory
eloop_	TCPServerLoop.h	/^    EventsLoopPtr eloop_;$/;"	v
eloop_	backup/http_proxy.cpp	/^    EventsLoop eloop_;$/;"	m	class:HttpProxyLoop	file:
elooptr_	backup/http_proxy.cpp	/^    EventsLoop* elooptr_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
empty	HttpFile/client.py	/^    empty = False;$/;"	v
endFile	HttpFile/HttpBodyFile.h	/^    void endFile() {$/;"	f	class:HttpBodyFile
endFile	sendfile/HttpBodyFile.h	/^    void endFile() {$/;"	f	class:HttpBodyFile
epollptr_	ConnectionFactory.h	/^    std::shared_ptr<EventsLoop> epollptr_;$/;"	m	class:tigerso::ConnectionFactory
eraseHttpProxyConnection	backup/http_proxy.cpp	/^    int eraseHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:HttpProxyLoop	file:
erase_func_	backup/http_proxy.cpp	/^    LOOP_CALLBACK erase_func_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
errorCallback	test_http.cpp	/^int errorCallback(SocketPtr& sockptr) {$/;"	f
errorHandle	Acceptor.cpp	/^int Acceptor::errorHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
errorHandle	TCPServerLoop.h	/^    int errorHandle(Socket& _l) {$/;"	f
errorHandleEnter	Connection.cpp	/^int Connection::errorHandleEnter(Socket& _l) { return errorHandle(_l); }$/;"	f	class:tigerso::Connection
errorHandleEnter	TCPServerLoop.h	/^    int errorHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
fd_	File.h	/^    int fd_;$/;"	m	class:File
fd_	HttpFile/File.h	/^    int fd_;$/;"	m	class:File
fd_	sendfile/File.h	/^    int fd_;$/;"	m	class:File
file	HttpFile/client.py	/^    file = open(filename, 'w')$/;"	v
filename	HttpFile/HttpBodyFile.h	/^    char filename[1024];$/;"	m	class:HttpBodyFile
filename	HttpFile/client.py	/^    filename = sys.argv[2]$/;"	v
filename	sendfile/HttpBodyFile.h	/^    char filename[1024];$/;"	m	class:HttpBodyFile
filename_	File.h	/^    char filename_[FILE_NAME_MAX_LENGTH];$/;"	m	class:File
filename_	HttpFile/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH] = {0};$/;"	m	class:File
filename_	sendfile/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH];$/;"	m	class:File
filter	http_server.cpp	/^    int filter(HttpRequest& request) {$/;"	f	class:HttpConnection
finalize	backup/http_proxy.cpp	/^    void finalize() {$/;"	f	class:HttpProxyConnection	file:
forceCloseProxyConnection	backup/http_proxy.cpp	/^    void forceCloseProxyConnection() {$/;"	f	class:HttpProxyConnection
g_client_ssl_ctx	backup/SSLContex.h	/^    static SSL_CTX* g_client_ssl_ctx = NULL;$/;"	m	namespace:SSLContext
g_client_ssl_ctx	https_lib/SSLContext.cpp	/^    static SSL_CTX* g_client_ssl_ctx = NULL;$/;"	m	namespace:SSLContext	file:
g_config	HttpsServer.cpp	/^static ConfigParser* g_config = ConfigParser::getInstance();$/;"	v	file:
g_config	backup/SSLContex.h	/^    ConfigParser* g_config = ConfigParser::getInstance(); $/;"	m	namespace:SSLContext
g_config	https_lib/SSLContext.cpp	/^    ConfigParser* g_config = ConfigParser::getInstance(); $/;"	m	namespace:SSLContext	file:
g_configini	http_proxy.cpp	/^tigerso::ConfigParser* g_configini = nullptr;$/;"	v
g_configini	test_proxy.cpp	/^tigerso::ConfigParser* g_configini = nullptr;$/;"	v
g_configini	test_server.cpp	/^tigerso::ConfigParser* g_configini = nullptr;$/;"	v
g_httpproxy	http_proxy.cpp	/^tigerso::HttpProxyLoop* g_httpproxy = nullptr;$/;"	v
g_httpproxypoolptr	backup/http_proxy.cpp	/^HttpProxyLoop* g_httpproxypoolptr = nullptr;$/;"	v
g_log	HttpsServer.cpp	/^static Logging* g_log = Logging::getInstance();$/;"	v	file:
g_logging	http_proxy.cpp	/^tigerso::Logging* g_logging = nullptr;$/;"	v
g_logging	test_proxy.cpp	/^tigerso::Logging* g_logging = nullptr;$/;"	v
g_logging	test_server.cpp	/^tigerso::Logging* g_logging = nullptr;$/;"	v
g_server_cert_verify_cb	backup/SSLContex.h	/^    static serverCertVerifyCallback g_server_cert_verify_cb = NULL;$/;"	m	namespace:SSLContext
g_server_cert_verify_cb	https_lib/SSLContext.cpp	/^    static serverCertVerifyCallback g_server_cert_verify_cb = NULL;$/;"	m	namespace:SSLContext	file:
g_server_ssl_ctx	backup/SSLContex.h	/^    static SSL_CTX* g_server_ssl_ctx = NULL;$/;"	m	namespace:SSLContext
g_server_ssl_ctx	https_lib/SSLContext.cpp	/^    static SSL_CTX* g_server_ssl_ctx = NULL;$/;"	m	namespace:SSLContext	file:
gc_	ConnectionFactory.h	/^    std::map<ConnectionType, std::set<unsigned int>> gc_;$/;"	m	class:tigerso::ConnectionFactory
gc_	TCPServerLoop.h	/^    std::set<unsigned int> gc_;$/;"	m	class:tigerso::ConnectionFactory
getClientSSLCTX	backup/SSLContex.h	/^    SSL_CTX* getClientSSLCTX() {$/;"	f	namespace:SSLContext
getClientSSLCTX	https_lib/SSLContext.cpp	/^    SSL_CTX* getClientSSLCTX() {$/;"	f	namespace:SSLContext
getClientSocket	Connection.cpp	/^std::shared_ptr<Socket>& Connection::getClientSocket() { return clientptr_; }$/;"	f	class:tigerso::Connection
getClientSocketPtr	test_http.cpp	/^SocketPtr getClientSocketPtr(SocketPtr& serverptr) {$/;"	f
getFileLength	HttpFile/sendcontent.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileLength	HttpFile/sendfile.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileLength	sendfile/sendfile.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileSize	File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getFileSize	HttpFile/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getFileSize	sendfile/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getID	Connection.cpp	/^unsigned int Connection::getID() { return id_; }$/;"	f	class:tigerso::Connection
getID	TCPServerLoop.h	/^    unsigned int getID() { return id_; }$/;"	f	class:tigerso::Connection
getID	backup/http_proxy.cpp	/^    const IDTYPE& getID() { return ID_; }$/;"	f	class:HttpProxyConnection
getID	test_bind.cpp	/^    int& getID() {return id;}$/;"	f	class:nocopy
getIPPort	HttpFile/client.py	/^def getIPPort(param):$/;"	f
getKey	test_http.cpp	/^    int getKey() { return sockfd_; }$/;"	f	class:ProxyConnection
getProxyConnection	test_http.cpp	/^ProxyConnection& getProxyConnection(SocketPtr& clientptr) {$/;"	f
getServerSSLCTX	backup/SSLContex.h	/^    SSL_CTX* getServerSSLCTX() {$/;"	f	namespace:SSLContext
getServerSSLCTX	https_lib/SSLContext.cpp	/^    SSL_CTX* getServerSSLCTX() {$/;"	f	namespace:SSLContext
getServerSocketPtr	test_http.cpp	/^SocketPtr getServerSocketPtr(SocketPtr& clientptr) {$/;"	f
getType	Connection.h	/^    virtual ConnectionType getType() { return TCP_UNKNOW; }$/;"	f	class:tigerso::Connection
getUid	http_server.cpp	/^    UUID_T getUid() { return _uuid; }$/;"	f	class:HttpConnection
hex2dec	inter2hex.c	/^unsigned int hex2dec(const char* hex) {$/;"	f
hexstrbuf	inter2hex.c	/^static char hexstrbuf[9] = {0};$/;"	v	file:
host_	test_http.cpp	/^    string host_;$/;"	m	class:ProxyConnection	file:
httpproxypool	test_http.cpp	/^vector<ProxyConnection> httpproxypool;$/;"	v
id	test_bind.cpp	/^  int id = 0;  $/;"	m	class:nocopy	file:
id_	Connection.h	/^    unsigned int id_;$/;"	m	class:tigerso::Connection
id_	TCPServerLoop.h	/^    unsigned int id_;$/;"	m	class:tigerso::Connection
idbase_	ConnectionFactory.cpp	/^unsigned int ConnectionFactory::idbase_ = 0;$/;"	m	class:tigerso::ConnectionFactory	file:
idbase_	ConnectionFactory.h	/^    static unsigned int idbase_;$/;"	m	class:tigerso::ConnectionFactory
idbase_	TCPServerLoop.h	/^    static unsigned int idbase_;$/;"	m	class:tigerso::ConnectionFactory
idbase_	TCPServerLoop.h	/^unsigned int ConnectionFactory::idbase_ = 0;$/;"	m	class:tigerso::ConnectionFactory
info	backup/deleteself.cc	/^    int info() { cout << "haha, not see me" << endl;}$/;"	f	class:mytest
init	backup/SSLContex.h	/^    int init(int role) {$/;"	f	class:HttpsContext
init	backup/TimedEvent.h	/^    void init() {$/;"	f	class:TimedEvent
init	https_lib/SSLContext.cpp	/^    int init(int role) {$/;"	f	class:SSLContext::HttpsContext
initHttpProxyPool	backup/http_proxy.cpp	/^int initHttpProxyPool(const char* ipaddr, const int port) {$/;"	f
initListenConnection	backup/http_proxy.cpp	/^    int initListenConnection() {$/;"	f	class:HttpProxyLoop
initProxy	http_proxy.cpp	/^int initProxy() {$/;"	f
init_openssl	HttpsServer.cpp	/^void init_openssl()$/;"	f
init_openssl	https_client.cpp	/^void init_openssl()$/;"	f
init_openssl	https_lib/https_client.cpp	/^void init_openssl()$/;"	f
init_openssl	https_lib/https_server.cpp	/^void init_openssl()$/;"	f
init_openssl	https_server.cpp	/^void init_openssl()$/;"	f
initilize	DaemonBase.cpp	/^int DaemonBase::initilize() {$/;"	f	class:tigerso::DaemonBase
initilize	https_lib/Https.h	/^    void initilize() {$/;"	f	class:SSLContextFactory
insertHttpProxyConnectionPtr	backup/http_proxy.cpp	/^    int insertHttpProxyConnectionPtr(HTTPPROXYCONNECTIONPTR& hcptr) {$/;"	f	class:HttpProxyLoop	file:
inter2HexString	HttpFile/HttpBodyFile.h	/^    std::string inter2HexString(int num) {$/;"	f	class:HttpBodyFile
ipaddr_	Acceptor.h	/^    const std::string ipaddr_;$/;"	m	class:tigerso::Acceptor
ipaddr_	TCPServerLoop.h	/^    const std::string ipaddr_;$/;"	v
ipaddr_	backup/http_proxy.cpp	/^    const std::string ipaddr_;$/;"	m	class:HttpProxyLoop	file:
isClientAlive	backup/http_proxy.cpp	/^    bool isClientAlive() { return _clientSocket.exist(); }$/;"	f	class:HttpProxyConnection	file:
isEmpty	HttpFile/RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isEmpty	RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isEmpty	sendfile/RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isFull	HttpFile/RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isFull	RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isFull	sendfile/RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isProcessNeedReload	DaemonBase.cpp	/^bool DaemonBase::isProcessNeedReload() { return __reload; }$/;"	f	class:tigerso::DaemonBase
isProcessNeedStop	DaemonBase.cpp	/^bool DaemonBase::isProcessNeedStop() { return __child_loop; }$/;"	f	class:tigerso::DaemonBase
isServerAlive	backup/http_proxy.cpp	/^    bool isServerAlive() { return _serverSocket.exist(); }$/;"	f	class:HttpProxyConnection	file:
keepalive_	backup/http_proxy.cpp	/^    bool keepalive_ = true;$/;"	m	class:HttpProxyConnection	file:
killAllChildren	DaemonBase.cpp	/^int DaemonBase::killAllChildren() {$/;"	f	class:tigerso::DaemonBase
linkServer	test_http.cpp	/^    bool linkServer(SocketPtr& sockptr) {$/;"	f	class:ProxyConnection
linkServerSocketPtr	test_http.cpp	/^bool linkServerSocketPtr(SocketPtr& clientptr, SocketPtr& serverptr) {$/;"	f
listenHttpClientConnection	backup/http_proxy.cpp	/^    int listenHttpClientConnection() {$/;"	f	class:HttpProxyLoop	file:
listenOn	Acceptor.cpp	/^int Acceptor::listenOn() {$/;"	f	class:tigerso::Acceptor
listenSockptr_	Acceptor.h	/^    std::unique_ptr<Socket> listenSockptr_ = nullptr;$/;"	m	class:tigerso::Acceptor
listen_sock	test_buffer.cpp	/^McSocket listen_sock;$/;"	v
listenfd	HttpFile/sendcontent.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listenfd	HttpFile/sendfile.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listenfd	sendfile/sendfile.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listeningOnLocal	HttpFile/sendcontent.cc	/^int listeningOnLocal() {$/;"	f
listeningOnLocal	HttpFile/sendfile.cc	/^int listeningOnLocal() {$/;"	f
listeningOnLocal	sendfile/sendfile.cc	/^int listeningOnLocal() {$/;"	f
loadConfigParams	DaemonBase.cpp	/^int DaemonBase::loadConfigParams() {$/;"	f	class:tigerso::DaemonBase
log_ptr	test_mutex.cpp	/^Logging* log_ptr = nullptr;$/;"	v
main	Daemon.cpp	/^int main() {$/;"	f
main	HttpFile/sendcontent.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	HttpFile/sendfile.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	HttpsServer.cpp	/^int main(int argc, char **argv)$/;"	f
main	backup/deleteself.cc	/^int main() {$/;"	f
main	backup/http_proxy.cpp	/^int main() {$/;"	f
main	http_proxy.cpp	/^int main() {$/;"	f
main	https_client.cpp	/^int main(int argc, char **argv)$/;"	f
main	https_lib/https_client.cpp	/^int main(int argc, char **argv)$/;"	f
main	https_lib/https_server.cpp	/^int main(int argc, char **argv)$/;"	f
main	https_server.cpp	/^int main(int argc, char **argv)$/;"	f
main	inter2hex.c	/^int main(int argc, char* argv[]) {$/;"	f
main	main.c	/^int main() {$/;"	f
main	sendfile/sendfile.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	shared_ptr_test.cpp	/^int main() {$/;"	f
main	test_bind.cpp	/^int main() {$/;"	f
main	test_buffer.cpp	/^int main(){$/;"	f
main	test_class.cpp	/^int main() {$/;"	f
main	test_dns.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test_http.cpp	/^int main() {$/;"	f
main	test_mutex.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test_proxy.cpp	/^int main() {$/;"	f
main	test_ringbuffer.cpp	/^int main() {$/;"	f
main	test_server.cpp	/^int main() {$/;"	f
main	test_thread.cpp	/^int main() {$/;"	f
makeHttpProxyConnection	backup/http_proxy.cpp	/^   HTTPPROXYCONNECTIONPTR makeHttpProxyConnection() {$/;"	f	class:HttpProxyLoop	file:
masterAfterHandle	backup/http_proxy.cpp	/^     int masterAfterHandle(Socket& master) {$/;"	f	class:HttpProxyLoop
masterErrorHandle	backup/http_proxy.cpp	/^     int masterErrorHandle(Socket& master) {$/;"	f	class:HttpProxyLoop
master_	Daemon.h	/^    SocketPtr master_;$/;"	m	class:tigerso::DaemonBase
master_	TCPServerLoop.h	/^       eloop_->registerChannel(*master_);$/;"	t	namespace:tigerso
master_	TCPServerLoop.h	/^    std::unique_ptr<Socket> master_;$/;"	v
mine_type	HttpFile/HttpBodyFile.h	/^    char mine_type[1024];$/;"	m	class:HttpBodyFile
msockptr_	backup/http_proxy.cpp	/^    const SOCKETPTR msockptr_;$/;"	m	class:HttpProxyLoop	file:
mutex_	Acceptor.h	/^    ShmMutex mutex_;$/;"	m	class:tigerso::Acceptor
myfunc	shared_ptr_test.cpp	/^    void myfunc() {$/;"	f	class:Test
mytest	backup/deleteself.cc	/^    mytest(){}$/;"	f	class:mytest
mytest	backup/deleteself.cc	/^class mytest {$/;"	c	file:
next	backup/TimedEvent.h	/^    TimeNodeSet* next = nullptr;$/;"	m	struct:TimeNode
nocopy	test_bind.cpp	/^    nocopy(){}$/;"	f	class:nocopy
nocopy	test_bind.cpp	/^class nocopy {$/;"	c	file:
nocopy_func	test_bind.cpp	/^typedef std::function<int(nocopy&)> nocopy_func;$/;"	t	file:
nonBlocking	File.h	14;"	d
nonBlocking	HttpFile/File.h	17;"	d
nonBlocking	HttpFile/sendcontent.cc	16;"	d	file:
nonBlocking	HttpFile/sendfile.cc	16;"	d	file:
nonBlocking	sendfile/File.h	14;"	d
nonBlocking	sendfile/sendfile.cc	16;"	d	file:
parent	test_class.cpp	/^    parent() {}$/;"	f	class:parent
parent	test_class.cpp	/^class parent {$/;"	c	file:
parentPid_	Daemon.h	/^    pid_t parentPid_;$/;"	m	class:tigerso::DaemonBase
parentStart	DaemonBase.cpp	/^int DaemonBase::parentStart() {$/;"	f	class:tigerso::DaemonBase
parser	test_http.cpp	/^HttpParser parser;$/;"	v
pe	backup/deleteself.cc	/^    peer* pe;$/;"	m	class:mytest	file:
peer	backup/deleteself.cc	/^    peer() {}$/;"	f	class:peer
peer	backup/deleteself.cc	/^class peer {$/;"	c	file:
peerIPstr_	test_http.cpp	/^    string peerIPstr_;$/;"	m	class:TcpConnection	file:
pid	test_mutex.cpp	/^    pid_t pid;$/;"	m	struct:share_count	file:
pidFilename_	Daemon.h	/^    std::string pidFilename_ = "daemon-base";$/;"	m	class:tigerso::DaemonBase
port_	Acceptor.h	/^    const int port_;$/;"	m	class:tigerso::Acceptor
port_	TCPServerLoop.h	/^    const int port_;$/;"	v
port_	backup/http_proxy.cpp	/^    std::string port_;$/;"	m	class:HttpProxyLoop	file:
port_	test_http.cpp	/^    string port_;$/;"	m	class:ProxyConnection	file:
port_	test_http.cpp	/^    string port_;$/;"	m	class:TcpConnection	file:
printInfo	test_buffer.cpp	/^void printInfo() {$/;"	f
print_class	test_bind.cpp	/^int print_class(nocopy_func func, nocopy& copy) {$/;"	f
print_share_count	test_mutex.cpp	/^void print_share_count() {$/;"	f
printchar	HttpFile/RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
printchar	RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
printchar	sendfile/RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
process	test_class.cpp	/^    int process() {$/;"	f	class:parent
processStart	DaemonBase.cpp	/^int DaemonBase::processStart() {$/;"	f	class:tigerso::DaemonBase
processStop	DaemonBase.cpp	/^int DaemonBase::processStop() {$/;"	f	class:tigerso::DaemonBase
ptlogin2_onClose	HttpFile/index.html	/^	function ptlogin2_onClose(){$/;"	f
ptlogin2_onResize	HttpFile/index.html	/^	function ptlogin2_onResize(width, height) {$/;"	f
queryIP	test_dns.cpp	/^int queryIP(const char* host) {$/;"	f
rdhupHandle	Acceptor.cpp	/^int Acceptor::rdhupHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
rdhupHandleEnter	Connection.cpp	/^int Connection::rdhupHandleEnter(Socket& _l) { return rdhupHandle(_l); }$/;"	f	class:tigerso::Connection
rdhupHandleEnter	TCPServerLoop.h	/^    int rdhupHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
readCallback	test_http.cpp	/^int readCallback(SocketPtr& sockptr) {$/;"	f
readHandle	TCPServerLoop.h	/^    virtual int readHandle(Socket& _1) {$/;"	f	class:tigerso::Connection
readHandleEnter	Connection.cpp	/^int Connection::readHandleEnter(Socket& _l) { return readHandle(_l); }$/;"	f	class:tigerso::Connection
readHandleEnter	TCPServerLoop.h	/^    int readHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
readOut	File.cpp	/^ssize_t File::readOut(char* buf, size_t len) {$/;"	f	class:File
readOut	HttpFile/File.cpp	/^ssize_t File::readOut(char* buf, size_t len, off_t& offset) {$/;"	f	class:File
readOut	HttpFile/RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut	HttpFile/RingBuffer.h	/^    int readOut(int fd) {$/;"	f	class:RingBuffer
readOut	RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut	RingBuffer.h	/^    int readOut(int fd) {$/;"	f	class:RingBuffer
readOut	sendfile/File.cpp	/^ssize_t File::readOut(char* buf, size_t len) {$/;"	f	class:File
readOut	sendfile/RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut2File	HttpFile/RingBuffer.h	/^    int readOut2File(File& file) {$/;"	f	class:RingBuffer
readOut2File	RingBuffer.h	/^    int readOut2File(File& file) {$/;"	f	class:RingBuffer
recv	HttpFile/client.py	/^    def recv(self):$/;"	m	class:client
recv	backup/SSLContex.h	/^    int recv(void* buf, size_t len, size_t* readn) {$/;"	f	class:HttpsContext
recv	https_lib/SSLContext.cpp	/^    int recv(void* buf, size_t len, size_t* readn) {$/;"	f	class:SSLContext::HttpsContext
recycle	ConnectionFactory.cpp	/^void ConnectionFactory::recycle(Connection* conn) {$/;"	f	class:tigerso::ConnectionFactory
recyle	Connection.cpp	/^viod Connection::recyle() {$/;"	f	class:tigerso::Connection
recyle	TCPServerLoop.h	/^    viod recyle() {$/;"	f	class:tigerso::Connection
refresh	DaemonBase.cpp	/^int DaemonBase::refresh() {$/;"	f	class:tigerso::DaemonBase
registerChannel	ConnectionFactory.cpp	/^int ConnectionFactory::registerChannel(Socket& sock) {$/;"	f	class:tigerso::ConnectionFactory
registerChannel	TCPServerLoop.h	/^    int registerChannel(Socket& sock) {$/;"	f	class:tigerso::ConnectionFactory
registerFunctionsForHttpProxyConnection	backup/http_proxy.cpp	/^    void registerFunctionsForHttpProxyConnection(HttpProxyConnection& hpc) {$/;"	f	class:HttpProxyLoop	file:
registerSocket	backup/http_proxy.cpp	/^    int registerSocket(Socket& sock) {$/;"	f	class:HttpProxyLoop
registerSocket	http_server.cpp	/^    int registerSocket(Socket& socket) {$/;"	f	class:HttpServer	file:
register_func_	backup/http_proxy.cpp	/^    EventFunc register_func_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
request	backup/http_proxy.cpp	/^    HttpRequest request;$/;"	m	struct:HttpProxyConnection::HttpTransaction	file:
reset	File.h	/^    inline void reset() { fd_ = -1; size_ = 0; cur_ = 0; bzero(filename_, FILE_NAME_MAX_LENGTH); }$/;"	f	class:File
reset	HttpFile/File.h	/^    inline void reset() { ::close(fd_); fd_ = -1; size_ = 0; cur_ = 0; }$/;"	f	class:File
reset	HttpFile/HttpBodyFile.h	/^    void reset() {$/;"	f	class:HttpBodyFile
reset	RingBuffer.h	/^    void reset() {$/;"	f	class:RingBuffer
reset	sendfile/File.h	/^    inline void reset() { fd_ = -1; size_ = 0; cur_ = 0; bzero(filename_, FILE_NAME_MAX_LENGTH); }$/;"	f	class:File
reset	sendfile/RingBuffer.h	/^    void reset() {$/;"	f	class:RingBuffer
resolver_	backup/http_proxy.cpp	/^    DNSResolver resolver_;$/;"	m	class:HttpProxyConnection	file:
response	backup/http_proxy.cpp	/^    HttpResponse response;$/;"	m	struct:HttpProxyConnection::HttpTransaction	file:
sem	test_mutex.cpp	/^FileLock* sem = nullptr;$/;"	v
send	HttpFile/client.py	/^    def send(self, message):$/;"	m	class:client
send	backup/SSLContex.h	/^    int send(void* buf, size_t len, size_t* written) {$/;"	f	class:HttpsContext
send	https_lib/SSLContext.cpp	/^    int send(void* buf, size_t len, size_t* written) {$/;"	f	class:SSLContext::HttpsContext
send2Socket	File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
send2Socket	HttpFile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
send2Socket	HttpFile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn, off_t& offset, size_t count) {$/;"	f	class:File
send2Socket	HttpFile/RingBuffer.h	/^    int send2Socket(int sockfd) {$/;"	f	class:RingBuffer
send2Socket	RingBuffer.h	/^    int send2Socket(int sockfd) {$/;"	f	class:RingBuffer
send2Socket	sendfile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
sendChunk2Socket	HttpFile/HttpBodyFile.h	/^    int sendChunk2Socket(int sockfd) {$/;"	f	class:HttpBodyFile
sendContent2Socket	HttpFile/HttpBodyFile.h	/^    int sendContent2Socket(int sockfd) {$/;"	f	class:HttpBodyFile
sendFile	HttpFile/sendcontent.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
sendFile	HttpFile/sendfile.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
sendFile	sendfile/sendfile.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
server2close_	backup/http_proxy.cpp	/^    bool server2close_ = false;$/;"	m	class:HttpProxyConnection	file:
serverCertfile	https_lib/Https.h	/^    std::string serverCertfile;$/;"	m	class:SSLContextFactory
serverCloseHandle	backup/http_proxy.cpp	/^  int serverCloseHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverConnectTo	backup/http_proxy.cpp	/^    int serverConnectTo(const char* ip, time_t ttl) {$/;"	f	class:HttpProxyConnection
serverContexts	https_lib/Https.h	/^    SSL_CTX* serverContexts[SSL_VERSION_UNKNOW];$/;"	m	class:SSLContextFactory
serverDecideSkipBody	backup/http_proxy.cpp	/^    void serverDecideSkipBody() {$/;"	f	class:HttpProxyConnection	file:
serverErrorHandle	backup/http_proxy.cpp	/^    int serverErrorHandle(Socket& server) {  return serverRDHUPHandle(server); }$/;"	f	class:HttpProxyConnection
serverFirstWriteHandle	backup/http_proxy.cpp	/^    int serverFirstWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverOnlyWriteHandle	backup/http_proxy.cpp	/^    int serverOnlyWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverRDHUPHandle	backup/http_proxy.cpp	/^    int serverRDHUPHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverReadHandle	backup/http_proxy.cpp	/^    int serverReadHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverSafeClose	backup/http_proxy.cpp	/^   int serverSafeClose(Socket& server) {$/;"	f	class:HttpProxyConnection
serverTunnelReadHandle	backup/http_proxy.cpp	/^    int serverTunnelReadHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverTunnelWriteHandle	backup/http_proxy.cpp	/^    int serverTunnelWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverWriteHandle	backup/http_proxy.cpp	/^    int serverWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverptr_	test_http.cpp	/^    SocketPtr serverptr_ = nullptr;$/;"	m	class:ProxyConnection	file:
setBlockingIO	File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setBlockingIO	HttpFile/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setBlockingIO	sendfile/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setConnectionLimitation	Acceptor.cpp	/^int Acceptor::setConnectionLimitation(const int num) {$/;"	f	class:tigerso::Acceptor
setEraseFunc	backup/http_proxy.cpp	/^    void setEraseFunc(LOOP_CALLBACK cb) { erase_func_ = cb; }$/;"	f	class:HttpProxyConnection
setEventsLoopPtr	backup/http_proxy.cpp	/^    void setEventsLoopPtr(EventsLoop* loop) {$/;"	f	class:HttpProxyConnection
setFile	HttpFile/HttpBodyFile.h	/^    void setFile(const char* filename) {$/;"	f	class:HttpBodyFile
setFilename	File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setFilename	HttpFile/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setFilename	sendfile/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setSocketRegisterFunc	backup/http_proxy.cpp	/^    void setSocketRegisterFunc(EventFunc f) {register_func_ = f;}$/;"	f	class:HttpProxyConnection
setupCertKey	backup/SSLContex.h	/^    int setupCertKey(X509* cert, EVP_PKEY* pkey) {$/;"	f	class:HttpsContext
setupCertKey	https_lib/SSLContext.cpp	/^    int setupCertKey(X509* cert, EVP_PKEY* pkey) {$/;"	f	class:SSLContext::HttpsContext
setupInterestedSignal	DaemonBase.cpp	/^int DaemonBase::setupInterestedSignal() {$/;"	f	class:tigerso::DaemonBase
share_count	test_mutex.cpp	/^    share_count():count(0), pid(-1) {}$/;"	f	struct:share_count
share_count	test_mutex.cpp	/^struct share_count {$/;"	s	file:
showComplete	HttpFile/sendcontent.cc	25;"	d	file:
showComplete	HttpFile/sendfile.cc	25;"	d	file:
showComplete	sendfile/sendfile.cc	25;"	d	file:
showIPAddress	test_dns.cpp	/^int showIPAddress(const char* ipaddr, time_t rttl) {$/;"	f
showProcess	HttpFile/sendcontent.cc	/^void showProcess(long now, long total) {$/;"	f
showProcess	HttpFile/sendfile.cc	/^void showProcess(long now, long total) {$/;"	f
showProcess	sendfile/sendfile.cc	/^void showProcess(long now, long total) {$/;"	f
size	HttpFile/HttpBodyFile.h	/^    size_t size() { return _file.getFileSize() + _ringbuf.size(); }$/;"	f	class:HttpBodyFile
size	HttpFile/RingBuffer.h	/^    size_t size() { return (_size - space() - 1); }$/;"	f	class:RingBuffer
size	RingBuffer.h	/^    size_t size() { return (_size - space() - 1); }$/;"	f	class:RingBuffer
size	sendfile/HttpBodyFile.h	/^    size_t size() { return _file.getFileSize() + _ringbuf.size(); }$/;"	f	class:HttpBodyFile
size	sendfile/RingBuffer.h	/^    size_t size() { return (_size - space() -1); }$/;"	f	class:RingBuffer
size_	File.h	/^    off_t size_;$/;"	m	class:File
size_	HttpFile/File.h	/^    off_t size_;$/;"	m	class:File
size_	sendfile/File.h	/^    off_t size_;$/;"	m	class:File
socketDisableReadEvent	backup/http_proxy.cpp	/^    bool socketDisableReadEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketDisableWriteEvent	backup/http_proxy.cpp	/^    bool socketDisableWriteEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketEnableReadEvent	backup/http_proxy.cpp	/^    bool socketEnableReadEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketEnableWriteEvent	backup/http_proxy.cpp	/^    bool socketEnableWriteEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketMaxNum_	Daemon.h	/^    int socketMaxNum_ = 1024;$/;"	m	class:tigerso::DaemonBase
socketNullHandle	backup/http_proxy.cpp	/^    int socketNullHandle(Socket& sock) {$/;"	f	class:HttpProxyConnection
socketSetEventHandle	backup/http_proxy.cpp	/^    bool socketSetEventHandle(Socket& sock, EventFunc func, unsigned short flag) {$/;"	f	class:HttpProxyConnection	file:
sockfd_	test_http.cpp	/^    socket_t sockfd_  = -1;$/;"	m	class:ProxyConnection	file:
sockptr	http_server.cpp	/^    const SocketPtr sockptr;$/;"	m	class:HttpConnection	file:
sogouShow	HttpFile/index.html	/^		function sogouShow(){}$/;"	f
sosoShow	HttpFile/index.html	/^		function sosoShow(){}$/;"	f
space	HttpFile/RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
space	RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
space	sendfile/RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
sparser_	backup/http_proxy.cpp	/^    HttpParser sparser_;$/;"	m	class:HttpProxyConnection	file:
ssockptr	backup/http_proxy.cpp	/^    const SOCKETPTR ssockptr;$/;"	m	class:HttpProxyConnection	file:
start	DaemonBase.cpp	/^int DaemonBase::start(const int port) {$/;"	f	class:tigerso::DaemonBase
startLoop	backup/http_proxy.cpp	/^    int startLoop() {$/;"	f	class:HttpProxyLoop
startProxy	http_proxy.cpp	/^int startProxy() {$/;"	f
staticWebCGI	http_server.cpp	/^class staticWebCGI {$/;"	c	file:
stop	DaemonBase.cpp	/^int DaemonBase::stop() {$/;"	f	class:tigerso::DaemonBase
stransaction_	backup/http_proxy.cpp	/^    HttpTransaction stransaction_;$/;"	m	class:HttpProxyConnection	file:
tcpServer	test_http.cpp	/^int tcpServer(SocketPtr& master) {$/;"	f
test	backup/deleteself.cc	/^    mytest* test;$/;"	m	class:peer	file:
test	test_bind.cpp	/^    int test(nocopy& np) {$/;"	f	class:testbind
test	test_thread.cpp	/^void test() {$/;"	f
testExist	File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testExist	HttpFile/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testExist	sendfile/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testRead	File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testRead	HttpFile/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testRead	sendfile/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testWrite	File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testWrite	HttpFile/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testWrite	sendfile/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testbind	test_bind.cpp	/^    testbind() {}$/;"	f	class:testbind
testbind	test_bind.cpp	/^class testbind {$/;"	c	file:
testdata	backup/deleteself.cc	/^    static int testdata;$/;"	m	class:mytest	file:
testdata2	backup/deleteself.cc	/^    static int testdata2;$/;"	m	class:mytest	file:
testf	test_bind.cpp	/^int testf(function<int()> func) {$/;"	f
tigerso	Acceptor.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	Acceptor.h	/^namespace tigerso {$/;"	n
tigerso	Connection.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	Connection.h	/^namespace tigerso {$/;"	n
tigerso	ConnectionFactory.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	ConnectionFactory.h	/^namespace tigerso {$/;"	n
tigerso	Daemon.h	/^namespace tigerso {$/;"	n
tigerso	DaemonBase.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	TCPServerLoop.h	/^namespace tigerso {$/;"	n
timeoutHandleEnter	Connection.cpp	/^int Connection::timeoutHandleEnter(Socket& _l) { return timeoutHandle(_l); }$/;"	f	class:tigerso::Connection
timeoutHandleEnter	TCPServerLoop.h	/^    int timeoutHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
topFixed	HttpFile/index.html	/^	function topFixed(){$/;"	f
transferProxyBuffer	backup/http_proxy.cpp	/^    void transferProxyBuffer() {$/;"	f	class:HttpProxyConnection	file:
tunnelReadClientCallback	test_http.cpp	/^int tunnelReadClientCallback(SocketPtr& clientptr) {$/;"	f
tunnelReadServerCallback	test_http.cpp	/^int tunnelReadServerCallback(SocketPtr& serverptr) {$/;"	f
tunnelWriteClientCallback	test_http.cpp	/^int tunnelWriteClientCallback(SocketPtr& clientptr) {$/;"	f
tunnelWriteServerCallback	test_http.cpp	/^int tunnelWriteServerCallback(SocketPtr& serverptr) {$/;"	f
type_	Acceptor.h	/^    ConnectionType type_;$/;"	m	class:tigerso::Acceptor
type_	ConnectionFactory.h	/^    ConnectionType type_;$/;"	m	class:tigerso::ConnectionFactory
type_	TCPServerLoop.h	/^    ConnectionType type_;$/;"	m	class:tigerso::ConnectionFactory
udpsock	test_dns.cpp	/^Socket udpsock;$/;"	v
unlink	File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlink	HttpFile/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlink	sendfile/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlinkPidFile	DaemonBase.cpp	/^int DaemonBase::unlinkPidFile() {$/;"	f	class:tigerso::DaemonBase
unlinkServer	test_http.cpp	/^    bool unlinkServer(SocketPtr& sockptr) {$/;"	f	class:ProxyConnection
updateChannel	backup/TimedEvent.h	/^    int updateChannel(Channel* cnptr) {$/;"	f	class:TimedEvent
userLogin	HttpFile/index.html	/^	function userLogin(){$/;"	f
uuid	backup/http_proxy.cpp	/^    static IDTYPE uuid() {$/;"	f	class:HttpProxyConnection	file:
validFd	File.h	16;"	d
validFd	HttpFile/File.h	19;"	d
validFd	sendfile/File.h	16;"	d
vp	test_class.cpp	/^    int vp() {$/;"	f	class:child
vp	test_class.cpp	/^    virtual int vp() {$/;"	f	class:parent
writeCallback	test_http.cpp	/^int writeCallback(SocketPtr& sockptr) {$/;"	f
writeHandle	TCPServerLoop.h	/^    virtual int writeHandle(Socket& _1) {$/;"	f	class:tigerso::Connection
writeHandleEnter	Connection.cpp	/^int Connection::writeHandleEnter(Socket& _l) { return writeHandle(_l); }$/;"	f	class:tigerso::Connection
writeHandleEnter	TCPServerLoop.h	/^    int writeHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
writeIn	File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	HttpFile/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	HttpFile/RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writeIn	RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writeIn	sendfile/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	sendfile/RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writePidFile	DaemonBase.cpp	/^int DaemonBase::writePidFile() {$/;"	f	class:tigerso::DaemonBase
~Acceptor	Acceptor.cpp	/^Acceptor::~Acceptor() {}$/;"	f	class:tigerso::Acceptor
~Connection	Connection.cpp	/^Connection::~Connection() {}$/;"	f	class:tigerso::Connection
~Connection	TCPServerLoop.h	/^    ~Connection() { }$/;"	f	class:tigerso::Connection
~ConnectionFactory	ConnectionFactory.cpp	/^ConnectionFactory::~ConnectionFactory() {}$/;"	f	class:tigerso::ConnectionFactory
~DaemonBase	DaemonBase.cpp	/^DaemonBase::~DaemonBase() {$/;"	f	class:tigerso::DaemonBase
~File	File.cpp	/^File::~File() {$/;"	f	class:File
~File	HttpFile/File.cpp	/^File::~File() {$/;"	f	class:File
~File	sendfile/File.cpp	/^File::~File() {$/;"	f	class:File
~HttpProxyConnection	backup/http_proxy.cpp	/^    ~HttpProxyConnection() {$/;"	f	class:HttpProxyConnection
~HttpsContext	backup/SSLContex.h	/^    ~HttpsContext() {$/;"	f	class:HttpsContext
~HttpsContext	https_lib/SSLContext.cpp	/^    ~HttpsContext() {$/;"	f	class:SSLContext::HttpsContext
~RingBuffer	HttpFile/RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~RingBuffer	RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~RingBuffer	sendfile/RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~SSLContextFactory	https_lib/Https.h	/^    ~SSLContextFactory() {$/;"	f	class:SSLContextFactory
~TCPServerLoop	TCPServerLoop.h	/^    ~TCPServerLoop() {}$/;"	f
~TimeEvent	backup/TimedEvent.h	/^    ~TimeEvent() { destory(); }$/;"	f	class:TimedEvent
~child	test_class.cpp	/^    ~child() {}$/;"	f	class:child
~mytest	backup/deleteself.cc	/^   ~mytest() {$/;"	f	class:mytest
~parent	test_class.cpp	/^    virtual ~parent() {}$/;"	f	class:parent
