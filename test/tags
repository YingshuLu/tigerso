!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLDIRS	Makefile	/^ALLDIRS := $(shell ls -R $(WORKPATH) | grep '^\\\/.*$$' | grep -v "test" | awk '{gsub(":","");print}')$/;"	m
AsyncDNSResolver	test_ares.cpp	/^class AsyncDNSResolver {$/;"	c	file:
BIND_EVENTHANDLE	backup/http_proxy.cpp	42;"	d	file:
BUILDDIR	Makefile	/^BUILDDIR := $(OUTPUT)\/Build\/objs$/;"	m
CC	Makefile	/^CC := g++$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS := -fPIC -shared$/;"	m
DBG_LOG	backup/http_proxy.cpp	29;"	d	file:
DBG_LOG	sendfile/sendfile.cc	20;"	d	file:
DBG_LOG	sendfile/sendfile.cc	22;"	d	file:
DEPY	Makefile	/^DEPY := http_parser$/;"	m
DNSInstance	test_dns.cpp	/^DNSResolver DNSInstance;$/;"	v
DNS_SERVER_ADDR	test_ares.cpp	8;"	d	file:
DNS_SERVER_PORT	test_ares.cpp	9;"	d	file:
DaemonBase	Daemon.h	/^class DaemonBase {$/;"	c
ERR_HANDLE	backup/http_proxy.cpp	25;"	d	file:
FILE_ACTION_OK	sendfile/File.h	21;"	d
FILE_ARGS_INVALID	sendfile/File.h	26;"	d
FILE_FD_INVALID	sendfile/File.h	25;"	d
FILE_NAME_MAX_LENGTH	sendfile/File.h	20;"	d
FILE_OPEN_ERROR	sendfile/File.h	22;"	d
FILE_READ_ACCESS_DENY	sendfile/File.h	24;"	d
FILE_SENDFILE_DONE	sendfile/File.h	30;"	d
FILE_SENDFILE_ERROR	sendfile/File.h	28;"	d
FILE_SENDFILE_RECALL	sendfile/File.h	29;"	d
FILE_WRITE_ACCESS_DENY	sendfile/File.h	23;"	d
File	sendfile/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	sendfile/File.h	/^class File {$/;"	c
HTTPCONNECTIONPTR	http_server.cpp	/^typedef std::shared_ptr<HttpConnection> HTTPCONNECTIONPTR;$/;"	t	file:
HTTPPROXYCONNECTIONPTR	backup/http_proxy.cpp	/^typedef std::shared_ptr<HttpProxyConnection> HTTPPROXYCONNECTIONPTR;$/;"	t	file:
HttpConnection	http_server.cpp	/^    HttpConnection(): sockptr(std::make_shared<Socket>()) {}$/;"	f	class:HttpConnection
HttpConnection	http_server.cpp	/^class HttpConnection {$/;"	c	file:
HttpProxyConnection	backup/http_proxy.cpp	/^    HttpProxyConnection(): ID_(HttpProxyConnection::uuid()), $/;"	f	class:HttpProxyConnection
HttpProxyConnection	backup/http_proxy.cpp	/^class HttpProxyConnection {$/;"	c	file:
HttpProxyLoop	backup/http_proxy.cpp	/^    HttpProxyLoop(const std::string& ipaddr, const std::string& port):$/;"	f	class:HttpProxyLoop
HttpProxyLoop	backup/http_proxy.cpp	/^class HttpProxyLoop {   $/;"	c	file:
HttpServer	http_server.cpp	/^class HttpServer {$/;"	c	file:
HttpTransaction	backup/http_proxy.cpp	/^struct HttpTransaction {$/;"	s	class:HttpProxyConnection	file:
IDTYPE	backup/http_proxy.cpp	/^typedef unsigned long IDTYPE;  $/;"	t	file:
ID_	backup/http_proxy.cpp	/^    const IDTYPE  ID_;$/;"	m	class:HttpProxyConnection	file:
INCFLAGS	Makefile	/^INCFLAGS := -I $(WORKPATH)$/;"	m
INCS	Makefile	/^INCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.h))$/;"	m
LIBFLAGS	Makefile	/^LIBFLAGS := -L$(LIBPATH) -l$(DEPY) $(PTHREAD_FLAG) $(SHM_FLAG)$/;"	m
LOOP_CALLBACK	backup/http_proxy.cpp	/^typedef std::function<int(HttpProxyConnection&)> LOOP_CALLBACK ;$/;"	t	class:HttpProxyConnection	file:
MCBUFFER_DEBUG_	buffer_test.cc	14;"	d	file:
MCBUFFER_DEBUG_	test_buffer.cpp	16;"	d	file:
OBJS	Makefile	/^OBJS := $(foreach obj, $(OBJSLIST), $(BUILDDIR)\/$(obj))$/;"	m
OBJSLIST	Makefile	/^OBJSLIST := $(notdir $(OLDOBJS))$/;"	m
OLDOBJS	Makefile	/^OLDOBJS := $(patsubst %.cpp, %.o, $(SRCS))$/;"	m
OUTPUT	Makefile	/^OUTPUT := $(WORKPATH)\/output$/;"	m
PROJECT	Makefile	/^PROJECT := httpd$/;"	m
PROXY_LOG	backup/http_proxy.cpp	43;"	d	file:
PTHREAD_FLAG	Makefile	/^PTHREAD_FLAG := -lpthread$/;"	m
ProxyConnection	test_http.cpp	/^    explicit ProxyConnection(SocketPtr& clientptr, SocketPtr& serverptr): sockfd_(clientptr->getSocket()) {$/;"	f	class:ProxyConnection
ProxyConnection	test_http.cpp	/^    explicit ProxyConnection(SocketPtr& sockptr): sockfd_(sockptr->getSocket()) {$/;"	f	class:ProxyConnection
ProxyConnection	test_http.cpp	/^class ProxyConnection {$/;"	c	file:
SEND_DEBUG	sendfile/sendfile.cc	18;"	d	file:
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHM_FLAG	Makefile	/^SHM_FLAG := -lrt$/;"	m
SOCKETPTR	backup/http_proxy.cpp	/^typedef std::shared_ptr<Socket> SOCKETPTR;$/;"	t	file:
SRCS	Makefile	/^SRCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
TARGET	Makefile	/^TARGET := $(OUTPUT)\/$(PROJECT)$/;"	m
TEST_FILEACCESS	sendfile/File.h	18;"	d
TcpConnection	test_http.cpp	/^class TcpConnection {$/;"	c	file:
UUID_T	http_server.cpp	/^typedef unsigned int UUID_T; $/;"	t	file:
WORKPATH	Makefile	/^WORKPATH := $(shell cd .. && pwd)$/;"	m
_baseID	http_server.cpp	/^    static UUID_T _baseID;$/;"	m	class:HttpConnection	file:
_baseID	http_server.cpp	/^UUID_T HttpConnection::_baseID = 0;$/;"	m	class:HttpConnection	file:
_clientSocket	backup/http_proxy.cpp	38;"	d	file:
_connections	http_server.cpp	/^    std::map<UUID_T, HTTPCONNECTIONPTR> _connections;$/;"	m	class:HttpServer	file:
_countConnections	http_server.cpp	/^    int _countConnections() { return _connections.size(); }$/;"	f	class:HttpServer	file:
_createListenMaster	http_server.cpp	/^    int _createListenMaster(const char* ipaddr, int port) {$/;"	f	class:HttpServer	file:
_dnsSocket	backup/http_proxy.cpp	40;"	d	file:
_eloop	http_server.cpp	/^    EventsLoop _eloop;$/;"	m	class:HttpServer	file:
_host	http_server.cpp	/^    const std::string _host;$/;"	m	class:HttpServer	file:
_masterSock	http_server.cpp	/^    SocketPtr _masterSock;$/;"	m	class:HttpServer	file:
_newConnection	http_server.cpp	/^    HTTPCONNECTIONPTR _newConnection() {$/;"	f	class:HttpServer	file:
_parser	http_server.cpp	/^    HttpParser        _parser;$/;"	m	class:HttpConnection	file:
_request	http_server.cpp	/^    HttpRquest        _request;$/;"	m	class:HttpConnection	file:
_response	http_server.cpp	/^    HttpResponse      _response;$/;"	m	class:HttpConnection	file:
_serverSocket	backup/http_proxy.cpp	39;"	d	file:
_updateUID	http_server.cpp	/^UUID_T HttpConnection::_updateUID() {$/;"	f	class:HttpConnection
_uuid	http_server.cpp	/^    UUID_T _uuid = 0;$/;"	m	class:HttpConnection	file:
aa	test_thread.cpp	/^int aa = 0;$/;"	v
acceptConnections	http_server.cpp	/^    int acceptConnections(Socket& master) {$/;"	f	class:HttpServer
acceptHttpClientConnection	backup/http_proxy.cpp	/^     int acceptHttpClientConnection(Socket& master) {$/;"	f	class:HttpProxyLoop
acceptMasterSocket	test_http.cpp	/^int acceptMasterSocket(SocketPtr& master) {$/;"	f
afterCallback	test_http.cpp	/^int afterCallback(SocketPtr& sockptr) {$/;"	f
appendWriteIn	sendfile/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
base_	backup/http_proxy.cpp	/^    static IDTYPE base_;$/;"	m	class:HttpProxyConnection	file:
base_	backup/http_proxy.cpp	/^IDTYPE HttpProxyConnection::base_ = 0;$/;"	m	class:HttpProxyConnection	file:
beforeCallback	test_http.cpp	/^int beforeCallback(SocketPtr& sockptr) {$/;"	f
blocking	sendfile/File.h	15;"	d
c_ptr	test_mutex.cpp	/^share_count* c_ptr = nullptr;$/;"	v
child_start	test_mutex.cpp	/^int child_start() {$/;"	f
cleanup_openssl	https_client.cpp	/^void cleanup_openssl()$/;"	f
clear	backup/http_proxy.cpp	/^    void clear() {$/;"	f	class:HttpProxyLoop	file:
client2close_	backup/http_proxy.cpp	/^    bool client2close_ = false;$/;"	m	class:HttpProxyConnection	file:
clientCloseHandle	backup/http_proxy.cpp	/^  int clientCloseHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientErrorHandle	backup/http_proxy.cpp	/^    int clientErrorHandle(Socket& client) {  return clientRDHUPHandle(client); }$/;"	f	class:HttpProxyConnection
clientFinalWriteHandle	backup/http_proxy.cpp	/^    int clientFinalWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientFirstReadHandle	backup/http_proxy.cpp	/^    int clientFirstReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientOnlyWriteHandle	backup/http_proxy.cpp	/^    int clientOnlyWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientRDHUPHandle	backup/http_proxy.cpp	/^    int clientRDHUPHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientReadHandle	backup/http_proxy.cpp	/^    int clientReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientSafeClose	backup/http_proxy.cpp	/^   int clientSafeClose(Socket& client) {$/;"	f	class:HttpProxyConnection
clientTunnelReadHandle	backup/http_proxy.cpp	/^    int clientTunnelReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientTunnelWriteHandle	backup/http_proxy.cpp	/^    int clientTunnelWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientWriteHandle	backup/http_proxy.cpp	/^    int clientWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientptr_	test_http.cpp	/^    SocketPtr clientptr_ = nullptr;$/;"	m	class:ProxyConnection	file:
closeProxy	test_http.cpp	/^    void closeProxy() {$/;"	f	class:ProxyConnection
closeProxyConnection	backup/http_proxy.cpp	/^    void closeProxyConnection() {$/;"	f	class:HttpProxyConnection
cnt	test_dns.cpp	/^static int cnt = 0;$/;"	v	file:
configure_context	https_client.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
connections_	backup/http_proxy.cpp	/^    std::map<IDTYPE, HTTPPROXYCONNECTIONPTR> connections_; $/;"	m	class:HttpProxyLoop	file:
count	test_mutex.cpp	/^    int count;$/;"	m	struct:share_count	file:
countHttpConnections	backup/http_proxy.cpp	/^    int countHttpConnections() {$/;"	f	class:HttpProxyLoop
cparser_	backup/http_proxy.cpp	/^    HttpParser cparser_;$/;"	m	class:HttpProxyConnection	file:
createQuery	test_ares.cpp	/^    int createQuery(const char* host, unsigned char* buf, size_t len) {$/;"	f	class:AsyncDNSResolver	file:
create_context	https_client.cpp	/^SSL_CTX *create_context()$/;"	f
create_socket	https_client.cpp	/^int create_socket(int port)$/;"	f
csockptr	backup/http_proxy.cpp	/^    const SOCKETPTR csockptr;$/;"	m	class:HttpProxyConnection	file:
ctransaction_	backup/http_proxy.cpp	/^    HttpTransaction ctransaction_;$/;"	m	class:HttpProxyConnection	file:
cur_	sendfile/File.h	/^    off_t cur_;$/;"	m	class:File
deleteConnection	http_server.cpp	/^    int deleteConnection(HTTPCONNECTIONPTR& hcptr) {$/;"	f	class:HttpServer	file:
deleteProxyConnection	test_http.cpp	/^bool deleteProxyConnection(SocketPtr& clientptr) {$/;"	f
deleteself	deleteself.cc	/^   int  deleteself() {$/;"	f	class:mytest
destoryHttpProxyPool	backup/http_proxy.cpp	/^int destoryHttpProxyPool() {$/;"	f
destoryProxy	http_proxy.cpp	/^int destoryProxy() {$/;"	f
discardIDs_	backup/http_proxy.cpp	/^    std::set<IDTYPE> discardIDs_;$/;"	m	class:HttpProxyLoop	file:
discardThisHttpProxyConnection	backup/http_proxy.cpp	/^     int discardThisHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:HttpProxyLoop
dsockptr	backup/http_proxy.cpp	/^    const SOCKETPTR dsockptr;$/;"	m	class:HttpProxyConnection	file:
eloop	test_http.cpp	/^EventsLoop eloop;$/;"	v
eloop_	backup/http_proxy.cpp	/^    EventsLoop eloop_;$/;"	m	class:HttpProxyLoop	file:
elooptr_	backup/http_proxy.cpp	/^    EventsLoop* elooptr_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
eraseHttpProxyConnection	backup/http_proxy.cpp	/^    int eraseHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:HttpProxyLoop	file:
erase_func_	backup/http_proxy.cpp	/^    LOOP_CALLBACK erase_func_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
errorCallback	test_http.cpp	/^int errorCallback(SocketPtr& sockptr) {$/;"	f
fd_	sendfile/File.h	/^    int fd_;$/;"	m	class:File
filename_	sendfile/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH];$/;"	m	class:File
finalize	backup/http_proxy.cpp	/^    void finalize() {$/;"	f	class:HttpProxyConnection	file:
forceCloseProxyConnection	backup/http_proxy.cpp	/^    void forceCloseProxyConnection() {$/;"	f	class:HttpProxyConnection
g_configini	http_proxy.cpp	/^tigerso::core::ConfigParser* g_configini = nullptr;$/;"	v
g_httpproxy	http_proxy.cpp	/^tigerso::http::HttpProxyLoop* g_httpproxy = nullptr;$/;"	v
g_httpproxypoolptr	backup/http_proxy.cpp	/^HttpProxyLoop* g_httpproxypoolptr = nullptr;$/;"	v
g_logging	http_proxy.cpp	/^tigerso::core::Logging* g_logging = nullptr;$/;"	v
getClientSocketPtr	test_http.cpp	/^SocketPtr getClientSocketPtr(SocketPtr& serverptr) {$/;"	f
getFileLength	sendfile/sendfile.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileSize	sendfile/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getID	backup/http_proxy.cpp	/^    const IDTYPE& getID() { return ID_; }$/;"	f	class:HttpProxyConnection
getID	test_bind.cpp	/^    int& getID() {return id;}$/;"	f	class:nocopy
getKey	test_http.cpp	/^    int getKey() { return sockfd_; }$/;"	f	class:ProxyConnection
getProxyConnection	test_http.cpp	/^ProxyConnection& getProxyConnection(SocketPtr& clientptr) {$/;"	f
getServerSocketPtr	test_http.cpp	/^SocketPtr getServerSocketPtr(SocketPtr& clientptr) {$/;"	f
getUid	http_server.cpp	/^    UUID_T getUid() { return _uuid; }$/;"	f	class:HttpConnection
host_	test_http.cpp	/^    string host_;$/;"	m	class:ProxyConnection	file:
httpproxypool	test_http.cpp	/^vector<ProxyConnection> httpproxypool;$/;"	v
id	test_bind.cpp	/^  int id = 0;  $/;"	m	class:nocopy	file:
info	deleteself.cc	/^    int info() { cout << "haha, not see me" << endl;}$/;"	f	class:mytest
initHttpProxyPool	backup/http_proxy.cpp	/^int initHttpProxyPool(const char* ipaddr, const int port) {$/;"	f
initListenConnection	backup/http_proxy.cpp	/^    int initListenConnection() {$/;"	f	class:HttpProxyLoop
initProxy	http_proxy.cpp	/^int initProxy() {$/;"	f
init_openssl	https_client.cpp	/^void init_openssl()$/;"	f
insertHttpProxyConnectionPtr	backup/http_proxy.cpp	/^    int insertHttpProxyConnectionPtr(HTTPPROXYCONNECTIONPTR& hcptr) {$/;"	f	class:HttpProxyLoop	file:
ipaddr_	backup/http_proxy.cpp	/^    const std::string ipaddr_;$/;"	m	class:HttpProxyLoop	file:
isClientAlive	backup/http_proxy.cpp	/^    bool isClientAlive() { return _clientSocket.exist(); }$/;"	f	class:HttpProxyConnection	file:
isServerAlive	backup/http_proxy.cpp	/^    bool isServerAlive() { return _serverSocket.exist(); }$/;"	f	class:HttpProxyConnection	file:
keepalive_	backup/http_proxy.cpp	/^    bool keepalive_ = true;$/;"	m	class:HttpProxyConnection	file:
linkServer	test_http.cpp	/^    bool linkServer(SocketPtr& sockptr) {$/;"	f	class:ProxyConnection
linkServerSocketPtr	test_http.cpp	/^bool linkServerSocketPtr(SocketPtr& clientptr, SocketPtr& serverptr) {$/;"	f
listenHttpClientConnection	backup/http_proxy.cpp	/^    int listenHttpClientConnection() {$/;"	f	class:HttpProxyLoop	file:
listen_sock	buffer_test.cc	/^McSocket listen_sock;$/;"	v
listen_sock	test_buffer.cpp	/^McSocket listen_sock;$/;"	v
listenfd	sendfile/sendfile.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listeningOnLocal	sendfile/sendfile.cc	/^int listeningOnLocal() {$/;"	f
log_ptr	test_mutex.cpp	/^Logging* log_ptr = nullptr;$/;"	v
main	backup/http_proxy.cpp	/^int main() {$/;"	f
main	buffer_test.cc	/^int main(){$/;"	f
main	deleteself.cc	/^int main() {$/;"	f
main	http_proxy.cpp	/^int main() {$/;"	f
main	https_client.cpp	/^int main(int argc, char **argv)$/;"	f
main	main.cpp	/^int main() {$/;"	f
main	sendfile/sendfile.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	test_bind.cpp	/^int main() {$/;"	f
main	test_buffer.cpp	/^int main(){$/;"	f
main	test_dns.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test_http.cpp	/^int main() {$/;"	f
main	test_mutex.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test_thread.cpp	/^int main() {$/;"	f
makeHttpProxyConnection	backup/http_proxy.cpp	/^   HTTPPROXYCONNECTIONPTR makeHttpProxyConnection() {$/;"	f	class:HttpProxyLoop	file:
masterAfterHandle	backup/http_proxy.cpp	/^     int masterAfterHandle(Socket& master) {$/;"	f	class:HttpProxyLoop
masterErrorHandle	backup/http_proxy.cpp	/^     int masterErrorHandle(Socket& master) {$/;"	f	class:HttpProxyLoop
msockptr_	backup/http_proxy.cpp	/^    const SOCKETPTR msockptr_;$/;"	m	class:HttpProxyLoop	file:
mytest	deleteself.cc	/^    mytest(){}$/;"	f	class:mytest
mytest	deleteself.cc	/^class mytest {$/;"	c	file:
nocopy	test_bind.cpp	/^    nocopy(){}$/;"	f	class:nocopy
nocopy	test_bind.cpp	/^class nocopy {$/;"	c	file:
nocopy_func	test_bind.cpp	/^typedef std::function<int(nocopy&)> nocopy_func;$/;"	t	file:
nonBlocking	sendfile/File.h	14;"	d
nonBlocking	sendfile/sendfile.cc	16;"	d	file:
parser	test_http.cpp	/^HttpParser parser;$/;"	v
pe	deleteself.cc	/^    peer* pe;$/;"	m	class:mytest	file:
peer	deleteself.cc	/^    peer() {}$/;"	f	class:peer
peer	deleteself.cc	/^class peer {$/;"	c	file:
peerIPstr_	test_http.cpp	/^    string peerIPstr_;$/;"	m	class:TcpConnection	file:
pid	test_mutex.cpp	/^    pid_t pid;$/;"	m	struct:share_count	file:
plog	main.cpp	/^Logging* plog = Logging::getInstance();$/;"	v
port_	backup/http_proxy.cpp	/^    std::string port_;$/;"	m	class:HttpProxyLoop	file:
port_	test_http.cpp	/^    string port_;$/;"	m	class:ProxyConnection	file:
port_	test_http.cpp	/^    string port_;$/;"	m	class:TcpConnection	file:
printInfo	buffer_test.cc	/^void printInfo() {$/;"	f
printInfo	test_buffer.cpp	/^void printInfo() {$/;"	f
print_class	test_bind.cpp	/^int print_class(nocopy_func func, nocopy& copy) {$/;"	f
print_share_count	test_mutex.cpp	/^void print_share_count() {$/;"	f
queryIP	test_dns.cpp	/^int queryIP(const char* host) {$/;"	f
readCallback	test_http.cpp	/^int readCallback(SocketPtr& sockptr) {$/;"	f
readOut	sendfile/File.cpp	/^ssize_t File::readOut(char* buf, size_t len) {$/;"	f	class:File
registerFunctionsForHttpProxyConnection	backup/http_proxy.cpp	/^    void registerFunctionsForHttpProxyConnection(HttpProxyConnection& hpc) {$/;"	f	class:HttpProxyLoop	file:
registerSocket	backup/http_proxy.cpp	/^    int registerSocket(Socket& sock) {$/;"	f	class:HttpProxyLoop
registerSocket	http_server.cpp	/^    int registerSocket(Socket& socket) {$/;"	f	class:HttpServer	file:
register_func_	backup/http_proxy.cpp	/^    EventFunc register_func_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
request	backup/http_proxy.cpp	/^    HttpRequest request;$/;"	m	struct:HttpProxyConnection::HttpTransaction	file:
reset	sendfile/File.h	/^    inline void reset() { fd_ = -1; size_ = 0; cur_ = 0; bzero(filename_, FILE_NAME_MAX_LENGTH); }$/;"	f	class:File
resolver_	backup/http_proxy.cpp	/^    DNSResolver resolver_;$/;"	m	class:HttpProxyConnection	file:
response	backup/http_proxy.cpp	/^    HttpResponse response;$/;"	m	struct:HttpProxyConnection::HttpTransaction	file:
sem	test_mutex.cpp	/^FileLock* sem = nullptr;$/;"	v
send2Socket	sendfile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
sendFile	sendfile/sendfile.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
server2close_	backup/http_proxy.cpp	/^    bool server2close_ = false;$/;"	m	class:HttpProxyConnection	file:
serverCloseHandle	backup/http_proxy.cpp	/^  int serverCloseHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverConnectTo	backup/http_proxy.cpp	/^    int serverConnectTo(const char* ip, time_t ttl) {$/;"	f	class:HttpProxyConnection
serverDecideSkipBody	backup/http_proxy.cpp	/^    void serverDecideSkipBody() {$/;"	f	class:HttpProxyConnection	file:
serverErrorHandle	backup/http_proxy.cpp	/^    int serverErrorHandle(Socket& server) {  return serverRDHUPHandle(server); }$/;"	f	class:HttpProxyConnection
serverFirstWriteHandle	backup/http_proxy.cpp	/^    int serverFirstWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverOnlyWriteHandle	backup/http_proxy.cpp	/^    int serverOnlyWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverRDHUPHandle	backup/http_proxy.cpp	/^    int serverRDHUPHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverReadHandle	backup/http_proxy.cpp	/^    int serverReadHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverSafeClose	backup/http_proxy.cpp	/^   int serverSafeClose(Socket& server) {$/;"	f	class:HttpProxyConnection
serverTunnelReadHandle	backup/http_proxy.cpp	/^    int serverTunnelReadHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverTunnelWriteHandle	backup/http_proxy.cpp	/^    int serverTunnelWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverWriteHandle	backup/http_proxy.cpp	/^    int serverWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverptr_	test_http.cpp	/^    SocketPtr serverptr_ = nullptr;$/;"	m	class:ProxyConnection	file:
setBlockingIO	sendfile/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setEraseFunc	backup/http_proxy.cpp	/^    void setEraseFunc(LOOP_CALLBACK cb) { erase_func_ = cb; }$/;"	f	class:HttpProxyConnection
setEventsLoopPtr	backup/http_proxy.cpp	/^    void setEventsLoopPtr(EventsLoop* loop) {$/;"	f	class:HttpProxyConnection
setFilename	sendfile/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setSocketRegisterFunc	backup/http_proxy.cpp	/^    void setSocketRegisterFunc(EventFunc f) {register_func_ = f;}$/;"	f	class:HttpProxyConnection
share_count	test_mutex.cpp	/^    share_count():count(0), pid(-1) {}$/;"	f	struct:share_count
share_count	test_mutex.cpp	/^struct share_count {$/;"	s	file:
showComplete	sendfile/sendfile.cc	25;"	d	file:
showIPAddress	test_dns.cpp	/^int showIPAddress(const char* ipaddr, time_t rttl) {$/;"	f
showProcess	sendfile/sendfile.cc	/^void showProcess(long now, long total) {$/;"	f
size_	sendfile/File.h	/^    off_t size_;$/;"	m	class:File
socketDisableReadEvent	backup/http_proxy.cpp	/^    bool socketDisableReadEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketDisableWriteEvent	backup/http_proxy.cpp	/^    bool socketDisableWriteEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketEnableReadEvent	backup/http_proxy.cpp	/^    bool socketEnableReadEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketEnableWriteEvent	backup/http_proxy.cpp	/^    bool socketEnableWriteEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketNullHandle	backup/http_proxy.cpp	/^    int socketNullHandle(Socket& sock) {$/;"	f	class:HttpProxyConnection
socketSetEventHandle	backup/http_proxy.cpp	/^    bool socketSetEventHandle(Socket& sock, EventFunc func, unsigned short flag) {$/;"	f	class:HttpProxyConnection	file:
sockfd_	test_http.cpp	/^    socket_t sockfd_  = -1;$/;"	m	class:ProxyConnection	file:
sockptr	http_server.cpp	/^    const SocketPtr sockptr;$/;"	m	class:HttpConnection	file:
sparser_	backup/http_proxy.cpp	/^    HttpParser sparser_;$/;"	m	class:HttpProxyConnection	file:
ssockptr	backup/http_proxy.cpp	/^    const SOCKETPTR ssockptr;$/;"	m	class:HttpProxyConnection	file:
startLoop	backup/http_proxy.cpp	/^    int startLoop() {$/;"	f	class:HttpProxyLoop
startProxy	http_proxy.cpp	/^int startProxy() {$/;"	f
staticWebCGI	http_server.cpp	/^    staticWebCGI(HttpRquest& request, HttpResponse) {$/;"	f	class:staticWebCGI
staticWebCGI	http_server.cpp	/^class staticWebCGI {$/;"	c	file:
stransaction_	backup/http_proxy.cpp	/^    HttpTransaction stransaction_;$/;"	m	class:HttpProxyConnection	file:
tcpServer	test_http.cpp	/^int tcpServer(SocketPtr& master) {$/;"	f
test	deleteself.cc	/^    mytest* test;$/;"	m	class:peer	file:
test	test_bind.cpp	/^    int test(nocopy& np) {$/;"	f	class:testbind
test	test_thread.cpp	/^void test() {$/;"	f
testExist	sendfile/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testRead	sendfile/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testWrite	sendfile/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testbind	test_bind.cpp	/^    testbind() {}$/;"	f	class:testbind
testbind	test_bind.cpp	/^class testbind {$/;"	c	file:
testdata	deleteself.cc	/^    static int testdata;$/;"	m	class:mytest	file:
testdata2	deleteself.cc	/^    static int testdata2;$/;"	m	class:mytest	file:
testf	test_bind.cpp	/^int testf(function<int()> func) {$/;"	f
transferProxyBuffer	backup/http_proxy.cpp	/^    void transferProxyBuffer() {$/;"	f	class:HttpProxyConnection	file:
tunnelReadClientCallback	test_http.cpp	/^int tunnelReadClientCallback(SocketPtr& clientptr) {$/;"	f
tunnelReadServerCallback	test_http.cpp	/^int tunnelReadServerCallback(SocketPtr& serverptr) {$/;"	f
tunnelWriteClientCallback	test_http.cpp	/^int tunnelWriteClientCallback(SocketPtr& clientptr) {$/;"	f
tunnelWriteServerCallback	test_http.cpp	/^int tunnelWriteServerCallback(SocketPtr& serverptr) {$/;"	f
udpsock	test_dns.cpp	/^Socket udpsock;$/;"	v
unlink	sendfile/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlinkServer	test_http.cpp	/^    bool unlinkServer(SocketPtr& sockptr) {$/;"	f	class:ProxyConnection
uuid	backup/http_proxy.cpp	/^    static IDTYPE uuid() {$/;"	f	class:HttpProxyConnection	file:
validFd	sendfile/File.h	16;"	d
writeCallback	test_http.cpp	/^int writeCallback(SocketPtr& sockptr) {$/;"	f
writeIn	sendfile/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
~File	sendfile/File.cpp	/^File::~File() {$/;"	f	class:File
~HttpProxyConnection	backup/http_proxy.cpp	/^    ~HttpProxyConnection() {$/;"	f	class:HttpProxyConnection
~mytest	deleteself.cc	/^   ~mytest() {$/;"	f	class:mytest
