!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLDIRS	Makefile	/^ALLDIRS := $(shell ls -R $(WORKPATH) | grep '^\\\/.*$$' | grep -v "test" | awk '{gsub(":","");print}')$/;"	m
BUILDDIR	Makefile	/^BUILDDIR := $(OUTPUT)\/Build\/objs$/;"	m
CC	Makefile	/^CC := g++$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS := -fPIC -shared$/;"	m
DEPY	Makefile	/^DEPY := http_parser$/;"	m
INCFLAGS	Makefile	/^INCFLAGS := -I $(WORKPATH)$/;"	m
INCS	Makefile	/^INCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.h))$/;"	m
LIBFLAGS	Makefile	/^LIBFLAGS := -L$(LIBPATH) -l$(DEPY) $(PTHREAD_FLAG) $(SHM_FLAG)$/;"	m
MCBUFFER_DEBUG_	buffer_test.cc	14;"	d	file:
MCBUFFER_DEBUG_	test_buffer.cpp	16;"	d	file:
OBJS	Makefile	/^OBJS := $(foreach obj, $(OBJSLIST), $(BUILDDIR)\/$(obj))$/;"	m
OBJSLIST	Makefile	/^OBJSLIST := $(notdir $(OLDOBJS))$/;"	m
OLDOBJS	Makefile	/^OLDOBJS := $(patsubst %.cpp, %.o, $(SRCS))$/;"	m
OUTPUT	Makefile	/^OUTPUT := $(WORKPATH)\/output$/;"	m
PROJECT	Makefile	/^PROJECT := httpd$/;"	m
PTHREAD_FLAG	Makefile	/^PTHREAD_FLAG := -lpthread$/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHM_FLAG	Makefile	/^SHM_FLAG := -lrt$/;"	m
SRCS	Makefile	/^SRCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
TARGET	Makefile	/^TARGET := $(OUTPUT)\/$(PROJECT)$/;"	m
WORKPATH	Makefile	/^WORKPATH := $(shell cd .. && pwd)$/;"	m
acceptMasterSocket	test_http.cpp	/^int acceptMasterSocket(SocketPtr& master) {$/;"	f
afterCallback	test_http.cpp	/^int afterCallback(SocketPtr& sockptr) {$/;"	f
beforeCallback	test_http.cpp	/^int beforeCallback(SocketPtr& sockptr) {$/;"	f
c_ptr	test_mutex.cpp	/^share_count* c_ptr = nullptr;$/;"	v
child_start	test_mutex.cpp	/^int child_start() {$/;"	f
count	test_mutex.cpp	/^    int count;$/;"	m	struct:share_count	file:
deleteFromSocketList	test_http.cpp	/^int deleteFromSocketList(const SocketPtr& sockptr) {$/;"	f
errorCallback	test_http.cpp	/^int errorCallback(SocketPtr& sockptr) {$/;"	f
listen_sock	buffer_test.cc	/^McSocket listen_sock;$/;"	v
listen_sock	test_buffer.cpp	/^McSocket listen_sock;$/;"	v
log_ptr	test_mutex.cpp	/^Logging* log_ptr = nullptr;$/;"	v
main	buffer_test.cc	/^int main(){$/;"	f
main	main.cpp	/^int main() {$/;"	f
main	test_buffer.cpp	/^int main(){$/;"	f
main	test_http.cpp	/^int main() {$/;"	f
main	test_mutex.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test_thread.cpp	/^int main() {$/;"	f
parser	test_http.cpp	/^HttpParser parser;$/;"	v
pid	test_mutex.cpp	/^    pid_t pid;$/;"	m	struct:share_count	file:
plog	main.cpp	/^Logging* plog = Logging::getInstance();$/;"	v
printInfo	buffer_test.cc	/^void printInfo() {$/;"	f
printInfo	test_buffer.cpp	/^void printInfo() {$/;"	f
print_share_count	test_mutex.cpp	/^void print_share_count() {$/;"	f
readCallback	test_http.cpp	/^int readCallback(SocketPtr& sockptr) {$/;"	f
sem	test_mutex.cpp	/^ShmMutex* sem = nullptr;$/;"	v
share_count	test_mutex.cpp	/^    share_count():count(0), pid(-1) {}$/;"	f	struct:share_count
share_count	test_mutex.cpp	/^struct share_count {$/;"	s	file:
socklist	test_http.cpp	/^vector<SocketPtr> socklist;$/;"	v
tcpServer	test_http.cpp	/^int tcpServer(SocketPtr& master) {$/;"	f
writeCallback	test_http.cpp	/^int writeCallback(SocketPtr& sockptr) {$/;"	f
