!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLLOG	Logging.h	/^	ALLLOG = 3$/;"	e	enum:tigerso::LOGLEVEL
COMMENT	ConfigParser.h	27;"	d
COMTB	ConfigParser.h	17;"	d
CONFIGFILE	tigerso.h	/^const std::string  CONFIGFILE  =  CONFIGPATH + "\/" + PROJECT  +".ini";$/;"	m	namespace:tigerso::core
CONFIGPATH	tigerso.h	/^const std::string  CONFIGPATH  =  WORKPATH + "\/etc";$/;"	m	namespace:tigerso::core
ConfigParser	ConfigParser.h	/^	ConfigParser() :isFileExisted(false), isRefreshed(false){}$/;"	f	class:tigerso::ConfigParser
ConfigParser	ConfigParser.h	/^class ConfigParser$/;"	c	namespace:tigerso
DAEMON_CHILD	DaemonBase.cpp	/^    DAEMON_CHILD$/;"	e	enum:tigerso::daemon_role_s	file:
DAEMON_PARENT	DaemonBase.cpp	/^    DAEMON_PARENT,$/;"	e	enum:tigerso::daemon_role_s	file:
DBG_LOG	Logging.h	25;"	d
DEBUG	Logging.h	/^	DEBUG = 2,$/;"	e	enum:tigerso::LOGLEVEL
DEFAULT_SHM_MUTEX_FILENAME	SysUtil.h	/^const string DEFAULT_SHM_MUTEX_FILENAME = "tigerso-mutex";$/;"	m	namespace:tigerso
DaemonBase	DaemonBase.cpp	/^DaemonBase::DaemonBase(const std::string& name) {$/;"	f	class:tigerso::DaemonBase
DaemonBase	DaemonBase.h	/^class DaemonBase {$/;"	c	namespace:tigerso
DaemonRole	DaemonBase.cpp	/^} DaemonRole;$/;"	t	namespace:tigerso	typeref:enum:tigerso::daemon_role_s	file:
DaemonSignals	DaemonBase.cpp	/^static const SignalHandleSet DaemonSignals[] = {$/;"	m	namespace:tigerso	file:
ERRLINE	ConfigParser.h	29;"	d
ERR_RETURN	Logging.h	27;"	d
FILE_ACTION_OK	File.h	26;"	d
FILE_ARGS_INVALID	File.h	31;"	d
FILE_BIG_CONTENT	File.h	24;"	d
FILE_FD_INVALID	File.h	30;"	d
FILE_NAME_MAX_LENGTH	File.h	25;"	d
FILE_OPEN_ERROR	File.h	27;"	d
FILE_READ_ACCESS_DENY	File.h	29;"	d
FILE_SENDFILE_DONE	File.h	35;"	d
FILE_SENDFILE_ERROR	File.h	33;"	d
FILE_SENDFILE_RECALL	File.h	34;"	d
FILE_WRITE_ACCESS_DENY	File.h	28;"	d
File	File.cpp	/^File::File() {}$/;"	f	class:tigerso::File
File	File.cpp	/^File::File(const std::string& filename) {$/;"	f	class:tigerso::File
File	File.h	/^class File {$/;"	c	namespace:tigerso
FileLock	FileLock.cpp	/^FileLock::FileLock(const std::string& filename, const std::string& content): filename_(filename), content_(content) {$/;"	f	class:tigerso::FileLock
FileLock	FileLock.h	/^class FileLock: public Lock {$/;"	c	namespace:tigerso
GLOBAL	tigerso.h	36;"	d
HEX2CHAR	Dechex.cpp	14;"	d	file:
HEXCHAR2DEC	Dechex.cpp	13;"	d	file:
HEX_DIV	Dechex.cpp	12;"	d	file:
HEX_MOD	Dechex.cpp	11;"	d	file:
HOST_MAXLENGTH	tigerso.h	38;"	d
Hash	Hash.cpp	/^namespace Hash {$/;"	n	namespace:tigerso	file:
Hash	Hash.h	/^namespace Hash {$/;"	n	namespace:tigerso
HashKey	Hash.h	/^typedef unsigned long HashKey;$/;"	t	namespace:tigerso
HashSize	Hash.h	/^typedef HashKey HashSize;$/;"	t	namespace:tigerso
HexCharSet	Dechex.cpp	/^static const char HexCharSet[] = {$/;"	m	namespace:tigerso	file:
INFO	Logging.h	/^	INFO = 1,$/;"	e	enum:tigerso::LOGLEVEL
INFO_LOG	Logging.h	26;"	d
IPV4_ADDRSIZE	tigerso.h	37;"	d
KEYB	ConfigParser.h	18;"	d
KEYVAL	ConfigParser.h	28;"	d
LOCK_FAILURE	FileLock.h	10;"	d
LOCK_SUCCESS	FileLock.h	9;"	d
LOGGING_LEVEL_DBG	Logging.cpp	15;"	d	file:
LOGGING_LEVEL_ERR	Logging.cpp	16;"	d	file:
LOGGING_LEVEL_INFO	Logging.cpp	14;"	d	file:
LOGGING_LEVEL_OFF	Logging.cpp	13;"	d	file:
LOGLEVEL	Logging.h	/^enum LOGLEVEL{$/;"	g	namespace:tigerso
LOGNAME	tigerso.h	/^const std::string  LOGNAME     =  "httpd";$/;"	m	namespace:tigerso::core
LOGPATH	tigerso.h	/^const std::string  LOGPATH     =  WORKPATH + "\/log";$/;"	m	namespace:tigerso::core
Lock	SysUtil.h	/^class Lock: public nocopyable {$/;"	c	namespace:tigerso
LockGuard	SysUtil.h	/^   explicit LockGuard(Lock& Lock)$/;"	f	class:tigerso::LockGuard
LockGuard	SysUtil.h	/^class LockGuard {$/;"	c	namespace:tigerso
LockTryGuard	SysUtil.h	/^    explicit LockTryGuard(Lock& Lock)$/;"	f	class:tigerso::LockTryGuard
LockTryGuard	SysUtil.h	/^class LockTryGuard {$/;"	c	namespace:tigerso
Lock_obj	SysUtil.h	/^    Lock& Lock_obj;$/;"	m	class:tigerso::LockGuard
Lock_obj	SysUtil.h	/^    Lock& Lock_obj;$/;"	m	class:tigerso::LockTryGuard
Logging	Logging.h	/^	Logging():endFmt("<__FUNC__>@__FILE__"), level(NOLOG){}$/;"	f	class:tigerso::Logging
Logging	Logging.h	/^class Logging {$/;"	c	namespace:tigerso
MC_LOCK_PRIVATE	SysUtil.h	/^const int MC_LOCK_PRIVATE = 0;$/;"	m	namespace:tigerso
MC_LOCK_SHARE_PROCESS	SysUtil.h	/^const int MC_LOCK_SHARE_PROCESS = 1;$/;"	m	namespace:tigerso
NOLOG	Logging.h	/^	NOLOG = 0,$/;"	e	enum:tigerso::LOGLEVEL
PROJECT	tigerso.h	/^const std::string  PROJECT     =  "tigerso";$/;"	m	namespace:tigerso::core
PUSH2HEXBUF	Dechex.cpp	15;"	d	file:
REVERSESTRING	Dechex.cpp	16;"	d	file:
REVERSE_STRING	Dechex.cpp	/^void REVERSE_STRING(char* beg, char* end) {$/;"	f	namespace:tigerso
SECTB	ConfigParser.h	15;"	d
SECTE	ConfigParser.h	16;"	d
SECTION	ConfigParser.h	26;"	d
SPLIT	Logging.h	17;"	d
SPLIT	Logging.h	20;"	d
SharedMemory	SysUtil.h	/^    SharedMemory():$/;"	f	class:tigerso::SharedMemory
SharedMemory	SysUtil.h	/^    SharedMemory(const string& name, const size_t size, const int prot = MAP_SHARED):$/;"	f	class:tigerso::SharedMemory
SharedMemory	SysUtil.h	/^class SharedMemory: public nocopyable {$/;"	c	namespace:tigerso
ShmMutex	SysUtil.cpp	/^ShmMutex::ShmMutex()$/;"	f	class:tigerso::ShmMutex
ShmMutex	SysUtil.cpp	/^ShmMutex::ShmMutex(const ShmMutex& mutex)$/;"	f	class:tigerso::ShmMutex
ShmMutex	SysUtil.cpp	/^ShmMutex::ShmMutex(const string& shm_name)$/;"	f	class:tigerso::ShmMutex
ShmMutex	SysUtil.h	/^class ShmMutex: public Lock {$/;"	c	namespace:tigerso
SignalHandleSet	DaemonBase.cpp	/^struct SignalHandleSet {$/;"	s	namespace:tigerso	file:
Singleton	BaseClass.h	/^    Singleton() {}$/;"	f	class:tigerso::Singleton
Singleton	BaseClass.h	/^template <typename T> class Singleton {$/;"	c	namespace:tigerso
SysUtil	SysUtil.h	/^class SysUtil {$/;"	c	namespace:tigerso
TEST_FILEACCESS	File.h	22;"	d
TIGERSO_IO_CLOSE	tigerso.h	/^    TIGERSO_IO_CLOSE = -2,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_ERROR	tigerso.h	/^    TIGERSO_IO_ERROR = -1,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_OK	tigerso.h	/^    TIGERSO_IO_OK$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_RECALL	tigerso.h	/^    TIGERSO_IO_RECALL,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGER_IO_ERRORS	tigerso.h	/^} TIGER_IO_ERRORS;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_TIGERSO_IO_STATE_
TS_CORE_BASECLASS_H_	BaseClass.h	2;"	d
TS_CORE_CONFIGPARSER_H_	ConfigParser.h	2;"	d
TS_CORE_DAEMONBASE_H_	DaemonBase.h	2;"	d
TS_CORE_DECHEX_H_	Dechex.h	2;"	d
TS_CORE_FILELOCK_H_	FileLock.h	2;"	d
TS_CORE_FILE_H_	File.h	2;"	d
TS_CORE_HASH_H_	Hash.h	2;"	d
TS_CORE_LOGGING_H_	Logging.h	7;"	d
TS_CORE_SYSUTIL_H_	SysUtil.h	2;"	d
TS_CORE_TIGERSO_H_	tigerso.h	2;"	d
VERSION	tigerso.h	/^const std::string  VERSION     =  "1.0.0";$/;"	m	namespace:tigerso::core
WORKPATH	tigerso.h	/^const std::string  WORKPATH    =  "\/usr\/" + PROJECT;$/;"	m	namespace:tigerso::core
_HASH_PRIMES	Hash.cpp	/^static const unsigned long _HASH_PRIMES[] =$/;"	m	namespace:tigerso::Hash	file:
_TIGERSO_IO_STATE_	tigerso.h	/^typedef enum _TIGERSO_IO_STATE_ {$/;"	g	namespace:tigerso
__BACKTRACE_NUM	DaemonBase.cpp	24;"	d	file:
__CONFIG_FILE	DaemonBase.h	14;"	d
__DAEMON_NAME	DaemonBase.cpp	23;"	d	file:
__child_loop	DaemonBase.cpp	/^static bool __child_loop = true;$/;"	m	namespace:tigerso	file:
__childrens	DaemonBase.cpp	/^static std::set<pid_t> __childrens;$/;"	m	namespace:tigerso	file:
__daemon_role	DaemonBase.cpp	/^static DaemonRole __daemon_role = DAEMON_PARENT;$/;"	m	namespace:tigerso	file:
__eraseChildPid	DaemonBase.cpp	/^void __eraseChildPid(const pid_t pid) {$/;"	f	namespace:tigerso
__parent_loop	DaemonBase.cpp	/^static bool __parent_loop = true;$/;"	m	namespace:tigerso	file:
__reload	DaemonBase.cpp	/^static bool __reload = false;$/;"	m	namespace:tigerso	file:
__signalHandle	DaemonBase.cpp	/^void __signalHandle(int signo) {$/;"	f	namespace:tigerso
__storeChildPid	DaemonBase.cpp	/^void __storeChildPid(const pid_t pid) {$/;"	f	namespace:tigerso
adjustHashSize	Hash.cpp	/^HashSize adjustHashSize(const HashSize& size) {$/;"	f	namespace:tigerso::Hash
adjustPidFileName	DaemonBase.cpp	/^int DaemonBase::adjustPidFileName(const std::string& name) {$/;"	f	class:tigerso::DaemonBase
adjustResources	DaemonBase.cpp	/^int DaemonBase::adjustResources() {$/;"	f	class:tigerso::DaemonBase
appendWriteIn	File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:tigerso::File
blocking	tigerso.h	59;"	d
checkOldDaemon	DaemonBase.cpp	/^int DaemonBase::checkOldDaemon() {$/;"	f	class:tigerso::DaemonBase
childInit	DaemonBase.cpp	/^int DaemonBase::childInit() {$/;"	f	class:tigerso::DaemonBase
childMaxNum_	DaemonBase.h	/^    int childMaxNum_ = 1;$/;"	m	class:tigerso::DaemonBase
childStart	DaemonBase.cpp	/^int DaemonBase::childStart() {$/;"	f	class:tigerso::DaemonBase
childStop	DaemonBase.cpp	/^int DaemonBase::childStop() {$/;"	f	class:tigerso::DaemonBase
clear	File.h	/^    void clear() { reset(); bzero(filename_, sizeof(filename_)); }$/;"	f	class:tigerso::File
close	File.h	/^    int close() { int ret = ::close(fd_); fd_ = -1; }$/;"	f	class:tigerso::File
configMap	ConfigParser.h	/^	std::map<std::string, std::map<std::string, std::string> > configMap;$/;"	m	class:tigerso::ConfigParser
configPtr_	DaemonBase.h	/^    class ConfigParser* configPtr_ = nullptr;$/;"	m	class:tigerso::DaemonBase	typeref:class:tigerso::DaemonBase::ConfigParser
content_	FileLock.h	/^    std::string content_;$/;"	m	class:tigerso::FileLock
continuousReadOut	File.cpp	/^ssize_t File::continuousReadOut(char* buf, size_t len) {$/;"	f	class:tigerso::File
core	tigerso.h	/^namespace core {$/;"	n	namespace:tigerso
coreDumpPrints	DaemonBase.cpp	/^void coreDumpPrints() {$/;"	f	namespace:tigerso
create_process_shared_memory	SysUtil.cpp	/^void* SysUtil::create_process_shared_memory(const string& shm_name, size_t len, bool clear)$/;"	f	class:tigerso::SysUtil
cur_	File.h	/^    off_t cur_;$/;"	m	class:tigerso::File
daemonInit	DaemonBase.cpp	/^int DaemonBase::daemonInit() {$/;"	f	class:tigerso::DaemonBase
daemon_role_s	DaemonBase.cpp	/^typedef enum daemon_role_s {$/;"	g	namespace:tigerso	file:
daemonlize	DaemonBase.cpp	/^void DaemonBase::daemonlize() {$/;"	f	class:tigerso::DaemonBase
dbgLog	Logging.cpp	/^int Logging::dbgLog(const char* fmt, ...)$/;"	f	class:tigerso::Logging
dec2hex	Dechex.cpp	/^const char* dec2hex(unsigned int num) {$/;"	f	namespace:tigerso
decideLineType	ConfigParser.cpp	/^int ConfigParser::decideLineType(const std::string& line, std::string& content)$/;"	f	class:tigerso::ConfigParser
destory	DaemonBase.cpp	/^int DaemonBase::destory() {$/;"	f	class:tigerso::DaemonBase
destroy	FileLock.cpp	/^int FileLock::destroy() {$/;"	f	class:tigerso::FileLock
destroy	SysUtil.cpp	/^int SharedMemory::destroy() {$/;"	f	class:tigerso::SharedMemory
destroy	SysUtil.cpp	/^int ShmMutex::destroy()$/;"	f	class:tigerso::ShmMutex
destroy_process_shared_memory	SysUtil.cpp	/^int SysUtil::destroy_process_shared_memory(const string& shm_name, void* ptr, size_t len)$/;"	f	class:tigerso::SysUtil
endFmt	Logging.h	/^	const std::string endFmt;$/;"	m	class:tigerso::Logging
exist	File.cpp	/^bool File::exist(const std::string& filename) { return TEST_FILEACCESS(filename.c_str(), F_OK); }$/;"	f	class:tigerso::File
fd_	File.h	/^    int fd_;$/;"	m	class:tigerso::File
fd_	FileLock.h	/^    int fd_;$/;"	m	class:tigerso::FileLock
filename	ConfigParser.h	/^	std::string filename;$/;"	m	class:tigerso::ConfigParser
filename_	File.h	/^    char filename_[FILE_NAME_MAX_LENGTH] = {0};$/;"	m	class:tigerso::File
filename_	FileLock.h	/^    std::string filename_;$/;"	m	class:tigerso::FileLock
getAllKey	ConfigParser.cpp	/^void ConfigParser::getAllKey()$/;"	f	class:tigerso::ConfigParser
getFileSize	File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:tigerso::File
getFilename	File.h	/^    const char* getFilename() const { return (strlen(filename_) > 0? filename_ : NULL); }$/;"	f	class:tigerso::File
getFormatTime	SysUtil.cpp	/^string SysUtil::getFormatTime(const string& fmt){$/;"	f	class:tigerso::SysUtil
getInstance	BaseClass.h	/^    static T* getInstance() {$/;"	f	class:tigerso::Singleton
getInstance	ConfigParser.cpp	/^ConfigParser* ConfigParser::getInstance()$/;"	f	class:tigerso::ConfigParser
getInstance	Logging.cpp	/^Logging* Logging::getInstance()$/;"	f	class:tigerso::Logging
getLogFile	Logging.cpp	/^std::string Logging::getLogFile() const$/;"	f	class:tigerso::Logging
getTime	Logging.cpp	/^std::string Logging::getTime()$/;"	f	class:tigerso::Logging
getValueByKey	ConfigParser.cpp	/^std::string ConfigParser::getValueByKey(const std::string& section, const std::string& key)$/;"	f	class:tigerso::ConfigParser
get_shm_mutex	SysUtil.cpp	/^shm_mutex_t* ShmMutex::get_shm_mutex() const$/;"	f	class:tigerso::ShmMutex
get_shm_name	SysUtil.cpp	/^string ShmMutex::get_shm_name() const$/;"	f	class:tigerso::ShmMutex
get_shm_ptr	SysUtil.cpp	/^void* SharedMemory::get_shm_ptr() const {$/;"	f	class:tigerso::SharedMemory
get_work_path	SysUtil.cpp	/^string SysUtil::get_work_path()$/;"	f	class:tigerso::SysUtil
handle	DaemonBase.cpp	/^    void(*handle)(int);$/;"	m	struct:tigerso::SignalHandleSet	file:
hash	Hash.cpp	/^HashKey hash(const char* keyname, const HashSize& hashsize) {$/;"	f	namespace:tigerso::Hash
hex2dec	Dechex.cpp	/^unsigned int hex2dec(const char* hex) {$/;"	f	namespace:tigerso
hexstrbuf	Dechex.cpp	/^static char hexstrbuf[9] = {0};$/;"	m	namespace:tigerso	file:
infoLog	Logging.cpp	/^int Logging::infoLog(const char* fmt, ...)$/;"	f	class:tigerso::Logging
init	FileLock.cpp	/^int FileLock::init() {$/;"	f	class:tigerso::FileLock
init	SysUtil.cpp	/^int SharedMemory::init() {$/;"	f	class:tigerso::SharedMemory
init	SysUtil.cpp	/^int ShmMutex::init()$/;"	f	class:tigerso::ShmMutex
initilize	DaemonBase.cpp	/^int DaemonBase::initilize() {$/;"	f	class:tigerso::DaemonBase
isFileExisted	ConfigParser.h	/^	bool isFileExisted;$/;"	m	class:tigerso::ConfigParser
isLocked	SysUtil.h	/^    bool isLocked() const {$/;"	f	class:tigerso::LockTryGuard
isLocked	SysUtil.h	/^    bool isLocked() { return locked_ ; }$/;"	f	class:tigerso::ShmMutex
isProcessNeedReload	DaemonBase.cpp	/^bool DaemonBase::isProcessNeedReload() { return __reload; }$/;"	f	class:tigerso::DaemonBase
isProcessNeedStop	DaemonBase.cpp	/^bool DaemonBase::isProcessNeedStop() { return __child_loop; }$/;"	f	class:tigerso::DaemonBase
isReadDone	File.h	/^    bool isReadDone() { return readdone_; }$/;"	f	class:tigerso::File
isRefreshed	ConfigParser.h	/^	bool isRefreshed;$/;"	m	class:tigerso::ConfigParser
killAllChildren	DaemonBase.cpp	/^int DaemonBase::killAllChildren() {$/;"	f	class:tigerso::DaemonBase
level	Logging.h	/^	int level;$/;"	m	class:tigerso::Logging
loadConfig2Map	ConfigParser.cpp	/^int ConfigParser::loadConfig2Map()$/;"	f	class:tigerso::ConfigParser
loadConfigParams	DaemonBase.cpp	/^int DaemonBase::loadConfigParams() {$/;"	f	class:tigerso::DaemonBase
lock	FileLock.cpp	/^int FileLock::lock() {$/;"	f	class:tigerso::FileLock
lock	SysUtil.cpp	/^int ShmMutex::lock()$/;"	f	class:tigerso::ShmMutex
lock_cmd	FileLock.cpp	/^int FileLock::lock_cmd(int cmd) {$/;"	f	class:tigerso::FileLock
locked	SysUtil.h	/^    bool locked;$/;"	m	class:tigerso::LockTryGuard
locked_	FileLock.h	/^    bool locked_ = false;$/;"	m	class:tigerso::FileLock
locked_	SysUtil.h	/^    bool locked_ = false;$/;"	m	class:tigerso::ShmMutex
locked_pid	SysUtil.h	/^    pid_t locked_pid;$/;"	m	class:tigerso::ShmMutex
logFile	Logging.h	/^	std::string logFile;$/;"	m	class:tigerso::Logging
logPath	Logging.h	/^	std::string logPath;$/;"	m	class:tigerso::Logging
make_dirtree	SysUtil.cpp	/^int SysUtil::make_dirtree(const string& dirname)$/;"	f	class:tigerso::SysUtil
mutex	SysUtil.h	/^    pthread_mutex_t mutex;$/;"	m	struct:tigerso::shm_mutex_t
mutex_ptr	SysUtil.h	/^    shm_mutex_t* mutex_ptr;$/;"	m	class:tigerso::ShmMutex
mutexattr	SysUtil.h	/^    pthread_mutexattr_t mutexattr;$/;"	m	struct:tigerso::shm_mutex_t
nocopyable	BaseClass.h	/^    nocopyable(){}$/;"	f	class:tigerso::nocopyable
nocopyable	BaseClass.h	/^class nocopyable {$/;"	c	namespace:tigerso
nonBlocking	tigerso.h	58;"	d
opensslInit_	DaemonBase.h	/^    OpensslInitializer opensslInit_;$/;"	m	class:tigerso::DaemonBase
operator =	SysUtil.cpp	/^ShmMutex ShmMutex::operator=(const ShmMutex& mutex)$/;"	f	class:tigerso::ShmMutex
pInstance	BaseClass.h	/^    static singleton* pInstance; $/;"	m	class:tigerso::singleton
pInstance	ConfigParser.cpp	/^std::unique_ptr<ConfigParser> ConfigParser::pInstance;$/;"	m	class:tigerso::ConfigParser	file:
pInstance	ConfigParser.h	/^	static std::unique_ptr<ConfigParser> pInstance;$/;"	m	class:tigerso::ConfigParser
pInstance	Logging.cpp	/^std::unique_ptr<Logging> Logging::pInstance;$/;"	m	class:tigerso::Logging	file:
pInstance	Logging.h	/^	static std::unique_ptr<Logging> pInstance;$/;"	m	class:tigerso::Logging
pInstance_	BaseClass.h	/^    static std::unique_ptr<T> pInstance_;$/;"	m	class:tigerso::Singleton
pInstance_	BaseClass.h	/^std::unique_ptr<T> Singleton<T>::pInstance_;$/;"	m	class:tigerso::Singleton
parentPid_	DaemonBase.h	/^    pid_t parentPid_;$/;"	m	class:tigerso::DaemonBase
parentStart	DaemonBase.cpp	/^int DaemonBase::parentStart() {$/;"	f	class:tigerso::DaemonBase
pidFilename_	DaemonBase.h	/^    std::string pidFilename_ = "daemon-base";$/;"	m	class:tigerso::DaemonBase
processInit	DaemonBase.cpp	/^int DaemonBase::processInit() {$/;"	f	class:tigerso::DaemonBase
processStart	DaemonBase.cpp	/^int DaemonBase::processStart() {$/;"	f	class:tigerso::DaemonBase
processStop	DaemonBase.cpp	/^int DaemonBase::processStop() {$/;"	f	class:tigerso::DaemonBase
readOut	File.cpp	/^ssize_t File::readOut(char* buf, size_t len, off_t& offset) {$/;"	f	class:tigerso::File
read_lock	FileLock.cpp	/^int FileLock::read_lock() {$/;"	f	class:tigerso::FileLock
readable	File.cpp	/^bool File::readable(const std::string& filename) { return TEST_FILEACCESS(filename.c_str(), R_OK); }$/;"	f	class:tigerso::File
readdone_	File.h	/^    bool readdone_ = false;$/;"	m	class:tigerso::File
refer_num	SysUtil.h	/^    int refer_num;$/;"	m	struct:tigerso::shm_mutex_t
refresh	DaemonBase.cpp	/^int DaemonBase::refresh() {$/;"	f	class:tigerso::DaemonBase
reload	ConfigParser.cpp	/^int ConfigParser::reload() {$/;"	f	class:tigerso::ConfigParser
remove_file	SysUtil.cpp	/^int SysUtil::remove_file(const string& file)$/;"	f	class:tigerso::SysUtil
reset	File.h	/^    inline void reset() { this->close(); size_ = 0; cur_ = 0; readdone_= false; }$/;"	f	class:tigerso::File
send2Socket	File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:tigerso::File
send2Socket	File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn, off_t& offset, size_t count) {$/;"	f	class:tigerso::File
setBlockingIO	File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:tigerso::File
setConfigPath	ConfigParser.cpp	/^void ConfigParser::setConfigPath(const std::string& file)$/;"	f	class:tigerso::ConfigParser
setFilename	File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:tigerso::File
setLevel	Logging.cpp	/^int Logging::setLevel(const std::string& le)$/;"	f	class:tigerso::Logging
setLogFile	Logging.cpp	/^int Logging::setLogFile(const std::string& file)$/;"	f	class:tigerso::Logging
setLogPath	Logging.cpp	/^int Logging::setLogPath(const std::string& path)$/;"	f	class:tigerso::Logging
set_signal_handler	SysUtil.cpp	/^signal_func* SysUtil::set_signal_handler(int signo, signal_func* func) {$/;"	f	class:tigerso::SysUtil
setupInterestedSignal	DaemonBase.cpp	/^int DaemonBase::setupInterestedSignal() {$/;"	f	class:tigerso::DaemonBase
shm_len	SysUtil.h	/^    size_t shm_len;$/;"	m	class:tigerso::SharedMemory
shm_mutex_t	SysUtil.h	/^struct shm_mutex_t {$/;"	s	namespace:tigerso
shm_name	SysUtil.h	/^    char shm_name[1024];$/;"	m	struct:tigerso::shm_mutex_t
shm_name	SysUtil.h	/^    string shm_name;$/;"	m	class:tigerso::SharedMemory
shm_name	SysUtil.h	/^    string shm_name;$/;"	m	class:tigerso::ShmMutex
shm_pid	SysUtil.h	/^    pid_t shm_pid;$/;"	m	class:tigerso::SharedMemory
shm_pid	SysUtil.h	/^    pid_t shm_pid;$/;"	m	class:tigerso::ShmMutex
shm_prot	SysUtil.h	/^    int shm_prot;$/;"	m	class:tigerso::SharedMemory
shm_ptr	SysUtil.h	/^    void* shm_ptr;$/;"	m	class:tigerso::SharedMemory
signal_func	SysUtil.h	/^typedef void (signal_func)(int);$/;"	t	namespace:tigerso
signo	DaemonBase.cpp	/^    int signo;$/;"	m	struct:tigerso::SignalHandleSet	file:
singleton	BaseClass.h	/^class singleton {$/;"	c	namespace:tigerso
size	File.cpp	/^int  File::size(const std::string& filename) {$/;"	f	class:tigerso::File
size_	File.h	/^    off_t size_;$/;"	m	class:tigerso::File
socketMaxNum_	DaemonBase.h	/^    int socketMaxNum_ = 1024;$/;"	m	class:tigerso::DaemonBase
start	DaemonBase.cpp	/^int DaemonBase::start() {$/;"	f	class:tigerso::DaemonBase
stop	DaemonBase.cpp	/^int DaemonBase::stop() {$/;"	f	class:tigerso::DaemonBase
testExist	File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:tigerso::File
testRead	File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:tigerso::File
testWrite	File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:tigerso::File
tigerso	BaseClass.h	/^namespace tigerso {$/;"	n
tigerso	ConfigParser.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	ConfigParser.h	/^namespace tigerso {$/;"	n
tigerso	DaemonBase.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	DaemonBase.h	/^namespace tigerso {$/;"	n
tigerso	Dechex.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	Dechex.h	/^namespace tigerso {$/;"	n
tigerso	File.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	File.h	/^namespace tigerso {$/;"	n
tigerso	FileLock.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	FileLock.h	/^namespace tigerso {$/;"	n
tigerso	Hash.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	Hash.h	/^namespace tigerso {$/;"	n
tigerso	Logging.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	Logging.h	/^namespace tigerso {$/;"	n
tigerso	SysUtil.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	SysUtil.h	/^namespace tigerso {$/;"	n
tigerso	tigerso.h	/^namespace tigerso {$/;"	n
toLower	SysUtil.h	/^    void toLower(std::string& src, std::string& dst) { std::transform(src.begin(), src.end(), dst.begin(), ::tolower); }$/;"	f	class:tigerso::SysUtil
toUpper	SysUtil.h	/^    void toUpper(std::string& src, std::string& dst) { std::transform(src.begin(), src.end(), dst.begin(), ::toupper); }$/;"	f	class:tigerso::SysUtil
try_lock	FileLock.cpp	/^int FileLock::try_lock() {$/;"	f	class:tigerso::FileLock
try_lock	SysUtil.cpp	/^int ShmMutex::try_lock()$/;"	f	class:tigerso::ShmMutex
unlink	File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:tigerso::File
unlinkPidFile	DaemonBase.cpp	/^int DaemonBase::unlinkPidFile() {$/;"	f	class:tigerso::DaemonBase
unlock	FileLock.cpp	/^int FileLock::unlock() {$/;"	f	class:tigerso::FileLock
unlock	SysUtil.cpp	/^int ShmMutex::unlock()$/;"	f	class:tigerso::ShmMutex
validFd	tigerso.h	60;"	d
validate_filename	SysUtil.cpp	/^bool SysUtil::validate_filename(const string& filename)$/;"	f	class:tigerso::SysUtil
writeIn	File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:tigerso::File
writePidFile	DaemonBase.cpp	/^int DaemonBase::writePidFile() {$/;"	f	class:tigerso::DaemonBase
writeable	File.cpp	/^bool File::writeable(const std::string& filename) { return TEST_FILEACCESS(filename.c_str(), W_OK); }$/;"	f	class:tigerso::File
~ConfigParser	ConfigParser.h	/^    ~ConfigParser() {}$/;"	f	class:tigerso::ConfigParser
~DaemonBase	DaemonBase.cpp	/^DaemonBase::~DaemonBase() {$/;"	f	class:tigerso::DaemonBase
~File	File.cpp	/^File::~File() {$/;"	f	class:tigerso::File
~FileLock	FileLock.cpp	/^FileLock::~FileLock() {$/;"	f	class:tigerso::FileLock
~LockGuard	SysUtil.h	/^    ~LockGuard() {$/;"	f	class:tigerso::LockGuard
~LockTryGuard	SysUtil.h	/^    ~LockTryGuard() {$/;"	f	class:tigerso::LockTryGuard
~Logging	Logging.h	/^    ~Logging() {}$/;"	f	class:tigerso::Logging
~SharedMemory	SysUtil.h	/^    ~SharedMemory() {$/;"	f	class:tigerso::SharedMemory
~ShmMutex	SysUtil.cpp	/^ShmMutex::~ShmMutex()$/;"	f	class:tigerso::ShmMutex
~Singleton	BaseClass.h	/^    virtual ~Singleton() {}$/;"	f	class:tigerso::Singleton
~nocopyable	BaseClass.h	/^    virtual ~nocopyable(){}$/;"	f	class:tigerso::nocopyable
~singleton	BaseClass.h	/^    virtual ~singleton(){ if ( pInstance != nullptr) { delete pInstance; } };$/;"	f	class:tigerso::singleton
