!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CACHE_FILE_NAME	DNSCache.h	13;"	d
DNSAnswer	DNSResolver.h	/^struct DNSAnswer {$/;"	s
DNSCache	DNSCache.cpp	/^DNSCache::DNSCache():$/;"	f	class:tigerso::net::DNSCache
DNSCache	DNSCache.h	/^class DNSCache {$/;"	c	namespace:tigerso::net
DNSCacheData	DNSCache.h	/^struct DNSCacheData {$/;"	s	namespace:tigerso::net
DNSCachePtr	DNSCache.h	/^DNSCache* DNSCachePtr = DNSCache::getInstance();$/;"	m	namespace:tigerso::net
DNSCachePtr	DNSCache.h	/^DNSCache* DNSCachePtr;$/;"	m	namespace:tigerso::net
DNSHeader	DNSResolver.h	/^struct DNSHeader {$/;"	s
DNSNode	DNSCache.h	/^    explicit DNSNode() {}$/;"	f	struct:tigerso::net::DNSNode
DNSNode	DNSCache.h	/^struct DNSNode {$/;"	s	namespace:tigerso::net
DNSQuery	DNSResolver.h	/^struct DNSQuery {$/;"	s
DNSResolver	DNSResolver.h	/^    DNSResolver() {}$/;"	f	class:DNSResolver
DNSResolver	DNSResolver.h	/^class DNSResolver {$/;"	c
DNS_CLASS_INTERNET	DNSResolver.h	35;"	d
DNS_ERR	DNSResolver.h	38;"	d
DNS_OK	DNSResolver.h	37;"	d
DNS_SERVER_ADDR	DNSResolver.h	41;"	d
DNS_SERVER_PORT	DNSResolver.h	42;"	d
DNS_STANDARD_ANSWER_FLAGS	DNSResolver.h	19;"	d
DNS_STANDARD_QUERY_FLAGS	DNSResolver.h	18;"	d
DNS_TYPE_A	DNSResolver.h	22;"	d
DNS_TYPE_AAAA	DNSResolver.h	30;"	d
DNS_TYPE_ANY	DNSResolver.h	32;"	d
DNS_TYPE_AXFR	DNSResolver.h	31;"	d
DNS_TYPE_CNAME	DNSResolver.h	24;"	d
DNS_TYPE_HINFO	DNSResolver.h	28;"	d
DNS_TYPE_MX	DNSResolver.h	29;"	d
DNS_TYPE_NS	DNSResolver.h	23;"	d
DNS_TYPE_PTR	DNSResolver.h	27;"	d
DNS_TYPE_SOA	DNSResolver.h	25;"	d
DNS_TYPE_WKS	DNSResolver.h	26;"	d
HASH_NODENUM	DNSCache.h	16;"	d
ID_	DNSResolver.h	/^    unsigned short ID_ = 0x00;$/;"	m	class:DNSResolver
IPV4_ADDRSIZE	DNSCache.h	15;"	d
IPV4_ADDRSIZE	DNSResolver.h	39;"	d
MD5_KEYSIZE	DNSCache.h	14;"	d
TS_NET_DNSCACHE_H_	DNSCache.h	2;"	d
additions	DNSResolver.h	/^    unsigned short additions;$/;"	m	struct:DNSHeader
addr_	DNSCache.h	/^    char addr_[IPV4_ADDRSIZE] = {0};$/;"	m	struct:tigerso::net::DNSNode
answer_buf_	DNSResolver.h	/^    unsigned char answer_buf_[2048] = {0};$/;"	m	class:DNSResolver
answer_name_	DNSResolver.h	/^    std::string answer_name_;$/;"	m	class:DNSResolver
answer_ttl_	DNSResolver.h	/^    time_t answer_ttl_;$/;"	m	class:DNSResolver
answers	DNSResolver.h	/^    unsigned short answers;$/;"	m	struct:DNSHeader
array	DNSCache.h	/^    DNSNode array[HASH_NODENUM];$/;"	m	struct:tigerso::net::DNSCacheData
authorities	DNSResolver.h	/^    unsigned short authorities;$/;"	m	struct:DNSHeader
cachefile_	DNSCache.cpp	/^std::string DNSCache::cachefile_ = CACHE_FILE_NAME;$/;"	m	class:tigerso::net::DNSCache	file:
cachefile_	DNSCache.h	/^    static std::string cachefile_; $/;"	m	class:tigerso::net::DNSCache
cachehitnum	DNSCache.h	/^    volatile size_t cachehitnum;$/;"	m	struct:tigerso::net::DNSCacheData
calcMd5	DNSCache.h	/^static int calcMd5(const char* buf, unsigned char* key, int keylen) {$/;"	f	namespace:tigerso::net
dhs_name	DNSResolver.h	/^    unsigned char* dhs_name;$/;"	m	struct:DNSAnswer
dns_class	DNSResolver.h	/^    unsigned short dns_class;$/;"	m	struct:DNSAnswer
dns_class	DNSResolver.h	/^    unsigned short dns_class;$/;"	m	struct:DNSQuery
dns_data	DNSResolver.h	/^    char* dns_data;$/;"	m	struct:DNSAnswer
dns_name	DNSResolver.h	/^    unsigned char* dns_name;$/;"	m	struct:DNSQuery
dns_ttl	DNSResolver.h	/^    unsigned short dns_ttl;$/;"	m	struct:DNSAnswer
dns_type	DNSResolver.h	/^    unsigned short dns_type;$/;"	m	struct:DNSAnswer
dns_type	DNSResolver.h	/^    unsigned short dns_type;$/;"	m	struct:DNSQuery
expriedAt_	DNSCache.h	/^    time_t expriedAt_ = 0;$/;"	m	struct:tigerso::net::DNSNode
flags	DNSResolver.h	/^    unsigned short flags;$/;"	m	struct:DNSHeader
getAddr	DNSCache.cpp	/^const char* DNSNode::getAddr() { return addr_; }$/;"	f	class:tigerso::net::DNSNode
getAnswer	DNSResolver.h	/^    int getAnswer(string& name, time_t& ttl) {$/;"	f	class:DNSResolver
getExpiredAtTime	DNSCache.cpp	/^time_t DNSNode::getExpiredAtTime() { return expriedAt_; }$/;"	f	class:tigerso::net::DNSNode
getInstance	DNSCache.cpp	/^DNSCache* DNSCache::getInstance() {$/;"	f	class:tigerso::net::DNSCache
getMd5Key	DNSCache.cpp	/^const unsigned char* DNSNode::getMd5Key() { return key_; }$/;"	f	class:tigerso::net::DNSNode
getShmPtr	DNSCache.cpp	/^DNSCacheData* DNSCache::getShmPtr() {$/;"	f	class:tigerso::net::DNSCache
id	DNSResolver.h	/^    unsigned short id;$/;"	m	struct:DNSHeader
key_	DNSCache.h	/^    unsigned char key_[MD5_KEYSIZE] = {0};$/;"	m	struct:tigerso::net::DNSNode
main	main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
mutex_	DNSCache.h	/^    core::ShmMutex  mutex_; \/\/process-shared mutex$/;"	m	class:tigerso::net::DNSCache
net	DNSCache.cpp	/^namespace tigerso::net {$/;"	n	class:tigerso	file:
net	DNSCache.h	/^namespace tigerso::net {$/;"	n	class:tigerso
pInstance_	DNSCache.cpp	/^DNSCache* DNSCache::pInstance_ = nullptr;$/;"	m	class:tigerso::net::DNSCache	file:
pInstance_	DNSCache.h	/^    static DNSCache* pInstance_;$/;"	m	class:tigerso::net::DNSCache
packDNSQuery	DNSResolver.h	/^    int packDNSQuery(const char* query_name, size_t len) {$/;"	f	class:DNSResolver
queryDNS	DNSResolver.h	/^    std::string queryDNS(std::string& name) {$/;"	f	class:DNSResolver
query_buf_	DNSResolver.h	/^    unsigned char query_buf_ [1024] = {0};$/;"	m	class:DNSResolver
query_name_	DNSResolver.h	/^    std::string query_name_;$/;"	m	class:DNSResolver
questions	DNSResolver.h	/^    unsigned short questions;$/;"	m	struct:DNSHeader
recvAnswer	DNSResolver.h	/^    int recvAnswer() {$/;"	f	class:DNSResolver
resvDNSAnswer	DNSResolver.h	/^    int resvDNSAnswer() {$/;"	f	class:DNSResolver
sendQuery	DNSResolver.h	/^    int sendQuery() {$/;"	f	class:DNSResolver
server_addr_	DNSResolver.h	/^    sockaddr_in server_addr_;$/;"	m	class:DNSResolver
setAddr	DNSCache.cpp	/^int DNSNode::setAddr(const char* addr, size_t len) {$/;"	f	class:tigerso::net::DNSNode
setExpiredAtTime	DNSCache.cpp	/^int DNSNode::setExpiredAtTime(time_t tm) {$/;"	f	class:tigerso::net::DNSNode
setMd5Key	DNSCache.cpp	/^int DNSNode::setMd5Key(const char* key, size_t keylen) {$/;"	f	class:tigerso::net::DNSNode
shm_	DNSCache.h	/^    core::SharedMemory shm_;$/;"	m	class:tigerso::net::DNSCache
socket_t	DNSResolver.h	/^typedef int socket_t;$/;"	t
sockfd_	DNSResolver.h	/^    socket_t sockfd_ = -1;$/;"	m	class:DNSResolver
~DNSCache	DNSCache.cpp	/^DNSCache::~DNSCache() {$/;"	f	class:tigerso::net::DNSCache
