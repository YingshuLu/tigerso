!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLDIRS	test/Makefile	/^ALLDIRS := $(shell ls -R $(WORKPATH) | grep '^\\\/.*$$' | grep -v "test" | awk '{gsub(":","");print}')$/;"	m
ALLLOG	core/Logging.h	/^	ALLLOG = 3$/;"	e	enum:tigerso::LOGLEVEL
ARRAY_SIZE	http/lib/http_parser.c	41;"	d	file:
Accept	net/SocketUtil.cpp	/^int SocketUtil::Accept(Socket& listen_mcsock, Socket& accept_mcsock) {$/;"	f	class:tigerso::SocketUtil
Acceptor	net/Acceptor.cpp	/^Acceptor::Acceptor(const std::string& ipaddr, const int& port, const ConnectionType& type)$/;"	f	class:tigerso::Acceptor
Acceptor	net/Acceptor.h	/^class Acceptor: public std::enable_shared_from_this<Acceptor> {$/;"	c	namespace:tigerso
Acceptor	test/Acceptor.cpp	/^Acceptor::Acceptor(const std::string& ipaddr, const int& port, const ConnectionType& type)$/;"	f	class:tigerso::Acceptor
Acceptor	test/Acceptor.h	/^class Acceptor: public nocopyable {$/;"	c	namespace:tigerso
AsyncDNSResolver	test/backup/test_ares.cpp	/^class AsyncDNSResolver {$/;"	c	file:
BAD_REQUEST	http/HttpResponse.cpp	/^const std::string HttpResponse::BAD_REQUEST = "HTTP\/1.1 400 Bad Request\\r\\nserver: tigerso\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::HttpResponse	file:
BAD_REQUEST	http/HttpResponse.h	/^    static const std::string BAD_REQUEST; $/;"	m	class:tigerso::HttpResponse
BIND_EVENTHANDLE	http/HttpConnection.cpp	9;"	d	file:
BIND_EVENTHANDLE	http/HttpProxy.h	33;"	d
BIND_EVENTHANDLE	http/HttpProxyConnection.cpp	8;"	d	file:
BIND_EVENTHANDLE	test/backup/http_proxy.cpp	42;"	d	file:
BITS_COMPARE	dns/DNSResolver.h	55;"	d
BIT_AT	http/lib/http_parser.c	45;"	d	file:
BUFFER_GAP_LENGTH	net/Buffer.h	29;"	d
BUFFER_LEAST_LENGTH	net/Buffer.h	28;"	d
BUILDDIR	test/Makefile	/^BUILDDIR := $(OUTPUT)\/Build\/objs$/;"	m
Base64decode	http/lib/base64.c	/^int Base64decode(char *bufplain, const char *bufcoded)$/;"	f
Base64decode_len	http/lib/base64.c	/^int Base64decode_len(const char *bufcoded)$/;"	f
Base64encode	http/lib/base64.c	/^int Base64encode(char *encoded, const char *string, int len)$/;"	f
Base64encode_len	http/lib/base64.c	/^int Base64encode_len(int len)$/;"	f
Bind	net/SocketUtil.cpp	/^int SocketUtil::Bind(Socket& mcsock, const std::string& s_addr, const std::string& port, const int family) {$/;"	f	class:tigerso::SocketUtil
Buffer	net/Buffer.cpp	/^Buffer:: Buffer(const size_t size)$/;"	f	class:tigerso::Buffer
Buffer	net/Buffer.h	/^class Buffer: public nocopyable {$/;"	c	namespace:tigerso
BufferPtr	net/Socket.h	/^    BufferPtr(std::shared_ptr<Buffer>& buffer)$/;"	f	struct:tigerso::BufferPtr
BufferPtr	net/Socket.h	/^    BufferPtr(std::shared_ptr<Buffer>& bufferIn, std::shared_ptr<Buffer>& bufferOut)$/;"	f	struct:tigerso::BufferPtr
BufferPtr	net/Socket.h	/^struct BufferPtr {$/;"	s	namespace:tigerso
CACHE_FILE_NAME	dns/DNSCache.h	16;"	d
CALLBACK_DATA	http/lib/http_parser.c	128;"	d	file:
CALLBACK_DATA_	http/lib/http_parser.c	105;"	d	file:
CALLBACK_DATA_NOADVANCE	http/lib/http_parser.c	132;"	d	file:
CALLBACK_NOTIFY	http/lib/http_parser.c	99;"	d	file:
CALLBACK_NOTIFY_	http/lib/http_parser.c	80;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	http/lib/http_parser.c	102;"	d	file:
CC	test/Makefile	/^CC := g++$/;"	m
CHUNKED	http/lib/http_parser.c	169;"	d	file:
CLIENT_CLOSE	http/HttpProxyConnection.h	/^    CLIENT_CLOSE,$/;"	e	enum:tigerso::__anon5
CLIENT_CLOSE_DONE	http/HttpProxyConnection.h	/^    CLIENT_CLOSE_DONE,$/;"	e	enum:tigerso::__anon5
CLIENT_HANDSHAKE	http/HttpProxyConnection.h	/^    CLIENT_HANDSHAKE,$/;"	e	enum:tigerso::__anon5
CLIENT_HANDSHAKE_DONE	http/HttpProxyConnection.h	/^    CLIENT_HANDSHAKE_DONE,$/;"	e	enum:tigerso::__anon5
CLIENT_RECV_REQUEST	http/HttpProxyConnection.h	/^    CLIENT_RECV_REQUEST,$/;"	e	enum:tigerso::__anon5
CLIENT_RECV_REQUEST_DONE	http/HttpProxyConnection.h	/^    CLIENT_RECV_REQUEST_DONE,$/;"	e	enum:tigerso::__anon5
CLIENT_SEND_RESPONSE	http/HttpProxyConnection.h	/^    CLIENT_SEND_RESPONSE,$/;"	e	enum:tigerso::__anon5
CLIENT_SEND_RESPONSE_DONE	http/HttpProxyConnection.h	/^    CLIENT_SEND_RESPONSE_DONE,$/;"	e	enum:tigerso::__anon5
CLOSE	http/lib/http_parser.c	171;"	d	file:
COMMENT	core/ConfigParser.h	27;"	d
COMTB	core/ConfigParser.h	17;"	d
CONFIGFILE	core/tigerso.h	/^const std::string  CONFIGFILE  =  CONFIGPATH + "\/" + PROJECT  +".ini";$/;"	m	namespace:tigerso::core
CONFIGPATH	core/tigerso.h	/^const std::string  CONFIGPATH  =  WORKPATH + "\/etc";$/;"	m	namespace:tigerso::core
CONNECTION	http/lib/http_parser.c	165;"	d	file:
CONNECTION_LIMIT	test/Acceptor.cpp	/^int Acceptor::CONNECTION_LIMIT = 1024;$/;"	m	class:tigerso::Acceptor	file:
CONNECTION_LIMIT	test/TCPServerLoop.h	/^    static int CONNECTION_LIMIT;$/;"	v
CONTENT_LENGTH	http/lib/http_parser.c	166;"	d	file:
COUNT_HEADER_SIZE	http/lib/http_parser.c	154;"	d	file:
CPPFLAGS	test/Makefile	/^CPPFLAGS := -fPIC -shared$/;"	m
CR	http/lib/http_parser.c	410;"	d	file:
CURRENT_STATE	http/lib/http_parser.c	59;"	d	file:
Channel	net/Channel.h	/^    Channel(EventsLoop& loop, Socket& sock)$/;"	f	class:tigerso::Channel
Channel	net/Channel.h	/^class Channel: public nocopyable {$/;"	c	namespace:tigerso
ChannelSet	net/TimeWheelEvent.h	/^    std::unordered_set<Channel*> ChannelSet;$/;"	m	struct:tigerso::TimeWheelEvent::_TimeNode_st
ChannelSet	test/backup/TimedEvent.h	/^    std::set<Channel*> ChannelSet;$/;"	m	struct:TimeNode
ChunkState	http/HttpBodyFile.h	/^} ChunkState;$/;"	t	class:tigerso::HttpBodyFile	typeref:enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
ChunkState	test/HttpFile/HttpBodyFile.h	/^    } ChunkState;$/;"	t	class:HttpBodyFile	typeref:enum:HttpBodyFile::_chunk_send_state
Close	net/SocketUtil.cpp	/^int SocketUtil::Close(Socket& mcsock) {$/;"	f	class:tigerso::SocketUtil
Condition	core/Condition.h	/^    Condition(ThreadMutex& mutex)$/;"	f	class:tigerso::Condition
Condition	core/Condition.h	/^class Condition: public nocopyable {$/;"	c	namespace:tigerso
ConfigParser	core/ConfigParser.h	/^	ConfigParser() :isFileExisted(false), isRefreshed(false){}$/;"	f	class:tigerso::ConfigParser
ConfigParser	core/ConfigParser.h	/^class ConfigParser$/;"	c	namespace:tigerso
Connect	net/SocketUtil.cpp	/^int SocketUtil::Connect(Socket& mcsock, const std::string& s_addr, const std::string& port, const int type){$/;"	f	class:tigerso::SocketUtil
Connection	net/Connection.cpp	/^Connection::Connection(std::shared_ptr<Acceptor> acptptr, const IDType id): acptptr_ (acptptr), id_(id) {$/;"	f	class:tigerso::Connection
Connection	net/Connection.h	/^class Connection: public nocopyable {$/;"	c	namespace:tigerso
Connection	test/Connection.cpp	/^Connection::Connection(std::shared_ptr<ConnectionFactory>& connfactptr, const unsigned int id) {$/;"	f	class:tigerso::Connection
Connection	test/Connection.h	/^class Connection: public nocopyable {$/;"	c	namespace:tigerso
Connection	test/TCPServerLoop.h	/^    Connection(ConnectionFactory* cf, const unsigned int id): id_(id), connfactptr_(cf) {}$/;"	f	class:tigerso::Connection
Connection	test/TCPServerLoop.h	/^class Connection {$/;"	c	namespace:tigerso
ConnectionFactory	net/ConnectionFactory.cpp	/^ConnectionFactory::ConnectionFactory() {$/;"	f	class:tigerso::ConnectionFactory
ConnectionFactory	net/ConnectionFactory.cpp	/^ConnectionFactory::ConnectionFactory(std::shared_ptr<EventsLoop>& eloop): epollptr_(eloop) {}$/;"	f	class:tigerso::ConnectionFactory
ConnectionFactory	net/ConnectionFactory.h	/^class ConnectionFactory: public std::enable_shared_from_this<ConnectionFactory> {$/;"	c	namespace:tigerso
ConnectionFactory	test/ConnectionFactory.cpp	/^ConnectionFactory::ConnectionFactory(std::shared_ptr<EventsLoop>& eloop): epollptr_(eloop) {}$/;"	f	class:tigerso::ConnectionFactory
ConnectionFactory	test/ConnectionFactory.h	/^class ConnectionFactory: public nocopyable {$/;"	c	namespace:tigerso
ConnectionFactory	test/TCPServerLoop.h	/^    ConnectionFactory(EventsLoopPtr& eloop, const ConnectionType type): eloop_(eloop), type_(type) {}$/;"	f	class:tigerso::ConnectionFactory
ConnectionFactory	test/TCPServerLoop.h	/^class ConnectionFactory {$/;"	c	namespace:tigerso
ConnectionFactoryPtr	test/TCPServerLoop.h	/^typedef std::unique_ptr<ConnectionFactory> ConnectionFactoryPtr;$/;"	t	namespace:tigerso
ConnectionPtr	test/TCPServerLoop.h	/^typedef std::shared_ptr<Connection> ConnectionPtr;$/;"	t	namespace:tigerso
ConnectionType	net/Connection.h	/^typedef unsigned int ConnectionType;$/;"	t	namespace:tigerso
ConnectionType	test/TCPServerLoop.h	/^} ConnectionType;$/;"	t	namespace:tigerso	typeref:enum:tigerso::__anon10
CreateListenSocket	net/SocketUtil.cpp	/^int SocketUtil::CreateListenSocket($/;"	f	class:tigerso::SocketUtil
CreateUDPConnect	net/SocketUtil.cpp	/^int SocketUtil::CreateUDPConnect($/;"	f	class:tigerso::SocketUtil
CurrentThread	core/CurrentThread.h	/^namespace CurrentThread {$/;"	n	namespace:tigerso
CurrentThread	core/Thread.cpp	/^namespace CurrentThread {$/;"	n	namespace:tigerso	file:
DAEMON_CHILD	core/DaemonBase.cpp	/^    DAEMON_CHILD$/;"	e	enum:tigerso::daemon_role_s	file:
DAEMON_CHILD	test/DaemonBase.cpp	/^    DAEMON_CHILD$/;"	e	enum:tigerso::daemon_role_s	file:
DAEMON_PARENT	core/DaemonBase.cpp	/^    DAEMON_PARENT,$/;"	e	enum:tigerso::daemon_role_s	file:
DAEMON_PARENT	test/DaemonBase.cpp	/^    DAEMON_PARENT,$/;"	e	enum:tigerso::daemon_role_s	file:
DBG_LOG	core/Logging.h	25;"	d
DBG_LOG	test/HttpFile/sendcontent.cc	20;"	d	file:
DBG_LOG	test/HttpFile/sendcontent.cc	22;"	d	file:
DBG_LOG	test/HttpFile/sendfile.cc	20;"	d	file:
DBG_LOG	test/HttpFile/sendfile.cc	22;"	d	file:
DBG_LOG	test/backup/http_proxy.cpp	29;"	d	file:
DBG_LOG	test/sendfile/sendfile.cc	20;"	d	file:
DBG_LOG	test/sendfile/sendfile.cc	22;"	d	file:
DEBUG	core/Logging.h	/^	DEBUG = 2,$/;"	e	enum:tigerso::LOGLEVEL
DECIDE_EVENTCALLBACK	net/EventsLoop.cpp	10;"	d	file:
DEFAULT_CHANNEL_NUM	net/EventsLoop.h	/^static const int DEFAULT_CHANNEL_NUM = 128;$/;"	m	namespace:tigerso
DEFAULT_SHM_MUTEX_FILENAME	core/SysUtil.h	/^const string DEFAULT_SHM_MUTEX_FILENAME = "TIGERSOSHMMUTEX";$/;"	m	namespace:tigerso
DEPY	test/Makefile	/^DEPY := http_parser$/;"	m
DNS2Shared	dns/DNSCache.cpp	/^int DNSCache::DNS2Shared(const char* host, const char* ip, int ttl) {$/;"	f	class:tigerso::DNSCache
DNSAddition	dns/DNSResolver.h	/^typedef struct DNSAnswer DNSAddition;$/;"	t	namespace:tigerso	typeref:struct:tigerso::DNSAnswer
DNSAnswer	dns/DNSResolver.h	/^struct DNSAnswer {$/;"	s	namespace:tigerso
DNSAuthority	dns/DNSResolver.h	/^typedef struct DNSAnswer DNSAuthority;$/;"	t	namespace:tigerso	typeref:struct:tigerso::DNSAnswer
DNSCache	dns/DNSCache.cpp	/^DNSCache::DNSCache():$/;"	f	class:tigerso::DNSCache
DNSCache	dns/DNSCache.h	/^class DNSCache {$/;"	c	namespace:tigerso
DNSCacheData	dns/DNSCache.h	/^struct DNSCacheData {$/;"	s	namespace:tigerso
DNSHeader	dns/DNSResolver.h	/^struct DNSHeader {$/;"	s	namespace:tigerso
DNSInstance	test/test_dns.cpp	/^DNSResolver DNSInstance;$/;"	v
DNSNode	dns/DNSCache.h	/^struct DNSNode {$/;"	s	namespace:tigerso
DNSQuery	dns/DNSResolver.h	/^struct DNSQuery {$/;"	s	namespace:tigerso
DNSResolver	dns/DNSResolver.cpp	/^DNSResolver::DNSResolver() {$/;"	f	class:tigerso::DNSResolver
DNSResolver	dns/DNSResolver.h	/^    DNSResolver(const DNSResolver&){}$/;"	f	class:tigerso::DNSResolver
DNSResolver	dns/DNSResolver.h	/^class DNSResolver {$/;"	c	namespace:tigerso
DNS_ADDITION_OPT	dns/DNSResolver.h	94;"	d
DNS_CALLBACK	dns/DNSResolver.h	/^typedef std::function<int(const char*, time_t)> DNS_CALLBACK;$/;"	t	namespace:tigerso
DNS_CLASS_INTERNET	dns/DNSResolver.h	70;"	d
DNS_DOMAIN_NAME_LIMIT	dns/DNSResolver.h	84;"	d
DNS_ERR	dns/DNSResolver.h	74;"	d
DNS_HEADER_FLAGS_AA	dns/DNSResolver.h	41;"	d
DNS_HEADER_FLAGS_AD	dns/DNSResolver.h	45;"	d
DNS_HEADER_FLAGS_OPCODE_IQUERY	dns/DNSResolver.h	39;"	d
DNS_HEADER_FLAGS_OPCODE_QUERY	dns/DNSResolver.h	38;"	d
DNS_HEADER_FLAGS_OPCODE_STATUS	dns/DNSResolver.h	40;"	d
DNS_HEADER_FLAGS_QR_QUERY	dns/DNSResolver.h	36;"	d
DNS_HEADER_FLAGS_QR_RESPONSE	dns/DNSResolver.h	37;"	d
DNS_HEADER_FLAGS_RA	dns/DNSResolver.h	44;"	d
DNS_HEADER_FLAGS_RCODE_FRMT_ERR	dns/DNSResolver.h	47;"	d
DNS_HEADER_FLAGS_RCODE_NAME_ERR	dns/DNSResolver.h	49;"	d
DNS_HEADER_FLAGS_RCODE_NONE_ERR	dns/DNSResolver.h	46;"	d
DNS_HEADER_FLAGS_RCODE_REFUSED	dns/DNSResolver.h	51;"	d
DNS_HEADER_FLAGS_RCODE_SEVR_ERR	dns/DNSResolver.h	48;"	d
DNS_HEADER_FLAGS_RCODE_SPRT_ERR	dns/DNSResolver.h	50;"	d
DNS_HEADER_FLAGS_RD	dns/DNSResolver.h	43;"	d
DNS_HEADER_FLAGS_TC	dns/DNSResolver.h	42;"	d
DNS_HEAD_EMPTY	dns/DNSResolver.h	30;"	d
DNS_ID_MISMATCH	dns/DNSResolver.h	77;"	d
DNS_INPUT_ERR	dns/DNSResolver.h	75;"	d
DNS_MESSAGE_LIMIT	dns/DNSResolver.h	83;"	d
DNS_NEED_MORE_DATA	dns/DNSResolver.h	87;"	d
DNS_NOANSWERS	dns/DNSResolver.h	78;"	d
DNS_OK	dns/DNSResolver.h	73;"	d
DNS_RECV_ERR	dns/DNSResolver.h	89;"	d
DNS_RESOLVE_ERR	dns/DNSResolver.h	76;"	d
DNS_RRNAME_OFFSETFLAG	dns/DNSResolver.h	71;"	d
DNS_RRNAME_POINTERSIZE	dns/DNSResolver.h	85;"	d
DNS_SEND_ERR	dns/DNSResolver.h	88;"	d
DNS_SERVER_ADDR	dns/DNSResolver.h	81;"	d
DNS_SERVER_ADDR	test/backup/test_ares.cpp	8;"	d	file:
DNS_SERVER_PORT	dns/DNSResolver.h	82;"	d
DNS_SERVER_PORT	test/backup/test_ares.cpp	9;"	d	file:
DNS_SOCKET_IO_COMPLETE	dns/DNSResolver.h	90;"	d
DNS_STANDARD_ANSWER_FLAGS	dns/DNSResolver.h	33;"	d
DNS_STANDARD_QUERY_FLAGS	dns/DNSResolver.h	32;"	d
DNS_TYPE_A	dns/DNSResolver.h	58;"	d
DNS_TYPE_AAAA	dns/DNSResolver.h	66;"	d
DNS_TYPE_ANY	dns/DNSResolver.h	68;"	d
DNS_TYPE_AXFR	dns/DNSResolver.h	67;"	d
DNS_TYPE_CNAME	dns/DNSResolver.h	60;"	d
DNS_TYPE_HINFO	dns/DNSResolver.h	64;"	d
DNS_TYPE_MX	dns/DNSResolver.h	65;"	d
DNS_TYPE_NS	dns/DNSResolver.h	59;"	d
DNS_TYPE_PTR	dns/DNSResolver.h	63;"	d
DNS_TYPE_SOA	dns/DNSResolver.h	61;"	d
DNS_TYPE_WKS	dns/DNSResolver.h	62;"	d
DaemonBase	core/DaemonBase.cpp	/^DaemonBase::DaemonBase(const std::string& name) {$/;"	f	class:tigerso::DaemonBase
DaemonBase	core/DaemonBase.h	/^class DaemonBase {$/;"	c	namespace:tigerso
DaemonBase	test/Daemon.h	/^class DaemonBase {$/;"	c	namespace:tigerso
DaemonBase	test/DaemonBase.cpp	/^DaemonBase::DaemonBase(const std::string& name) {$/;"	f	class:tigerso::DaemonBase
DaemonRole	core/DaemonBase.cpp	/^} DaemonRole;$/;"	t	namespace:tigerso	typeref:enum:tigerso::daemon_role_s	file:
DaemonRole	test/DaemonBase.cpp	/^} DaemonRole;$/;"	t	namespace:tigerso	typeref:enum:tigerso::daemon_role_s	file:
DaemonSignals	core/DaemonBase.cpp	/^static const SignalHandleSet DaemonSignals[] = {$/;"	m	namespace:tigerso	file:
DaemonSignals	test/DaemonBase.cpp	/^static const int DaemonSignals[] = {$/;"	m	namespace:tigerso	file:
ELEM_AT	http/lib/http_parser.c	51;"	d	file:
ERRLINE	core/ConfigParser.h	29;"	d
ERR_HANDLE	test/backup/http_proxy.cpp	25;"	d	file:
ERR_RETURN	core/Logging.h	27;"	d
EVENT_CALLBACK_BREAK	net/Channel.h	/^const int EVENT_CALLBACK_BREAK = 1;$/;"	m	namespace:tigerso
EVENT_CALLBACK_CONTINUE	net/Channel.h	/^const int EVENT_CALLBACK_CONTINUE = 0;$/;"	m	namespace:tigerso
EVENT_CALLBACK_DROPWAITED	net/Channel.h	/^const int EVENT_CALLBACK_DROPWAITED = 2;$/;"	m	namespace:tigerso
EventFunc	net/Channel.h	/^typedef std::function<int(Socket&)> EventFunc; $/;"	t	namespace:tigerso
EventHandle	net/Socket.h	/^typedef std::function<int(Socket&)> EventHandle;$/;"	t	class:tigerso::Socket
EventsLoop	net/EventsLoop.cpp	/^EventsLoop::EventsLoop(const int channels): channelNum_(channels) { createEpollBase(); }$/;"	f	class:tigerso::EventsLoop
EventsLoop	net/EventsLoop.h	/^class EventsLoop: public nocopyable {$/;"	c	namespace:tigerso
FILE_ACTION_OK	core/File.h	26;"	d
FILE_ACTION_OK	test/File.h	21;"	d
FILE_ACTION_OK	test/HttpFile/File.h	24;"	d
FILE_ACTION_OK	test/sendfile/File.h	21;"	d
FILE_ARGS_INVALID	core/File.h	31;"	d
FILE_ARGS_INVALID	test/File.h	26;"	d
FILE_ARGS_INVALID	test/HttpFile/File.h	29;"	d
FILE_ARGS_INVALID	test/sendfile/File.h	26;"	d
FILE_BIG_CONTENT	core/File.h	24;"	d
FILE_FD_INVALID	core/File.h	30;"	d
FILE_FD_INVALID	test/File.h	25;"	d
FILE_FD_INVALID	test/HttpFile/File.h	28;"	d
FILE_FD_INVALID	test/sendfile/File.h	25;"	d
FILE_NAME_MAX_LENGTH	core/File.h	25;"	d
FILE_NAME_MAX_LENGTH	test/File.h	20;"	d
FILE_NAME_MAX_LENGTH	test/HttpFile/File.h	23;"	d
FILE_NAME_MAX_LENGTH	test/sendfile/File.h	20;"	d
FILE_OPEN_ERROR	core/File.h	27;"	d
FILE_OPEN_ERROR	test/File.h	22;"	d
FILE_OPEN_ERROR	test/HttpFile/File.h	25;"	d
FILE_OPEN_ERROR	test/sendfile/File.h	22;"	d
FILE_READ_ACCESS_DENY	core/File.h	29;"	d
FILE_READ_ACCESS_DENY	test/File.h	24;"	d
FILE_READ_ACCESS_DENY	test/HttpFile/File.h	27;"	d
FILE_READ_ACCESS_DENY	test/sendfile/File.h	24;"	d
FILE_SENDFILE_DONE	core/File.h	35;"	d
FILE_SENDFILE_DONE	test/File.h	30;"	d
FILE_SENDFILE_DONE	test/HttpFile/File.h	33;"	d
FILE_SENDFILE_DONE	test/sendfile/File.h	30;"	d
FILE_SENDFILE_ERROR	core/File.h	33;"	d
FILE_SENDFILE_ERROR	test/File.h	28;"	d
FILE_SENDFILE_ERROR	test/HttpFile/File.h	31;"	d
FILE_SENDFILE_ERROR	test/sendfile/File.h	28;"	d
FILE_SENDFILE_RECALL	core/File.h	34;"	d
FILE_SENDFILE_RECALL	test/File.h	29;"	d
FILE_SENDFILE_RECALL	test/HttpFile/File.h	32;"	d
FILE_SENDFILE_RECALL	test/sendfile/File.h	29;"	d
FILE_WRITE_ACCESS_DENY	core/File.h	28;"	d
FILE_WRITE_ACCESS_DENY	test/File.h	23;"	d
FILE_WRITE_ACCESS_DENY	test/HttpFile/File.h	26;"	d
FILE_WRITE_ACCESS_DENY	test/sendfile/File.h	23;"	d
FLAGS_CONBIME	dns/DNSResolver.h	53;"	d
FLAGS_CONTAIN	dns/DNSResolver.h	54;"	d
FORBIDDEN	http/HttpResponse.cpp	/^const std::string HttpResponse::FORBIDDEN = "HTTP\/1.1 403 Forbidden\\r\\nserver: tigerso\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::HttpResponse	file:
FORBIDDEN	http/HttpResponse.h	/^    static const std::string FORBIDDEN;$/;"	m	class:tigerso::HttpResponse
FUNC	test/shared_ptr_test.cpp	/^typedef std::function<void()> FUNC;$/;"	t	file:
F_CHUNKED	http/lib/http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	http/lib/http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	http/lib/http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_CONNECTION_UPGRADE	http/lib/http_parser.h	/^  , F_CONNECTION_UPGRADE    = 1 << 3$/;"	e	enum:flags
F_CONTENTLENGTH	http/lib/http_parser.h	/^  , F_CONTENTLENGTH         = 1 << 7$/;"	e	enum:flags
F_SKIPBODY	http/lib/http_parser.h	/^  , F_SKIPBODY              = 1 << 6$/;"	e	enum:flags
F_TRAILING	http/lib/http_parser.h	/^  , F_TRAILING              = 1 << 4$/;"	e	enum:flags
F_UPGRADE	http/lib/http_parser.h	/^  , F_UPGRADE               = 1 << 5$/;"	e	enum:flags
File	core/File.cpp	/^File::File() {}$/;"	f	class:tigerso::File
File	core/File.cpp	/^File::File(const std::string& filename) {$/;"	f	class:tigerso::File
File	core/File.h	/^class File {$/;"	c	namespace:tigerso
File	test/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	test/File.h	/^class File {$/;"	c
File	test/HttpFile/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	test/HttpFile/File.h	/^class File {$/;"	c
File	test/sendfile/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	test/sendfile/File.h	/^class File {$/;"	c
FileLock	core/FileLock.cpp	/^FileLock::FileLock(const std::string& filename, const std::string& content): filename_(filename), content_(content) {$/;"	f	class:tigerso::FileLock
FileLock	core/FileLock.h	/^class FileLock: public Lock {$/;"	c	namespace:tigerso
FileTypeDetector	util/FileTypeDetector.h	/^    FileTypeDetector() {}$/;"	f	class:tigerso::FileTypeDetector
FileTypeDetector	util/FileTypeDetector.h	/^class FileTypeDetector: public nocopyable {$/;"	c	namespace:tigerso
FileTypeDetector	util/FileTypes/FileTypeDetector.h	/^    FileTypeDetector() {}$/;"	f	class:tigerso::util::FileTypeDetector
FileTypeDetector	util/FileTypes/FileTypeDetector.h	/^class FileTypeDetector: public core::nocopyable {$/;"	c	namespace:tigerso::util
GLOBAL	core/tigerso.h	36;"	d
GLOBAL	test/https_lib/Https.h	6;"	d
GOBAL_DEFAULT_RSA_KEY_LENGTH	ssl/SSLHelper.h	29;"	d
GraceClose	net/SocketUtil.cpp	/^int SocketUtil::GraceClose(Socket& mcsock) {$/;"	f	class:tigerso::SocketUtil
HASH_MAXCONFLICT	dns/DNSCache.h	20;"	d
HASH_NODENUM	dns/DNSCache.h	19;"	d
HEX2CHAR	core/Dechex.cpp	14;"	d	file:
HEX2CHAR	test/inter2hex.c	12;"	d	file:
HEXCHAR2DEC	core/Dechex.cpp	13;"	d	file:
HEXCHAR2DEC	test/inter2hex.c	11;"	d	file:
HEX_DIV	core/Dechex.cpp	12;"	d	file:
HEX_DIV	test/inter2hex.c	10;"	d	file:
HEX_MOD	core/Dechex.cpp	11;"	d	file:
HEX_MOD	test/inter2hex.c	9;"	d	file:
HOST_MAXLENGTH	core/tigerso.h	38;"	d
HOST_MAXLENGTH	dns/DNSCache.h	21;"	d
HP_PARSE_BAD_REQUEST	http/HttpParser.h	37;"	d
HP_PARSE_BAD_RESPONSE	http/HttpParser.h	38;"	d
HP_PARSE_COMPLETE	http/HttpParser.h	39;"	d
HP_PARSE_ERROR	http/HttpParser.h	36;"	d
HP_PARSE_NEED_MOREDATA	http/HttpParser.h	40;"	d
HTTPCONNECTIONPTR	test/http_server.cpp	/^typedef std::shared_ptr<HttpConnection> HTTPCONNECTIONPTR;$/;"	t	file:
HTTPPROXYCONNECTIONPTR	http/HttpProxy.h	/^typedef std::shared_ptr<HttpProxyConnection> HTTPPROXYCONNECTIONPTR;$/;"	t	namespace:tigerso
HTTPPROXYCONNECTIONPTR	test/backup/http_proxy.cpp	/^typedef std::shared_ptr<HttpProxyConnection> HTTPPROXYCONNECTIONPTR;$/;"	t	file:
HTTPSErrorType	test/backup/SSLContext.h	/^} HTTPSErrorType;$/;"	t	typeref:enum:__anon7
HTTPS_CERT_VERIFY_MAX_DEPTH	test/backup/SSLContext.h	15;"	d
HTTPS_CLOSE	http/HttpConnection.h	/^    HTTPS_CLOSE,$/;"	e	enum:tigerso::__anon4
HTTPS_CLOSE_DONE	http/HttpConnection.h	/^    HTTPS_CLOSE_DONE,$/;"	e	enum:tigerso::__anon4
HTTPS_ERROR_ERR	test/backup/SSLContext.h	/^    HTTPS_ERROR_ERR = -100,$/;"	e	enum:__anon7
HTTPS_ERROR_OK	test/backup/SSLContext.h	/^    HTTPS_ERROR_OK = 0$/;"	e	enum:__anon7
HTTPS_HANDSHAKE	http/HttpConnection.h	/^    HTTPS_HANDSHAKE,$/;"	e	enum:tigerso::__anon4
HTTPS_HANDSHAKE_DONE	http/HttpConnection.h	/^    HTTPS_HANDSHAKE_DONE,$/;"	e	enum:tigerso::__anon4
HTTPS_IO_ERROR	ssl/SSLHelper.h	32;"	d
HTTPS_IO_ERROR	test/backup/SSLContext.h	/^    HTTPS_IO_ERROR = -1,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_OK	test/backup/SSLContext.h	/^    HTTPS_IO_OK,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_RECALL	ssl/SSLHelper.h	31;"	d
HTTPS_IO_RECALL	test/backup/SSLContext.h	/^    HTTPS_IO_RECALL,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_STATE	test/backup/SSLContext.h	/^typedef enum HTTPS_IO_STATE {$/;"	g
HTTPS_MODE_PROXY	test/backup/SSLContext.h	/^    HTTPS_MODE_PROXY;$/;"	e	enum:__anon8
HTTPS_MODE_SERVICE	test/backup/SSLContext.h	/^    HTTPS_MODE_SERVICE;$/;"	e	enum:__anon8
HTTPS_MODE_UNKNOWN	test/backup/SSLContext.h	/^    HTTPS_MODE_UNKNOWN;$/;"	e	enum:__anon8
HTTPS_ROLE_CLIENT	test/backup/SSLContext.h	/^    HTTPS_ROLE_CLIENT,$/;"	e	enum:_SSL_ROLE_
HTTPS_ROLE_SERVER	test/backup/SSLContext.h	/^    HTTPS_ROLE_SERVER$/;"	e	enum:_SSL_ROLE_
HTTPS_ROLE_UNKNOWN	test/backup/SSLContext.h	/^    HTTPS_ROLE_UNKNOWN = -1,$/;"	e	enum:_SSL_ROLE_
HTTP_BODY_FILE	http/HttpBodyFile.h	/^    HTTP_BODY_FILE$/;"	e	enum:tigerso::_HTTP_BODY_MODE_
HTTP_BODY_NULL	http/HttpBodyFile.h	/^    HTTP_BODY_NULL,$/;"	e	enum:tigerso::_HTTP_BODY_MODE_
HTTP_BODY_RINGBUFFER	http/HttpBodyFile.h	/^    HTTP_BODY_RINGBUFFER,$/;"	e	enum:tigerso::_HTTP_BODY_MODE_
HTTP_BOTH	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_CONNECTION	net/Connection.h	/^const ConnectionType HTTP_CONNECTION = 0;$/;"	m	namespace:tigerso
HTTP_CONNECTION	test/TCPServerLoop.h	/^    HTTP_CONNECTION,$/;"	e	enum:tigerso::__anon10
HTTP_DAEMON_NAME	http/HttpService.h	13;"	d
HTTP_ERRNO_GEN	http/lib/http_parser.h	281;"	d
HTTP_ERRNO_GEN	http/lib/http_parser.h	285;"	d
HTTP_ERRNO_MAP	http/lib/http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	http/lib/http_parser.h	234;"	d
HTTP_FILE_CACHE_SIZE	http/HttpBodyFile.h	20;"	d
HTTP_INSPECTION_BLOCK	http/HttpMessage.h	/^const int HTTP_INSPECTION_BLOCK = -1;$/;"	m	namespace:tigerso
HTTP_INSPECTION_CONTINUE	http/HttpMessage.h	/^const int HTTP_INSPECTION_CONTINUE = 0;$/;"	m	namespace:tigerso
HTTP_INSPECTION_MODIFIED	http/HttpMessage.h	/^const int HTTP_INSPECTION_MODIFIED = 1;$/;"	m	namespace:tigerso
HTTP_MAX_HEADER_SIZE	http/lib/http_parser.h	64;"	d
HTTP_METHOD_MAP	http/lib/http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	http/lib/http_parser.h	164;"	d
HTTP_PARSER_ERRNO	http/lib/http_parser.h	289;"	d
HTTP_PARSER_STRICT	http/lib/http_parser.h	53;"	d
HTTP_PARSER_VERSION_MAJOR	http/lib/http_parser.h	28;"	d
HTTP_PARSER_VERSION_MINOR	http/lib/http_parser.h	29;"	d
HTTP_PARSER_VERSION_PATCH	http/lib/http_parser.h	30;"	d
HTTP_PROXY_CONNECTION	net/Connection.h	/^const ConnectionType HTTP_PROXY_CONNECTION = 1;$/;"	m	namespace:tigerso
HTTP_PROXY_CONNECTION	test/TCPServerLoop.h	/^    HTTP_PROXY_CONNECTION,$/;"	e	enum:tigerso::__anon10
HTTP_REQUEST	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ROLE_REQUEST	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_REQUEST = 0;$/;"	m	namespace:tigerso
HTTP_ROLE_RESPONSE	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_RESPONSE = 1;$/;"	m	namespace:tigerso
HTTP_ROLE_UINIT	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_UINIT = -1;$/;"	m	namespace:tigerso
HTTP_STATUS_MAP	http/lib/http_parser.h	/^  HTTP_STATUS_MAP(XX)$/;"	e	enum:http_status
HTTP_STATUS_MAP	http/lib/http_parser.h	94;"	d
HTTP_STRERROR_GEN	http/lib/http_parser.c	464;"	d	file:
HTTP_STRERROR_GEN	http/lib/http_parser.c	471;"	d	file:
HashTable	test/hashtable/HashTable.h	/^class HashTable {$/;"	c
HexCharSet	core/Dechex.cpp	/^static const char HexCharSet[] = {$/;"	m	namespace:tigerso	file:
HexCharSet	test/inter2hex.c	/^char HexCharSet[] = {$/;"	v
HttpBodyFile	http/HttpBodyFile.cpp	/^HttpBodyFile::HttpBodyFile(const unsigned int bufsize):_ringbuf(bufsize){}$/;"	f	class:tigerso::HttpBodyFile
HttpBodyFile	http/HttpBodyFile.h	/^class HttpBodyFile: public nocopyable {$/;"	c	namespace:tigerso
HttpBodyFile	test/HttpFile/HttpBodyFile.h	/^    HttpBodyFile(const char* filename):_ringbuf(4096), _file(filename) {}$/;"	f	class:HttpBodyFile
HttpBodyFile	test/HttpFile/HttpBodyFile.h	/^class HttpBodyFile {$/;"	c
HttpBodyFile	test/sendfile/HttpBodyFile.h	/^class HttpBodyFile {$/;"	c
HttpBodyMode	http/HttpBodyFile.h	/^} HttpBodyMode;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_HTTP_BODY_MODE_
HttpConnection	http/HttpConnection.cpp	/^HttpConnection::HttpConnection(std::shared_ptr<Acceptor> acptptr, const IDType id): Connection(acptptr, id) {}$/;"	f	class:tigerso::HttpConnection
HttpConnection	http/HttpConnection.h	/^class HttpConnection: public Connection {$/;"	c	namespace:tigerso
HttpConnection	test/http_server.cpp	/^    HttpConnection(): sockptr(std::make_shared<Socket>()) {}$/;"	f	class:HttpConnection
HttpConnection	test/http_server.cpp	/^class HttpConnection {$/;"	c	file:
HttpFilter	http/HttpFilter.h	/^class HttpFilter {$/;"	c	namespace:tigerso
HttpHelper	http/HttpMessage.h	/^    HttpHelper(){}$/;"	f	class:tigerso::HttpHelper
HttpHelper	http/HttpMessage.h	/^class HttpHelper {$/;"	c	namespace:tigerso
HttpInSpection	http/HttpMessage.h	/^class HttpInSpection {$/;"	c	namespace:tigerso
HttpMessage	http/HttpMessage.h	/^class HttpMessage {$/;"	c	namespace:tigerso
HttpMode	test/backup/SSLContext.h	/^} HttpMode;$/;"	t	typeref:enum:__anon8
HttpParser	http/HttpParser.h	/^    HttpParser(): buffer_(nullptr), length_(0), parsedn_(0), state_(PARSE_UNINIT), message_(nullptr) {}$/;"	f	class:tigerso::HttpParser
HttpParser	http/HttpParser.h	/^class HttpParser: public nocopyable {$/;"	c	namespace:tigerso
HttpProxyConnection	http/HttpProxy.cpp	/^HttpProxyConnection::HttpProxyConnection(): ID_(HttpProxyConnection::uuid()), $/;"	f	class:tigerso::HttpProxyConnection
HttpProxyConnection	http/HttpProxy.h	/^class HttpProxyConnection {$/;"	c	namespace:tigerso
HttpProxyConnection	http/HttpProxyConnection.cpp	/^HttpProxyConnection::HttpProxyConnection(std::shared_ptr<Acceptor> connfactptr, const IDType id): Connection(connfactptr, id) {$/;"	f	class:tigerso::HttpProxyConnection
HttpProxyConnection	http/HttpProxyConnection.h	/^class HttpProxyConnection: public Connection {$/;"	c	namespace:tigerso
HttpProxyConnection	test/backup/http_proxy.cpp	/^    HttpProxyConnection(): ID_(HttpProxyConnection::uuid()), $/;"	f	class:HttpProxyConnection
HttpProxyConnection	test/backup/http_proxy.cpp	/^class HttpProxyConnection {$/;"	c	file:
HttpProxyLoop	http/HttpProxy.cpp	/^HttpProxyLoop::HttpProxyLoop(const std::string& ipaddr, const std::string& port):$/;"	f	class:tigerso::HttpProxyLoop
HttpProxyLoop	http/HttpProxy.h	/^class HttpProxyLoop {   $/;"	c	namespace:tigerso
HttpProxyLoop	test/backup/http_proxy.cpp	/^    HttpProxyLoop(const std::string& ipaddr, const std::string& port):$/;"	f	class:HttpProxyLoop
HttpProxyLoop	test/backup/http_proxy.cpp	/^class HttpProxyLoop {   $/;"	c	file:
HttpProxyState	http/HttpProxyConnection.h	/^} HttpProxyState;$/;"	t	namespace:tigerso	typeref:enum:tigerso::__anon5
HttpRequest	http/HttpRequest.cpp	/^HttpRequest::HttpRequest() { role_ = HTTP_ROLE_REQUEST; }$/;"	f	class:tigerso::HttpRequest
HttpRequest	http/HttpRequest.h	/^class HttpRequest: public HttpMessage {$/;"	c	namespace:tigerso
HttpResponse	http/HttpResponse.cpp	/^HttpResponse::HttpResponse() { role_ = HTTP_ROLE_RESPONSE; }$/;"	f	class:tigerso::HttpResponse
HttpResponse	http/HttpResponse.h	/^class HttpResponse: public HttpMessage {$/;"	c	namespace:tigerso
HttpServer	test/http_server.cpp	/^class HttpServer {$/;"	c	file:
HttpService	http/HttpService.h	/^    HttpService(): DaemonBase(HTTP_DAEMON_NAME) {$/;"	f	class:tigerso::HttpService
HttpService	http/HttpService.h	/^class HttpService: public DaemonBase {$/;"	c	namespace:tigerso
HttpState	http/HttpConnection.h	/^} HttpState;$/;"	t	namespace:tigerso	typeref:enum:tigerso::__anon4
HttpTransaction	http/HttpProxy.h	/^struct HttpTransaction {$/;"	s	class:tigerso::HttpProxyConnection
HttpTransaction	test/backup/http_proxy.cpp	/^struct HttpTransaction {$/;"	s	class:HttpProxyConnection	file:
HttpsContext	test/backup/SSLContex.h	/^    HttpsContext():  {}$/;"	f	class:HttpsContext
HttpsContext	test/backup/SSLContex.h	/^class HttpsContext {$/;"	c
HttpsContext	test/https_lib/SSLContext.cpp	/^    HttpsContext():  {}$/;"	f	class:SSLContext::HttpsContext
HttpsContext	test/https_lib/SSLContext.cpp	/^class HttpsContext {$/;"	c	namespace:SSLContext	file:
HtttsRole	test/backup/SSLContext.h	/^} HtttsRole;$/;"	t	typeref:enum:_SSL_ROLE_
IDTYPE	http/HttpProxy.h	/^typedef unsigned long IDTYPE;  $/;"	t	namespace:tigerso
IDTYPE	test/backup/http_proxy.cpp	/^typedef unsigned long IDTYPE;  $/;"	t	file:
IDType	net/Connection.h	/^typedef unsigned int IDType;$/;"	t	namespace:tigerso
ID_	dns/DNSResolver.h	/^    unsigned short ID_ = 0x00;$/;"	m	class:tigerso::DNSResolver
ID_	http/HttpProxy.h	/^    const IDTYPE  ID_;$/;"	m	class:tigerso::HttpProxyConnection
ID_	test/backup/http_proxy.cpp	/^    const IDTYPE  ID_;$/;"	m	class:HttpProxyConnection	file:
INCFLAGS	test/Makefile	/^INCFLAGS := -I $(WORKPATH)$/;"	m
INCS	test/Makefile	/^INCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.h))$/;"	m
INFO	core/Logging.h	/^	INFO = 1,$/;"	e	enum:tigerso::LOGLEVEL
INFO_LOG	core/Logging.h	26;"	d
IPV4_ADDRSIZE	core/tigerso.h	37;"	d
IPV4_ADDRSIZE	dns/DNSCache.h	18;"	d
IPV4_ADDRSIZE	dns/DNSResolver.h	80;"	d
IPv4Addr	net/Upstream.h	/^    char IPv4Addr[IPV4_ADDRSIZE] = {0};$/;"	m	struct:tigerso::Upstream::UpstreamNode
IS_ALPHA	http/lib/http_parser.c	413;"	d	file:
IS_ALPHANUM	http/lib/http_parser.c	415;"	d	file:
IS_HEADER_CHAR	http/lib/http_parser.c	442;"	d	file:
IS_HEX	http/lib/http_parser.c	416;"	d	file:
IS_HOST_CHAR	http/lib/http_parser.c	429;"	d	file:
IS_HOST_CHAR	http/lib/http_parser.c	434;"	d	file:
IS_HTTPPARSER_INITED	http/HttpParser.h	35;"	d
IS_MARK	http/lib/http_parser.c	417;"	d	file:
IS_NUM	http/lib/http_parser.c	414;"	d	file:
IS_URL_CHAR	http/lib/http_parser.c	428;"	d	file:
IS_URL_CHAR	http/lib/http_parser.c	432;"	d	file:
IS_USERINFO_CHAR	http/lib/http_parser.c	420;"	d	file:
InitSocket	net/SocketUtil.cpp	/^int SocketUtil::InitSocket(const int domain, const int type, Socket& mcsock) {$/;"	f	class:tigerso::SocketUtil
Inspect	http/HttpMessage.cpp	/^int HttpInSpection::Inspect(const std::string& header,  const std::weak_ptr<HttpMessage>& wptr) {$/;"	f	class:tigerso::HttpInSpection
KEEP_ALIVE	http/lib/http_parser.c	170;"	d	file:
KEYB	core/ConfigParser.h	18;"	d
KEYVAL	core/ConfigParser.h	28;"	d
LF	http/lib/http_parser.c	411;"	d	file:
LIBFLAGS	test/Makefile	/^LIBFLAGS := -L$(LIBPATH) -l$(DEPY) $(PTHREAD_FLAG) $(SHM_FLAG)$/;"	m
LIKELY	http/lib/http_parser.c	71;"	d	file:
LIKELY	http/lib/http_parser.c	74;"	d	file:
LOCK_FAILURE	core/FileLock.h	10;"	d
LOCK_SUCCESS	core/FileLock.h	9;"	d
LOGLEVEL	core/Logging.h	/^enum LOGLEVEL{$/;"	g	namespace:tigerso
LOGNAME	core/tigerso.h	/^const std::string  LOGNAME     =  "httpd";$/;"	m	namespace:tigerso::core
LOGPATH	core/tigerso.h	/^const std::string  LOGPATH     =  WORKPATH + "\/log";$/;"	m	namespace:tigerso::core
LOOP_CALLBACK	http/HttpProxy.h	/^typedef std::function<int(HttpProxyConnection&)> LOOP_CALLBACK ;$/;"	t	class:tigerso::HttpProxyConnection
LOOP_CALLBACK	test/backup/http_proxy.cpp	/^typedef std::function<int(HttpProxyConnection&)> LOOP_CALLBACK ;$/;"	t	class:HttpProxyConnection	file:
LOWER	http/lib/http_parser.c	412;"	d	file:
Listen	net/SocketUtil.cpp	/^int SocketUtil::Listen(Socket& mcsock, const int backlog) {$/;"	f	class:tigerso::SocketUtil
Lock	core/SysUtil.h	/^class Lock: public nocopyable {$/;"	c	namespace:tigerso
LockGuard	core/SysUtil.h	/^   explicit LockGuard(Lock& Lock)$/;"	f	class:tigerso::LockGuard
LockGuard	core/SysUtil.h	/^class LockGuard {$/;"	c	namespace:tigerso
LockTryGuard	core/SysUtil.h	/^    explicit LockTryGuard(Lock& Lock)$/;"	f	class:tigerso::LockTryGuard
LockTryGuard	core/SysUtil.h	/^class LockTryGuard {$/;"	c	namespace:tigerso
Lock_obj	core/SysUtil.h	/^    Lock& Lock_obj;$/;"	m	class:tigerso::LockGuard
Lock_obj	core/SysUtil.h	/^    Lock& Lock_obj;$/;"	m	class:tigerso::LockTryGuard
Logging	core/Logging.h	/^	Logging():endFmt("<__FUNC__>@__FILE__"), level(NOLOG){}$/;"	f	class:tigerso::Logging
Logging	core/Logging.h	/^class Logging {$/;"	c	namespace:tigerso
MARK	http/lib/http_parser.c	136;"	d	file:
MAX_CHANNEL_NUM	net/EventsLoop.h	/^static const int MAX_CHANNEL_NUM = 512;$/;"	m	namespace:tigerso
MAX_UDP_PAYLOAD	dns/DNSResolver.h	93;"	d
MCBUFFER_DEBUG_	test/test_buffer.cpp	16;"	d	file:
MC_LOCK_PRIVATE	core/SysUtil.h	/^const int MC_LOCK_PRIVATE = 0;$/;"	m	namespace:tigerso
MC_LOCK_SHARE_PROCESS	core/SysUtil.h	/^const int MC_LOCK_SHARE_PROCESS = 1;$/;"	m	namespace:tigerso
MD5	ssl/SSLHelper.cpp	/^int SSLHelper::MD5(const char*  input, char* output, int len) {$/;"	f	class:tigerso::SSLHelper
MD5_KEYSIZE	dns/DNSCache.h	17;"	d
MIMETyper_	http/HttpMessage.h	/^    FileTypeDetector MIMETyper_;$/;"	m	class:tigerso::HttpMessage
MIN	http/lib/http_parser.c	37;"	d	file:
MIN_SOCKET_FD	net/SocketUtil.h	33;"	d
NEW_MESSAGE	http/lib/http_parser.c	456;"	d	file:
NEW_MESSAGE	http/lib/http_parser.c	459;"	d	file:
NOLOG	core/Logging.h	/^	NOLOG = 0,$/;"	e	enum:tigerso::LOGLEVEL
NOT_FOUND	http/HttpResponse.cpp	/^const std::string HttpResponse::NOT_FOUND = "HTTP\/1.1 404 Not Found\\r\\nserver: tigerso\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::HttpResponse	file:
NOT_FOUND	http/HttpResponse.h	/^    static const std::string NOT_FOUND;$/;"	m	class:tigerso::HttpResponse
OBJS	test/Makefile	/^OBJS := $(foreach obj, $(OBJSLIST), $(BUILDDIR)\/$(obj))$/;"	m
OBJSLIST	test/Makefile	/^OBJSLIST := $(notdir $(OLDOBJS))$/;"	m
OK	http/HttpResponse.cpp	/^const std::string HttpResponse::OK = "HTTP\/1.1 200 OK\\r\\nserver: tigerso\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::HttpResponse	file:
OK	http/HttpResponse.h	/^    static const std::string OK;$/;"	m	class:tigerso::HttpResponse
OLDOBJS	test/Makefile	/^OLDOBJS := $(patsubst %.cpp, %.o, $(SRCS))$/;"	m
OPENSSL_INITIZED	ssl/SSLContext.cpp	/^static bool OPENSSL_INITIZED = false;$/;"	m	namespace:tigerso::_OPENSSL_	file:
OUTPUT	test/Makefile	/^OUTPUT := $(WORKPATH)\/output$/;"	m
PARSER_TO_MESSAGE	http/HttpParser.cpp	9;"	d	file:
PARSE_BODY_NEED_MORE_DATA	http/HttpParser.h	/^    PARSE_BODY_NEED_MORE_DATA,$/;"	e	enum:tigerso::__anon3
PARSE_COMPLETE	http/HttpParser.h	/^    PARSE_COMPLETE$/;"	e	enum:tigerso::__anon3
PARSE_ERR	http/HttpParser.h	/^    PARSE_ERR = 0,$/;"	e	enum:tigerso::__anon3
PARSE_HEADER_COMPLETE	http/HttpParser.h	/^    PARSE_HEADER_COMPLETE,$/;"	e	enum:tigerso::__anon3
PARSE_HEADER_NEED_MORE_DATA	http/HttpParser.h	/^    PARSE_HEADER_NEED_MORE_DATA,$/;"	e	enum:tigerso::__anon3
PARSE_INIT	http/HttpParser.h	/^    PARSE_INIT,$/;"	e	enum:tigerso::__anon3
PARSE_STATE	http/HttpParser.h	/^} PARSE_STATE; $/;"	t	namespace:tigerso	typeref:enum:tigerso::__anon3
PARSE_UNINIT	http/HttpParser.h	/^    PARSE_UNINIT = -1,$/;"	e	enum:tigerso::__anon3
PARSING_HEADER	http/lib/http_parser.c	360;"	d	file:
POINTER	test/HttpFile/RingBuffer.h	35;"	d
POINTER	test/RingBuffer.h	32;"	d
POINTER	test/sendfile/RingBuffer.h	28;"	d
PROJECT	core/tigerso.h	/^const std::string  PROJECT     =  "tigerso";$/;"	m	namespace:tigerso::core
PROJECT	test/Makefile	/^PROJECT := httpd$/;"	m
PROXY_CONNECTION	http/lib/http_parser.c	164;"	d	file:
PROXY_LOG	test/backup/http_proxy.cpp	43;"	d	file:
PTHREAD_FLAG	test/Makefile	/^PTHREAD_FLAG := -lpthread$/;"	m
PUSH2HEXBUF	core/Dechex.cpp	15;"	d	file:
PUSH2HEXBUF	test/inter2hex.c	13;"	d	file:
PackSockAddr	net/SocketUtil.cpp	/^int SocketUtil::PackSockAddr(const std::string& s_addr, const std::string& port, const int family, sockaddr_in& sock_addr) {$/;"	f	class:tigerso::SocketUtil
ProxyConnection	test/test_http.cpp	/^    explicit ProxyConnection(SocketPtr& clientptr, SocketPtr& serverptr): sockfd_(clientptr->getSocket()) {$/;"	f	class:ProxyConnection
ProxyConnection	test/test_http.cpp	/^    explicit ProxyConnection(SocketPtr& sockptr): sockfd_(sockptr->getSocket()) {$/;"	f	class:ProxyConnection
ProxyConnection	test/test_http.cpp	/^class ProxyConnection {$/;"	c	file:
QQindexAd	test/HttpFile/index.html	/^	function QQindexAd(obj){$/;"	f
QQindexAdShut	test/HttpFile/index.html	/^	function QQindexAdShut(){$/;"	f
RECV_REQUEST	http/HttpConnection.h	/^    RECV_REQUEST,$/;"	e	enum:tigerso::__anon4
RECV_REQUEST_DONE	http/HttpConnection.h	/^    RECV_REQUEST_DONE,$/;"	e	enum:tigerso::__anon4
REEXECUTE	http/lib/http_parser.c	66;"	d	file:
RESPONSE_STATUS_MAP	http/HttpMessage.h	/^    static const std::map<int, std::string> RESPONSE_STATUS_MAP;$/;"	m	class:tigerso::HttpHelper
RETURN	http/lib/http_parser.c	61;"	d	file:
REVERSESTRING	core/Dechex.cpp	16;"	d	file:
REVERSESTRING	test/inter2hex.c	14;"	d	file:
REVERSE_STRING	core/Dechex.cpp	/^void REVERSE_STRING(char* beg, char* end) {$/;"	f	namespace:tigerso
RINGBUFFER_DEFAULT_LENGTH	net/RingBuffer.h	37;"	d
RINGBUFFER_DEFAULT_LENGTH	test/HttpFile/RingBuffer.h	47;"	d
RINGBUFFER_DEFAULT_LENGTH	test/RingBuffer.h	44;"	d
RINGBUFFER_MAX_LENGTH	net/RingBuffer.h	35;"	d
RINGBUFFER_MAX_LENGTH	test/HttpFile/RingBuffer.h	45;"	d
RINGBUFFER_MAX_LENGTH	test/RingBuffer.h	42;"	d
RINGBUFFER_MAX_LENGTH	test/sendfile/RingBuffer.h	35;"	d
RINGBUFFER_MIN_LENGTH	net/RingBuffer.h	36;"	d
RINGBUFFER_MIN_LENGTH	test/HttpFile/RingBuffer.h	46;"	d
RINGBUFFER_MIN_LENGTH	test/RingBuffer.h	43;"	d
RINGBUFFER_MIN_LENGTH	test/sendfile/RingBuffer.h	36;"	d
RINGBUFFER_NO_DATA	net/RingBuffer.h	28;"	d
RINGBUFFER_NO_DATA	test/HttpFile/RingBuffer.h	24;"	d
RINGBUFFER_NO_DATA	test/RingBuffer.h	21;"	d
RINGBUFFER_NO_DATA	test/sendfile/RingBuffer.h	17;"	d
RINGBUFFER_NO_SPACE	net/RingBuffer.h	27;"	d
RINGBUFFER_NO_SPACE	test/HttpFile/RingBuffer.h	23;"	d
RINGBUFFER_NO_SPACE	test/RingBuffer.h	20;"	d
RINGBUFFER_NO_SPACE	test/sendfile/RingBuffer.h	16;"	d
Recv	net/SocketUtil.cpp	/^int SocketUtil::Recv(Socket& mcsock, void* buf, size_t len, size_t* recvn) {$/;"	f	class:tigerso::SocketUtil
Register	http/HttpMessage.cpp	/^void HttpInSpection::Register(const std::string& header, httpInspectCallback callback, http_role_t role) { $/;"	f	class:tigerso::HttpInSpection
RelocateFileDescriptor	net/SocketUtil.cpp	/^int SocketUtil::RelocateFileDescriptor(int oldfd, int leastfd) {$/;"	f	class:tigerso::SocketUtil
ResolveHost2IP	net/SocketUtil.cpp	/^int SocketUtil::ResolveHost2IP(const std::string& hostname, std::vector<std::string>& ip_vec ) {$/;"	f	class:tigerso::SocketUtil
ResolveSockAddr	net/SocketUtil.cpp	/^int SocketUtil::ResolveSockAddr(const sockaddr_in& sock_addr, std::string& s_addr, std::string& port) {$/;"	f	class:tigerso::SocketUtil
RingBuffer	net/RingBuffer.cpp	/^RingBuffer::RingBuffer(const size_t len) {$/;"	f	class:tigerso::RingBuffer
RingBuffer	net/RingBuffer.h	/^class RingBuffer {$/;"	c	namespace:tigerso
RingBuffer	test/HttpFile/RingBuffer.h	/^    RingBuffer(const size_t len = RINGBUFFER_DEFAULT_LENGTH) {$/;"	f	class:RingBuffer
RingBuffer	test/HttpFile/RingBuffer.h	/^class RingBuffer {$/;"	c
RingBuffer	test/RingBuffer.h	/^    RingBuffer(const size_t len = RINGBUFFER_DEFAULT_LENGTH) {$/;"	f	class:RingBuffer
RingBuffer	test/RingBuffer.h	/^class RingBuffer {$/;"	c
RingBuffer	test/sendfile/RingBuffer.h	/^    RingBuffer(const size_t& len) {$/;"	f	class:RingBuffer
RingBuffer	test/sendfile/RingBuffer.h	/^class RingBuffer {$/;"	c
SCTX_CERT_VERIFY_MAX_DEPTH	ssl/SSLContext.cpp	18;"	d	file:
SCTX_ERROR_ERR	ssl/SSLContext.h	/^    SCTX_ERROR_ERR = -1,$/;"	e	enum:tigerso::_SSL_ERROR_CODE
SCTX_ERROR_OK	ssl/SSLContext.h	/^    SCTX_ERROR_OK$/;"	e	enum:tigerso::_SSL_ERROR_CODE
SCTX_IO_ERROR	ssl/SSLContext.h	/^   SCTX_IO_ERROR = -1,$/;"	e	enum:tigerso::_SSL_IO_STATE
SCTX_IO_OK	ssl/SSLContext.h	/^   SCTX_IO_OK$/;"	e	enum:tigerso::_SSL_IO_STATE
SCTX_IO_RECALL	ssl/SSLContext.h	/^   SCTX_IO_RECALL,$/;"	e	enum:tigerso::_SSL_IO_STATE
SCTX_MODE_PROXY	ssl/SSLContext.h	/^    SCTX_MODE_PROXY,$/;"	e	enum:tigerso::_SSL_MODE_
SCTX_MODE_SERVICE	ssl/SSLContext.h	/^    SCTX_MODE_SERVICE,$/;"	e	enum:tigerso::_SSL_MODE_
SCTX_MODE_UNKNOWN	ssl/SSLContext.h	/^    SCTX_MODE_UNKNOWN$/;"	e	enum:tigerso::_SSL_MODE_
SCTX_ROLE_CLIENT	ssl/SSLContext.h	/^    SCTX_ROLE_CLIENT,$/;"	e	enum:tigerso::_SSL_ROLE_
SCTX_ROLE_SERVER	ssl/SSLContext.h	/^    SCTX_ROLE_SERVER$/;"	e	enum:tigerso::_SSL_ROLE_
SCTX_ROLE_UNKNOWN	ssl/SSLContext.h	/^    SCTX_ROLE_UNKNOWN = -1,$/;"	e	enum:tigerso::_SSL_ROLE_
SECTB	core/ConfigParser.h	15;"	d
SECTE	core/ConfigParser.h	16;"	d
SECTION	core/ConfigParser.h	26;"	d
SEND_DEBUG	test/HttpFile/sendcontent.cc	18;"	d	file:
SEND_DEBUG	test/HttpFile/sendfile.cc	18;"	d	file:
SEND_DEBUG	test/sendfile/sendfile.cc	18;"	d	file:
SEND_RESPONSE	http/HttpConnection.h	/^    SEND_RESPONSE,$/;"	e	enum:tigerso::__anon4
SEND_RESPONSE_DONE	http/HttpConnection.h	/^    SEND_RESPONSE_DONE,$/;"	e	enum:tigerso::__anon4
SERVER_CLOSE	http/HttpProxyConnection.h	/^    SERVER_CLOSE,$/;"	e	enum:tigerso::__anon5
SERVER_CLOSE_DONE	http/HttpProxyConnection.h	/^    SERVER_CLOSE_DONE$/;"	e	enum:tigerso::__anon5
SERVER_HANDSHAKE	http/HttpProxyConnection.h	/^    SERVER_HANDSHAKE,$/;"	e	enum:tigerso::__anon5
SERVER_HANDSHAKE_DONE	http/HttpProxyConnection.h	/^    SERVER_HANDSHAKE_DONE,$/;"	e	enum:tigerso::__anon5
SERVER_RECV_RESPONSE	http/HttpProxyConnection.h	/^    SERVER_RECV_RESPONSE,$/;"	e	enum:tigerso::__anon5
SERVER_RECV_RESPONSE_DONE	http/HttpProxyConnection.h	/^    SERVER_RECV_RESPONSE_DONE,$/;"	e	enum:tigerso::__anon5
SERVER_SEND_REQUEST	http/HttpProxyConnection.h	/^    SERVER_SEND_REQUEST,$/;"	e	enum:tigerso::__anon5
SERVER_SEND_REQUEST_DONE	http/HttpProxyConnection.h	/^    SERVER_SEND_REQUEST_DONE,$/;"	e	enum:tigerso::__anon5
SET_ERRNO	http/lib/http_parser.c	54;"	d	file:
SHELL	test/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHM_FLAG	test/Makefile	/^SHM_FLAG := -lrt$/;"	m
SOCKETPTR	test/backup/http_proxy.cpp	/^typedef std::shared_ptr<Socket> SOCKETPTR;$/;"	t	file:
SOCKET_EVENT_AFTER	net/Socket.h	21;"	d
SOCKET_EVENT_ALL	net/Socket.h	25;"	d
SOCKET_EVENT_BEFORE	net/Socket.h	20;"	d
SOCKET_EVENT_ERROR	net/Socket.h	22;"	d
SOCKET_EVENT_ERROR	test/TCPServerLoop.h	/^       master_->setEventHandle(BIND_EVENTHANDLE(TCPServerLoop::errorHandle), SOCKET_EVENT_ERROR);$/;"	m	namespace:tigerso
SOCKET_EVENT_NONE	net/Socket.h	17;"	d
SOCKET_EVENT_RDHUP	net/Socket.h	23;"	d
SOCKET_EVENT_READ	net/Socket.h	18;"	d
SOCKET_EVENT_READ	test/TCPServerLoop.h	/^       master_->setEventHandle(BIND_EVENTHANDLE(TCPServerLoop::acceptHandle),SOCKET_EVENT_READ);$/;"	m	namespace:tigerso
SOCKET_EVENT_TIMEOUT	net/Socket.h	24;"	d
SOCKET_EVENT_WRITE	net/Socket.h	19;"	d
SOCKET_IOSTATE_CLOSED	net/Buffer.h	/^const int SOCKET_IOSTATE_CLOSED   = -1;$/;"	m	namespace:tigerso
SOCKET_IOSTATE_CONTINUE	net/Buffer.h	/^const int SOCKET_IOSTATE_CONTINUE = 0;$/;"	m	namespace:tigerso
SOCKET_IOSTATE_ERROR	net/Buffer.h	/^const int SOCKET_IOSTATE_ERROR    = -2;$/;"	m	namespace:tigerso
SOCKET_ROLE_CLIENT	net/Socket.h	/^const socket_role_t SOCKET_ROLE_CLIENT =  0;$/;"	m	namespace:tigerso
SOCKET_ROLE_SERVER	net/Socket.h	/^const socket_role_t SOCKET_ROLE_SERVER =  1;$/;"	m	namespace:tigerso
SOCKET_ROLE_UINIT	net/Socket.h	/^const socket_role_t SOCKET_ROLE_UINIT  = -1;$/;"	m	namespace:tigerso
SOCKET_STAGE_ACCEPT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_ACCEPT  =  3;$/;"	m	namespace:tigerso
SOCKET_STAGE_BIND	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_BIND    =  1;$/;"	m	namespace:tigerso
SOCKET_STAGE_CLOSE	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_CLOSE   =  7;$/;"	m	namespace:tigerso
SOCKET_STAGE_CONNECT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_CONNECT =  4;$/;"	m	namespace:tigerso
SOCKET_STAGE_LISTEN	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_LISTEN  =  2;$/;"	m	namespace:tigerso
SOCKET_STAGE_RECV	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_RECV    =  5;$/;"	m	namespace:tigerso
SOCKET_STAGE_SEND	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_SEND    =  6;$/;"	m	namespace:tigerso
SOCKET_STAGE_SOCKET	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_SOCKET  =  0;$/;"	m	namespace:tigerso
SOCKET_STAGE_UINIT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_UINIT   = -1;$/;"	m	namespace:tigerso
SPLIT	core/Logging.h	17;"	d
SPLIT	core/Logging.h	20;"	d
SRCS	test/Makefile	/^SRCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
SSLAccept	net/Socket.h	/^    int  SSLAccept() { return sctx.accept(); }$/;"	f	class:tigerso::Socket
SSLContext	ssl/SSLContext.h	/^    SSLContext(){}$/;"	f	class:tigerso::SSLContext
SSLContext	ssl/SSLContext.h	/^class SSLContext {$/;"	c	namespace:tigerso
SSLContext	test/backup/SSLContex.h	/^namespace SSLContext {$/;"	n
SSLContext	test/backup/SSLContext.h	/^class SSLContext {$/;"	c
SSLContext	test/https_lib/SSLContext.cpp	/^namespace SSLContext {$/;"	n	file:
SSLContextFactory	test/https_lib/Https.h	/^class SSLContextFactory {$/;"	c
SSLErrno	net/Socket.h	/^    int SSLErrno() { return sctx.serrno; }$/;"	f	class:tigerso::Socket
SSLHandShake	http/HttpConnection.cpp	/^int HttpConnection::SSLHandShake(Socket& sock) {$/;"	f	class:tigerso::HttpConnection
SSLHelper	ssl/SSLHelper.h	/^class SSLHelper {$/;"	c	namespace:tigerso
SSLIOState	ssl/SSLContext.h	/^}SSLIOState;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_SSL_IO_STATE
SSLMode	ssl/SSLContext.h	/^} SSLMode;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_SSL_MODE_
SSLProtocol	net/Acceptor.h	/^    inline bool SSLProtocol() { return service_.sslEnabled; }$/;"	f	class:tigerso::Acceptor
SSLRole	ssl/SSLContext.h	/^} SSLRole;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_SSL_ROLE_
SSLStrerror	ssl/SSLContext.cpp	14;"	d	file:
SSLStrerror	test/backup/SSLContext.h	14;"	d
SSLVersion	test/https_lib/Https.h	/^} SSLVersion;$/;"	t	typeref:enum:_SSL_version
SSLWantReadMore	net/Socket.h	/^    bool SSLWantReadMore() { return isSSL() && sctx.serrno == SSL_ERROR_WANT_READ; }$/;"	f	class:tigerso::Socket
SSLWantWriteMore	net/Socket.h	/^    bool SSLWantWriteMore() { return isSSL() && sctx.serrno == SSL_ERROR_WANT_WRITE; }$/;"	f	class:tigerso::Socket
SSL_VERSION_ALL	test/https_lib/Https.h	/^    SSL_VERSION_ALL,$/;"	e	enum:_SSL_version
SSL_VERSION_SSLV3	test/https_lib/Https.h	/^    SSL_VERSION_SSLV3,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS10	test/https_lib/Https.h	/^    SSL_VERSION_TLS10,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS11	test/https_lib/Https.h	/^    SSL_VERSION_TLS11,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS12	test/https_lib/Https.h	/^    SSL_VERSION_TLS12,$/;"	e	enum:_SSL_version
SSL_VERSION_UNKNOW	test/https_lib/Https.h	/^    SSL_VERSION_UNKNOW$/;"	e	enum:_SSL_version
STATE_RESET	http/HttpProxyConnection.h	/^    STATE_RESET,$/;"	e	enum:tigerso::__anon5
STRICT_CHECK	http/lib/http_parser.c	449;"	d	file:
STRICT_CHECK	http/lib/http_parser.c	458;"	d	file:
STRICT_TOKEN	http/lib/http_parser.c	424;"	d	file:
ScanFileType	util/FileTypeDetector.h	/^struct ScanFileType {$/;"	s	namespace:tigerso
ScanFileType	util/FileTypes/FileTypeDetector.h	/^struct ScanFileType {$/;"	s	namespace:tigerso::util
Send	net/SocketUtil.cpp	/^int SocketUtil::Send(Socket& mcsock, const void* buf, size_t len, size_t* sendn) {$/;"	f	class:tigerso::SocketUtil
ServerCertVerifyCallback	ssl/SSLContext.h	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t	namespace:tigerso
ServerCertVerifyCallback	test/backup/SSLContex.h	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t
ServerCertVerifyCallback	test/backup/SSLContext.h	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t
ServerCertVerifyCallback	test/https_lib/SSLContext.cpp	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t	namespace:SSLContext	file:
ServiceContext	net/Acceptor.h	/^struct ServiceContext {$/;"	s	namespace:tigerso
SetAddrReuseable	net/SocketUtil.cpp	/^bool SocketUtil::SetAddrReuseable(Socket& mcsock, bool on) {$/;"	f	class:tigerso::SocketUtil
SetCloseOnExec	net/SocketUtil.cpp	/^bool SocketUtil::SetCloseOnExec(Socket& mcsock) {$/;"	f	class:tigerso::SocketUtil
SetKeepAlive	net/SocketUtil.cpp	/^bool SocketUtil::SetKeepAlive(Socket& mcsock, bool on) {$/;"	f	class:tigerso::SocketUtil
SetPortReuseable	net/SocketUtil.cpp	/^bool SocketUtil::SetPortReuseable(Socket& mcsock, bool on) {$/;"	f	class:tigerso::SocketUtil
SetTcpNoDelay	net/SocketUtil.cpp	/^bool SocketUtil::SetTcpNoDelay(Socket& mcsock, bool on) {$/;"	f	class:tigerso::SocketUtil
SharedMemory	core/SysUtil.h	/^    SharedMemory():$/;"	f	class:tigerso::SharedMemory
SharedMemory	core/SysUtil.h	/^    SharedMemory(const string& name, const size_t size, const int prot = MAP_SHARED):$/;"	f	class:tigerso::SharedMemory
SharedMemory	core/SysUtil.h	/^class SharedMemory: public nocopyable {$/;"	c	namespace:tigerso
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex()$/;"	f	class:tigerso::ShmMutex
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex(const ShmMutex& mutex)$/;"	f	class:tigerso::ShmMutex
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex(const string& shm_name)$/;"	f	class:tigerso::ShmMutex
ShmMutex	core/SysUtil.h	/^class ShmMutex: public Lock {$/;"	c	namespace:tigerso
SignalHandleSet	core/DaemonBase.cpp	/^struct SignalHandleSet {$/;"	s	namespace:tigerso	file:
Singleton	core/BaseClass.h	/^    Singleton() {}$/;"	f	class:tigerso::Singleton
Singleton	core/BaseClass.h	/^template <typename T> class Singleton {$/;"	c	namespace:tigerso
Socket	net/Socket.h	/^    Socket(): bufPtr_(inBuffer_, outBuffer_) {$/;"	f	class:tigerso::Socket
Socket	net/Socket.h	/^class Socket: public nocopyable {$/;"	c	namespace:tigerso
SocketPtr	net/Socket.h	/^typedef std::shared_ptr<Socket> SocketPtr;$/;"	t	namespace:tigerso
SocketUtil	net/SocketUtil.h	/^class SocketUtil {$/;"	c	namespace:tigerso
SysUtil	core/SysUtil.h	/^class SysUtil {$/;"	c	namespace:tigerso
T	http/lib/http_parser.c	237;"	d	file:
T	http/lib/http_parser.c	239;"	d	file:
T	http/lib/http_parser.c	277;"	d	file:
TARGET	test/Makefile	/^TARGET := $(OUTPUT)\/$(PROJECT)$/;"	m
TCP_CLOSE	http/HttpConnection.h	/^    TCP_CLOSE$/;"	e	enum:tigerso::__anon4
TCP_CONNECTION	test/TCPServerLoop.h	/^    TCP_CONNECTION$/;"	e	enum:tigerso::__anon10
TCP_INIT	http/HttpConnection.h	/^    TCP_INIT,$/;"	e	enum:tigerso::__anon4
TCP_UNKNOWN	net/Connection.h	/^const ConnectionType TCP_UNKNOWN = 2;$/;"	m	namespace:tigerso
TEST_FILEACCESS	core/File.h	22;"	d
TEST_FILEACCESS	test/File.h	18;"	d
TEST_FILEACCESS	test/HttpFile/File.h	21;"	d
TEST_FILEACCESS	test/sendfile/File.h	18;"	d
TIGERSO_IO_CLOSE	core/tigerso.h	/^    TIGERSO_IO_CLOSE = -2,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_ERROR	core/tigerso.h	/^    TIGERSO_IO_ERROR = -1,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_OK	core/tigerso.h	/^    TIGERSO_IO_OK$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_RECALL	core/tigerso.h	/^    TIGERSO_IO_RECALL,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIMERFD_FD_BASE	net/TimeWheelEvent.h	18;"	d
TIMERFD_READ_SIZE	net/TimeWheelEvent.h	17;"	d
TIMEWHEEL_INTERVAL_SECOND	net/TimeWheelEvent.h	19;"	d
TOKEN	http/lib/http_parser.c	427;"	d	file:
TOKEN	http/lib/http_parser.c	431;"	d	file:
TRANSFER_ENCODING	http/lib/http_parser.c	167;"	d	file:
TS_CORE_BASECLASS_H_	core/BaseClass.h	2;"	d
TS_CORE_CONDITION_H_	core/Condition.h	2;"	d
TS_CORE_CONFIGPARSER_H_	core/ConfigParser.h	2;"	d
TS_CORE_CURRENTTHREAD_H_	core/CurrentThread.h	2;"	d
TS_CORE_DAEMONBASE_H_	core/DaemonBase.h	2;"	d
TS_CORE_DAEMONBASE_H_	test/Daemon.h	2;"	d
TS_CORE_DECHEX_H_	core/Dechex.h	2;"	d
TS_CORE_FILELOCK_H_	core/FileLock.h	2;"	d
TS_CORE_FILE_H_	core/File.h	2;"	d
TS_CORE_FILE_H_	test/HttpFile/File.h	2;"	d
TS_CORE_LOGGING_H_	core/Logging.h	7;"	d
TS_CORE_PTHREAD_H_	core/Thread.h	2;"	d
TS_CORE_RINGBUFFER_H_	test/HttpFile/RingBuffer.h	2;"	d
TS_CORE_SYSUTIL_H_	core/SysUtil.h	2;"	d
TS_CORE_THREADMUTEX_H_	core/ThreadMutex.h	2;"	d
TS_CORE_THREADPOOL_H_	core/ThreadPool.h	2;"	d
TS_CORE_TIGERSO_H_	core/tigerso.h	2;"	d
TS_DNS_DNSRESOLVER_H_	dns/DNSResolver.h	2;"	d
TS_HTTP_HTTPBODYFILE_H_	http/HttpBodyFile.h	2;"	d
TS_HTTP_HTTPCONNECTION_H_	http/HttpConnection.h	2;"	d
TS_HTTP_HTTPFILTER_H_	http/HttpFilter.h	2;"	d
TS_HTTP_HTTPMESSAGE_H_	http/HttpMessage.h	2;"	d
TS_HTTP_HTTPPARSER_H_	http/HttpParser.h	2;"	d
TS_HTTP_HTTPPROXYCONNECTION_H_	http/HttpProxyConnection.h	2;"	d
TS_HTTP_HTTPPROXY_H_	http/HttpProxy.h	2;"	d
TS_HTTP_HTTPREQUEST_H_	http/HttpRequest.h	2;"	d
TS_HTTP_HTTPRESPONSE_H_	http/HttpResponse.h	2;"	d
TS_HTTP_HTTPSERVICE_H_	http/HttpService.h	2;"	d
TS_NET_ACCEPTOR_H_	net/Acceptor.h	2;"	d
TS_NET_ACCEPTOR_H_	test/Acceptor.h	2;"	d
TS_NET_BUFFER_H_	net/Buffer.h	2;"	d
TS_NET_CHANNEL_H_	net/Channel.h	2;"	d
TS_NET_CONNECTIONFACTORY_H_	net/ConnectionFactory.h	2;"	d
TS_NET_CONNECTIONFACTORY_H_	test/ConnectionFactory.h	2;"	d
TS_NET_CONNECTION_H_	net/Connection.h	2;"	d
TS_NET_CONNECTION_H_	test/Connection.h	2;"	d
TS_NET_DNSCACHE_H_	dns/DNSCache.h	2;"	d
TS_NET_EVENTSLOOP_H_	net/EventsLoop.h	2;"	d
TS_NET_RINGBUFFER_H_	net/RingBuffer.h	2;"	d
TS_NET_SOCKETUTIL_H_	net/SocketUtil.h	2;"	d
TS_NET_SOCKET_H_	net/Socket.h	2;"	d
TS_NET_TIMEWHEELEVENT_H_	net/TimeWheelEvent.h	2;"	d
TS_SSL_SSLCONTEXT_H_	ssl/SSLContext.h	2;"	d
TS_SSL_SSLCONTEXT_H_	test/backup/SSLContext.h	2;"	d
TS_SSL_SSLHELPER_H_	ssl/SSLHelper.h	2;"	d
TS_UTIL_FILETYPEDETECTOR_H_	util/FileTypeDetector.h	2;"	d
TS_UTIL_FILETYPEDETECTOR_H_	util/FileTypes/FileTypeDetector.h	2;"	d
Task	core/ThreadPool.h	/^    typedef Thread::ThreadFunc Task;$/;"	t	class:tigerso::ThreadPool
TcpConnection	test/test_http.cpp	/^class TcpConnection {$/;"	c	file:
Test	test/shared_ptr_test.cpp	/^    Test() {}$/;"	f	class:Test
Test	test/shared_ptr_test.cpp	/^class Test: public std::enable_shared_from_this<Test> {$/;"	c	file:
TestConnect	net/SocketUtil.cpp	/^bool SocketUtil::TestConnect(Socket& sock) {$/;"	f	class:tigerso::SocketUtil
Thread	core/Thread.cpp	/^Thread::Thread(const ThreadFunc& func, const std::string& name)$/;"	f	class:tigerso::Thread
Thread	core/Thread.h	/^class Thread: public nocopyable {$/;"	c	namespace:tigerso
ThreadData	core/Thread.cpp	/^    ThreadData(const ThreadFunc& func,$/;"	f	class:tigerso::ThreadData
ThreadData	core/Thread.cpp	/^class ThreadData {$/;"	c	namespace:tigerso	file:
ThreadFunc	core/Thread.cpp	/^    typedef Thread::ThreadFunc ThreadFunc;$/;"	t	class:tigerso::ThreadData	file:
ThreadFunc	core/Thread.h	/^    typedef std::function<void()>  ThreadFunc;$/;"	t	class:tigerso::Thread
ThreadInit	core/Thread.cpp	/^    ThreadInit() {$/;"	f	class:tigerso::initmain__::ThreadInit
ThreadInit	core/Thread.cpp	/^class ThreadInit {$/;"	c	namespace:tigerso::initmain__	file:
ThreadMutex	core/ThreadMutex.h	/^    ThreadMutex()$/;"	f	class:tigerso::ThreadMutex
ThreadMutex	core/ThreadMutex.h	/^class ThreadMutex: public Lock {$/;"	c	namespace:tigerso
ThreadPool	core/ThreadPool.h	/^    explicit ThreadPool(const std::string& name = "ThreadPool")$/;"	f	class:tigerso::ThreadPool
ThreadPool	core/ThreadPool.h	/^class ThreadPool: public nocopyable {$/;"	c	namespace:tigerso
ThreadPtr	core/ThreadPool.h	/^    typedef std::shared_ptr<Thread> ThreadPtr;$/;"	t	class:tigerso::ThreadPool
TimeEvent	test/backup/TimedEvent.h	/^    TimeEvent(const int nodenum = 4): _nodeNum(nodenum) {$/;"	f	class:TimedEvent
TimeNode	net/TimeWheelEvent.h	/^} TimeNode;$/;"	t	class:tigerso::TimeWheelEvent	typeref:struct:tigerso::TimeWheelEvent::_TimeNode_st
TimeNode	test/backup/TimedEvent.h	/^struct TimeNode{$/;"	s
TimeWheelEvent	net/TimeWheelEvent.cpp	/^TimeWheelEvent::TimeWheelEvent(const int nodenum): _nodeNum(nodenum) {$/;"	f	class:tigerso::TimeWheelEvent
TimeWheelEvent	net/TimeWheelEvent.h	/^class TimeWheelEvent: public nocopyable {$/;"	c	namespace:tigerso
TimedEvent	test/backup/TimedEvent.h	/^class TimedEvent {$/;"	c
TimerFd	net/TimeWheelEvent.h	20;"	d
UF_FRAGMENT	http/lib/http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	http/lib/http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	http/lib/http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	http/lib/http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	http/lib/http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	http/lib/http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	http/lib/http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	http/lib/http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
ULLONG_MAX	http/lib/http_parser.c	33;"	d	file:
UNLIKELY	http/lib/http_parser.c	72;"	d	file:
UNLIKELY	http/lib/http_parser.c	75;"	d	file:
UPDATE_STATE	http/lib/http_parser.c	60;"	d	file:
UPGRADE	http/lib/http_parser.c	168;"	d	file:
UPSTREAM_MAX_NUMBER	net/Upstream.h	22;"	d
UPSTREAM_WORK_ADAPTIVE	net/Upstream.h	/^    UPSTREAM_WORK_ADAPTIVE,$/;"	e	enum:tigerso::_UPSTREAM_WORK_MODE_
UPSTREAM_WORK_MODE	net/Upstream.h	/^} UPSTREAM_WORK_MODE;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_UPSTREAM_WORK_MODE_
UPSTREAM_WORK_ROUBDROBIN	net/Upstream.h	/^    UPSTREAM_WORK_ROUBDROBIN,$/;"	e	enum:tigerso::_UPSTREAM_WORK_MODE_
UPSTREAM_WORK_SINGLE	net/Upstream.h	/^    UPSTREAM_WORK_SINGLE,$/;"	e	enum:tigerso::_UPSTREAM_WORK_MODE_
UPSTREAM_WORK_UNKNOWN	net/Upstream.h	/^    UPSTREAM_WORK_UNKNOWN$/;"	e	enum:tigerso::_UPSTREAM_WORK_MODE_
UUID_T	test/http_server.cpp	/^typedef unsigned int UUID_T; $/;"	t	file:
UnassignGuard	core/ThreadMutex.h	/^        UnassignGuard(ThreadMutex& mutex)$/;"	f	class:tigerso::ThreadMutex::UnassignGuard
UnassignGuard	core/ThreadMutex.h	/^    class UnassignGuard {$/;"	c	class:tigerso::ThreadMutex
Unregister	http/HttpMessage.cpp	/^void HttpInSpection::Unregister(const std::string& header, http_role_t role) {$/;"	f	class:tigerso::HttpInSpection
Upstream	net/Upstream.h	/^    Upstream() {}$/;"	f	class:tigerso::Upstream
Upstream	net/Upstream.h	/^class Upstream: public nocopyable {$/;"	c	namespace:tigerso
UpstreamNode	net/Upstream.h	/^struct UpstreamNode{$/;"	s	class:tigerso::Upstream
VERSION	core/tigerso.h	/^const std::string  VERSION     =  "1.0.0";$/;"	m	namespace:tigerso::core
ValidateAddr	net/SocketUtil.cpp	/^bool SocketUtil::ValidateAddr(const std::string& addr) {$/;"	f	class:tigerso::SocketUtil
ValidatePort	net/SocketUtil.cpp	/^bool SocketUtil::ValidatePort(const std::string& sport) {$/;"	f	class:tigerso::SocketUtil
WORKPATH	core/tigerso.h	/^const std::string  WORKPATH    =  "\/usr\/" + PROJECT;$/;"	m	namespace:tigerso::core
WORKPATH	test/Makefile	/^WORKPATH := $(shell cd .. && pwd)$/;"	m
XX	http/lib/http_parser.c	1013;"	d	file:
XX	http/lib/http_parser.c	1034;"	d	file:
XX	http/lib/http_parser.c	176;"	d	file:
XX	http/lib/http_parser.c	178;"	d	file:
XX	http/lib/http_parser.h	157;"	d
XX	http/lib/http_parser.h	159;"	d
XX	http/lib/http_parser.h	208;"	d
XX	http/lib/http_parser.h	210;"	d
_BASE64_H_	http/lib/base64.h	85;"	d
_CHUNKEDATADONE	http/HttpBodyFile.h	/^        _CHUNKEDATADONE,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKEDATAON	http/HttpBodyFile.h	/^        _CHUNKEDATAON,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKEOFDONE	http/HttpBodyFile.h	/^        _CHUNKEOFDONE,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKEOFON	http/HttpBodyFile.h	/^        _CHUNKEOFON,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKFILEDONE	http/HttpBodyFile.h	/^        _CHUNKFILEDONE,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKNULLDONE	http/HttpBodyFile.h	/^        _CHUNKNULLDONE$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKNULLON	http/HttpBodyFile.h	/^        _CHUNKNULLON,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKSIZEDONE	http/HttpBodyFile.h	/^        _CHUNKSIZEDONE,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKSIZEON	http/HttpBodyFile.h	/^        _CHUNKSIZEON,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKUINIT	http/HttpBodyFile.h	/^        _CHUNKUINIT,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNK_SEND_STATE	http/HttpBodyFile.h	/^typedef  enum _CHUNK_SEND_STATE{$/;"	g	class:tigerso::HttpBodyFile
_HTTP_BODY_MODE_	http/HttpBodyFile.h	/^typedef enum _HTTP_BODY_MODE_ {$/;"	g	namespace:tigerso
_OPENSSL_	ssl/SSLContext.cpp	/^namespace _OPENSSL_ {$/;"	n	namespace:tigerso	file:
_OPENSSL_	ssl/SSLContext.h	/^namespace _OPENSSL_{$/;"	n	namespace:tigerso
_SSL_ERROR_CODE	ssl/SSLContext.h	/^typedef enum _SSL_ERROR_CODE {$/;"	g	namespace:tigerso
_SSL_IO_STATE	ssl/SSLContext.h	/^typedef enum _SSL_IO_STATE {$/;"	g	namespace:tigerso
_SSL_MODE_	ssl/SSLContext.h	/^typedef enum _SSL_MODE_ {$/;"	g	namespace:tigerso
_SSL_ROLE_	ssl/SSLContext.h	/^typedef enum _SSL_ROLE_{$/;"	g	namespace:tigerso
_SSL_ROLE_	test/backup/SSLContext.h	/^typedef enum _SSL_ROLE_{$/;"	g
_SSL_version	test/https_lib/Https.h	/^typedef enum _SSL_version {$/;"	g
_TIGERSO_IO_STATE_	core/tigerso.h	/^typedef enum _TIGERSO_IO_STATE_ {$/;"	g	namespace:tigerso
_TMP_CA_PEM_DIR	ssl/scripts/ca_converter.py	/^_TMP_CA_PEM_DIR=".\/tmp_capem\/"$/;"	v
_TS_HTTP_UPSTREAM_H_	net/Upstream.h	2;"	d
_TimeNode_st	net/TimeWheelEvent.h	/^    _TimeNode_st(){ id ++; }$/;"	f	struct:tigerso::TimeWheelEvent::_TimeNode_st
_TimeNode_st	net/TimeWheelEvent.h	/^typedef struct _TimeNode_st{$/;"	s	class:tigerso::TimeWheelEvent
_UPSTREAM_WORK_MODE_	net/Upstream.h	/^typedef enum _UPSTREAM_WORK_MODE_ {$/;"	g	namespace:tigerso
__BACKTRACE_NUM	core/DaemonBase.cpp	24;"	d	file:
__BACKTRACE_NUM	test/DaemonBase.cpp	24;"	d	file:
__CONFIG_FILE	core/DaemonBase.h	13;"	d
__CONFIG_FILE	test/Daemon.h	15;"	d
__DAEMON_NAME	core/DaemonBase.cpp	23;"	d	file:
__DAEMON_NAME	test/DaemonBase.cpp	23;"	d	file:
__child_loop	core/DaemonBase.cpp	/^static bool __child_loop = true;$/;"	m	namespace:tigerso	file:
__child_loop	test/DaemonBase.cpp	/^static bool __child_loop = true;$/;"	m	namespace:tigerso	file:
__childrens	core/DaemonBase.cpp	/^static std::set<pid_t> __childrens;$/;"	m	namespace:tigerso	file:
__childrens	test/DaemonBase.cpp	/^static std::set<pid_t> __childrens;$/;"	m	namespace:tigerso	file:
__daemon_role	core/DaemonBase.cpp	/^static DaemonRole __daemon_role = DAEMON_PARENT;$/;"	m	namespace:tigerso	file:
__daemon_role	test/DaemonBase.cpp	/^static DaemonRole __daemon_role = DAEMON_PARENT;$/;"	m	namespace:tigerso	file:
__del__	test/HttpFile/client.py	/^    def __del__(self):$/;"	m	class:client	file:
__eraseChildPid	core/DaemonBase.cpp	/^void __eraseChildPid(const pid_t pid) {$/;"	f	namespace:tigerso
__eraseChildPid	test/DaemonBase.cpp	/^void __eraseChildPid(const pid_t pid) {$/;"	f	namespace:tigerso
__init__	test/HttpFile/client.py	/^    def __init__(self, addr, port):$/;"	m	class:client
__parent_loop	core/DaemonBase.cpp	/^static bool __parent_loop = true;$/;"	m	namespace:tigerso	file:
__parent_loop	test/DaemonBase.cpp	/^static bool __parent_loop = true;$/;"	m	namespace:tigerso	file:
__reload	core/DaemonBase.cpp	/^static bool __reload = false;$/;"	m	namespace:tigerso	file:
__reload	test/DaemonBase.cpp	/^static bool __reload = false;$/;"	m	namespace:tigerso	file:
__signalHandle	core/DaemonBase.cpp	/^void __signalHandle(int signo) {$/;"	f	namespace:tigerso
__signalHandle	test/DaemonBase.cpp	/^void __signalHandle(int signo) {$/;"	f	namespace:tigerso
__storeChildPid	core/DaemonBase.cpp	/^void __storeChildPid(const pid_t pid) {$/;"	f	namespace:tigerso
__storeChildPid	test/DaemonBase.cpp	/^void __storeChildPid(const pid_t pid) {$/;"	f	namespace:tigerso
_baseID	test/http_server.cpp	/^    static UUID_T _baseID;$/;"	m	class:HttpConnection	file:
_baseID	test/http_server.cpp	/^UUID_T HttpConnection::_baseID = 0;$/;"	m	class:HttpConnection	file:
_buffer	net/RingBuffer.h	/^    char* _buffer;$/;"	m	class:tigerso::RingBuffer
_buffer	test/HttpFile/RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_buffer	test/RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_buffer	test/sendfile/RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_capacity	net/RingBuffer.h	/^    size_t _capacity;$/;"	m	class:tigerso::RingBuffer
_chunkNulldone	test/HttpFile/HttpBodyFile.h	/^        _chunkNulldone$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkNullon	test/HttpFile/HttpBodyFile.h	/^        _chunkNullon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunk_send_state	test/HttpFile/HttpBodyFile.h	/^typedef  enum _chunk_send_state{$/;"	g	class:HttpBodyFile
_chunkedatadone	test/HttpFile/HttpBodyFile.h	/^        _chunkedatadone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkedataon	test/HttpFile/HttpBodyFile.h	/^        _chunkedataon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkeofdone	test/HttpFile/HttpBodyFile.h	/^        _chunkeofdone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkeofon	test/HttpFile/HttpBodyFile.h	/^        _chunkeofon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkfiledone	test/HttpFile/HttpBodyFile.h	/^        _chunkfiledone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunksize	http/HttpBodyFile.h	/^    int _chunksize = HTTP_FILE_CACHE_SIZE;$/;"	m	class:tigerso::HttpBodyFile
_chunksize	test/HttpFile/HttpBodyFile.h	/^    int _chunksize = 4096;$/;"	m	class:HttpBodyFile
_chunksizedone	test/HttpFile/HttpBodyFile.h	/^        _chunksizedone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunksizeon	test/HttpFile/HttpBodyFile.h	/^        _chunksizeon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkstate	http/HttpBodyFile.h	/^    ChunkState _chunkstate = _CHUNKUINIT;$/;"	m	class:tigerso::HttpBodyFile
_chunkstate	test/HttpFile/HttpBodyFile.h	/^    ChunkState _chunkstate = _chunkuinit;$/;"	m	class:HttpBodyFile
_chunkuinit	test/HttpFile/HttpBodyFile.h	/^        _chunkuinit,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_clientSocket	http/HttpProxy.h	29;"	d
_clientSocket	test/backup/http_proxy.cpp	38;"	d	file:
_clientVerifyServerCertCallback	ssl/SSLContext.cpp	/^    int _clientVerifyServerCertCallback(int ok, X509_STORE_CTX* xstore) {$/;"	f	namespace:tigerso::_OPENSSL_
_clientVerifyServerCertCallback	test/backup/SSLContex.h	/^    int _clientVerifyServerCertCallback(int ok, X509_STORE_CTX* xstore) {$/;"	f	namespace:SSLContext
_clientVerifyServerCertCallback	test/https_lib/SSLContext.cpp	/^    int _clientVerifyServerCertCallback(int ok, X509_STORE_CTX* xstore) {$/;"	f	namespace:SSLContext
_connections	test/http_server.cpp	/^    std::map<UUID_T, HTTPCONNECTIONPTR> _connections;$/;"	m	class:HttpServer	file:
_countConnections	test/http_server.cpp	/^    int _countConnections() { return _connections.size() - discardIDs_.size(); }$/;"	f	class:HttpServer	file:
_createListenMaster	test/http_server.cpp	/^    int _createListenMaster(const char* ipaddr, int port) {$/;"	f	class:HttpServer	file:
_current	net/TimeWheelEvent.h	/^    TimeNode* _current= nullptr;$/;"	m	class:tigerso::TimeWheelEvent
_current	net/Upstream.h	/^    UpstreamNode* _current = nullptr;$/;"	m	class:tigerso::Upstream
_current	test/backup/TimedEvent.h	/^    TimeNode* _current= nullptr;$/;"	m	class:TimedEvent
_destoryOpenssl	ssl/SSLContext.cpp	/^    void _destoryOpenssl() {$/;"	f	namespace:tigerso::_OPENSSL_
_dnsSocket	http/HttpProxy.h	31;"	d
_dnsSocket	test/backup/http_proxy.cpp	40;"	d	file:
_eloop	test/http_server.cpp	/^    EventsLoop _eloop;$/;"	m	class:HttpServer	file:
_file	http/HttpBodyFile.h	/^    File _file;$/;"	m	class:tigerso::HttpBodyFile
_file	test/HttpFile/HttpBodyFile.h	/^    File _file;$/;"	m	class:HttpBodyFile
_file	test/sendfile/HttpBodyFile.h	/^    File _file;$/;"	m	class:HttpBodyFile
_head	net/TimeWheelEvent.h	/^    TimeNode* _head = nullptr;$/;"	m	class:tigerso::TimeWheelEvent
_head	test/backup/TimedEvent.h	/^    TimeNode* _head = nullptr;$/;"	m	class:TimedEvent
_host	test/http_server.cpp	/^    const std::string _host;$/;"	m	class:HttpServer	file:
_initClientContext	ssl/SSLContext.cpp	/^    int _initClientContext(const char* trustCAPath, const char* crlPath) {$/;"	f	namespace:tigerso::_OPENSSL_
_initClientContext	test/backup/SSLContex.h	/^    int _initClientContext(const char* trustCAPath, const char* crlPath) {$/;"	f	namespace:SSLContext
_initClientContext	test/https_lib/SSLContext.cpp	/^    int _initClientContext(const char* trustCAPath, const char* crlPath) {$/;"	f	namespace:SSLContext
_initOpenssl	ssl/SSLContext.cpp	/^    void _initOpenssl() {$/;"	f	namespace:tigerso::_OPENSSL_
_initServerContext	ssl/SSLContext.cpp	/^    int _initServerContext(const char* servercert, const char* privatekey) {$/;"	f	namespace:tigerso::_OPENSSL_
_initServerContext	test/backup/SSLContex.h	/^    int _initServerContext(const char* servercert, const char* privatekey) {$/;"	f	namespace:SSLContext
_initServerContext	test/https_lib/SSLContext.cpp	/^    int _initServerContext(const char* servercert, const char* privatekey) {$/;"	f	namespace:SSLContext
_masterSock	test/http_server.cpp	/^    SocketPtr _masterSock;$/;"	m	class:HttpServer	file:
_mode	net/Upstream.h	/^    UPSTREAM_WORK_MODE _mode;$/;"	m	class:tigerso::Upstream
_newConnection	test/http_server.cpp	/^    HTTPCONNECTIONPTR _newConnection() {$/;"	f	class:HttpServer	file:
_nodeNum	net/TimeWheelEvent.h	/^    const int _nodeNum;$/;"	m	class:tigerso::TimeWheelEvent
_nodeNum	test/backup/TimedEvent.h	/^    int _nodeNum = 2;$/;"	m	class:TimedEvent
_ownCert	ssl/SSLContext.h	/^    X509* _ownCert = nullptr;$/;"	m	class:tigerso::SSLContext
_ownCert	test/backup/SSLContex.h	/^    X509* _ownCert = nullptr;$/;"	m	class:HttpsContext
_ownCert	test/backup/SSLContext.h	/^    X509* _ownCert = nullptr;$/;"	m	class:SSLContext
_ownCert	test/https_lib/SSLContext.cpp	/^    X509* _ownCert = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_parser	test/http_server.cpp	/^    HttpParser        _parser;$/;"	m	class:HttpConnection	file:
_peerCert	ssl/SSLContext.h	/^    X509* _peerCert = nullptr;$/;"	m	class:tigerso::SSLContext
_peerCert	test/backup/SSLContex.h	/^    X509* _peerCert = nullptr;$/;"	m	class:HttpsContext
_peerCert	test/backup/SSLContext.h	/^    X509* _peerCert = nullptr;$/;"	m	class:SSLContext
_peerCert	test/https_lib/SSLContext.cpp	/^    X509* _peerCert = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_readoffset	http/HttpBodyFile.h	/^    off_t _readoffset = 0;$/;"	m	class:tigerso::HttpBodyFile
_readoffset	test/HttpFile/HttpBodyFile.h	/^    off_t _readoffset = 0;$/;"	m	class:HttpBodyFile
_readptr	net/RingBuffer.h	/^    char* _readptr;$/;"	m	class:tigerso::RingBuffer
_readptr	test/HttpFile/RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_readptr	test/RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_readptr	test/sendfile/RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_request	test/http_server.cpp	/^    HttpRquest        _request;$/;"	m	class:HttpConnection	file:
_response	test/http_server.cpp	/^    HttpResponse      _response;$/;"	m	class:HttpConnection	file:
_ringbuf	http/HttpBodyFile.h	/^    RingBuffer _ringbuf; \/\/ Cache for file IO$/;"	m	class:tigerso::HttpBodyFile
_ringbuf	test/HttpFile/HttpBodyFile.h	/^    RingBuffer _ringbuf; \/\/ Cache for file$/;"	m	class:HttpBodyFile
_ringbuf	test/sendfile/HttpBodyFile.h	/^    RingBuffer _ringbuf;$/;"	m	class:HttpBodyFile
_role	ssl/SSLContext.h	/^    SSLRole _role = SCTX_ROLE_UNKNOWN;$/;"	m	class:tigerso::SSLContext
_role	test/backup/SSLContex.h	/^    HttpsRole _role = HTTPS_ROLE_UNKNOWN;$/;"	m	class:HttpsContext
_role	test/backup/SSLContext.h	/^    HttpsRole _role = SCTX_ROLE_UNKNOWN;$/;"	m	class:SSLContext
_role	test/https_lib/SSLContext.cpp	/^    HttpsRole _role = HTTPS_ROLE_UNKNOWN;$/;"	m	class:SSLContext::HttpsContext	file:
_root	net/Upstream.h	/^    UpstreamNode* _root = nullptr;$/;"	m	class:tigerso::Upstream
_sendContentDone	http/HttpBodyFile.h	/^    bool _sendContentDone = false;$/;"	m	class:tigerso::HttpBodyFile
_senddone	test/HttpFile/HttpBodyFile.h	/^    bool _senddone = false;$/;"	m	class:HttpBodyFile
_serverSocket	http/HttpProxy.h	30;"	d
_serverSocket	test/backup/http_proxy.cpp	39;"	d	file:
_size	test/HttpFile/RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_size	test/RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_size	test/sendfile/RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_ssl	ssl/SSLContext.h	/^    SSL* _ssl = nullptr;$/;"	m	class:tigerso::SSLContext
_ssl	test/backup/SSLContex.h	/^    SSL* _ssl = nullptr;$/;"	m	class:HttpsContext
_ssl	test/backup/SSLContext.h	/^    SSL* _ssl = nullptr;$/;"	m	class:SSLContext
_ssl	test/https_lib/SSLContext.cpp	/^    SSL* _ssl = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_sslctx	ssl/SSLContext.h	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:tigerso::SSLContext
_sslctx	test/backup/SSLContex.h	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:HttpsContext
_sslctx	test/backup/SSLContext.h	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:SSLContext
_sslctx	test/https_lib/SSLContext.cpp	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_timerfd	net/TimeWheelEvent.h	/^    TimerFd _timerfd;$/;"	m	class:tigerso::TimeWheelEvent
_timerfd	test/backup/TimedEvent.h	/^    int _timerfd = -1;$/;"	m	class:TimedEvent
_uinitClientContext	ssl/SSLContext.cpp	/^    void _uinitClientContext() {$/;"	f	namespace:tigerso::_OPENSSL_
_uinitClientContext	test/backup/SSLContex.h	/^    void _uinitClientContext() {$/;"	f	namespace:SSLContext
_uinitClientContext	test/https_lib/SSLContext.cpp	/^    void _uinitClientContext() {$/;"	f	namespace:SSLContext
_uinitServerContext	ssl/SSLContext.cpp	/^    void _uinitServerContext() {$/;"	f	namespace:tigerso::_OPENSSL_
_uinitServerContext	test/backup/SSLContex.h	/^    void _uinitServerContext() {$/;"	f	namespace:SSLContext
_uinitServerContext	test/https_lib/SSLContext.cpp	/^    void _uinitServerContext() {$/;"	f	namespace:SSLContext
_updateUID	test/http_server.cpp	/^UUID_T HttpConnection::_updateUID() {$/;"	f	class:HttpConnection
_uuid	test/http_server.cpp	/^    UUID_T _uuid = 0;$/;"	m	class:HttpConnection	file:
_writeptr	net/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:tigerso::RingBuffer
_writeptr	test/HttpFile/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
_writeptr	test/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
_writeptr	test/sendfile/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
aa	test/test_thread.cpp	/^int aa = 0;$/;"	v
accept	ssl/SSLContext.cpp	/^int SSLContext::accept() {$/;"	f	class:tigerso::SSLContext
accept	test/backup/SSLContex.h	/^    int accept() {$/;"	f	class:HttpsContext
accept	test/https_lib/SSLContext.cpp	/^    int accept() {$/;"	f	class:SSLContext::HttpsContext
acceptConnections	test/http_server.cpp	/^    int acceptConnections(Socket& master) {$/;"	f	class:HttpServer
acceptHandle	net/Acceptor.cpp	/^int Acceptor::acceptHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
acceptHandle	test/Acceptor.cpp	/^int Acceptor::acceptHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
acceptHandle	test/TCPServerLoop.h	/^    int acceptHandle(Socket& _l) {$/;"	f
acceptHttpClientConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::acceptHttpClientConnection(Socket& master) {$/;"	f	class:tigerso::HttpProxyLoop
acceptHttpClientConnection	test/backup/http_proxy.cpp	/^     int acceptHttpClientConnection(Socket& master) {$/;"	f	class:HttpProxyLoop
acceptMasterSocket	test/test_http.cpp	/^int acceptMasterSocket(SocketPtr& master) {$/;"	f
acceptMutex_	test/TCPServerLoop.h	/^    ShmMutex acceptMutex_;$/;"	v
acceptWaitn_	net/Acceptor.h	/^    int acceptWaitn_ = 0;$/;"	m	class:tigerso::Acceptor
acceptorSet_	http/HttpService.h	/^    std::vector<std::shared_ptr<Acceptor>> acceptorSet_;$/;"	m	class:tigerso::HttpService
acptptr_	net/Connection.h	/^    std::shared_ptr<Acceptor> acptptr_ = nullptr;$/;"	m	class:tigerso::Connection
active	net/Upstream.h	/^    bool active = false;$/;"	m	struct:tigerso::Upstream::UpstreamNode
active	net/Upstream.h	/^    bool active(unsigned int loc) {$/;"	f	class:tigerso::Upstream
active	ssl/SSLContext.cpp	/^bool SSLContext::active() {$/;"	f	class:tigerso::SSLContext
active	test/backup/SSLContex.h	/^    bool active() {$/;"	f	class:HttpsContext
active	test/https_lib/SSLContext.cpp	/^    bool active() {$/;"	f	class:SSLContext::HttpsContext
activeNode	net/Upstream.h	/^    bool activeNode(unsigned int loc, bool on) {$/;"	f	class:tigerso::Upstream
addChannel	net/EventsLoop.cpp	/^int EventsLoop::addChannel(Channel* cnptr) {$/;"	f	class:tigerso::EventsLoop
addData	net/Buffer.cpp	/^size_t Buffer::addData(const char* buf, size_t len) {$/;"	f	class:tigerso::Buffer
addData	net/Buffer.cpp	/^size_t Buffer::addData(const std::string& data) {$/;"	f	class:tigerso::Buffer
addIntoFactory	net/Acceptor.cpp	/^int Acceptor::addIntoFactory(std::shared_ptr<ConnectionFactory>& connfact) {$/;"	f	class:tigerso::Acceptor
addIntoLoop	test/Acceptor.cpp	/^int Acceptor::addIntoLoop(std::shared_ptr<ConnectionFactory>& connfact) {$/;"	f	class:tigerso::Acceptor
additions	dns/DNSResolver.h	/^    unsigned short additions;$/;"	m	struct:tigerso::DNSHeader
addr_	dns/DNSCache.h	/^    char addr_[IPV4_ADDRSIZE] = {0};$/;"	m	struct:tigerso::DNSNode
addr_	net/Socket.h	/^    std::string addr_;$/;"	m	class:tigerso::Socket
adjustPidFileName	core/DaemonBase.cpp	/^int DaemonBase::adjustPidFileName(const std::string& name) {$/;"	f	class:tigerso::DaemonBase
adjustPidFileName	test/DaemonBase.cpp	/^int DaemonBase::adjustPidFileName(const std::string& name) {$/;"	f	class:tigerso::DaemonBase
adjustResources	core/DaemonBase.cpp	/^int DaemonBase::adjustResources() {$/;"	f	class:tigerso::DaemonBase
adjustResources	test/DaemonBase.cpp	/^int DaemonBase::adjustResources() {$/;"	f	class:tigerso::DaemonBase
afterCallback	test/test_http.cpp	/^int afterCallback(SocketPtr& sockptr) {$/;"	f
afterFork	core/Thread.cpp	/^void afterFork() {$/;"	f	namespace:tigerso::initmain__
after_cb	net/Channel.h	/^    EventFunc after_cb = nullptr;$/;"	m	class:tigerso::Channel
align	net/Buffer.cpp	/^int Buffer::align() {$/;"	f	class:tigerso::Buffer
allocID	net/ConnectionFactory.cpp	/^IDType ConnectionFactory::allocID() {$/;"	f	class:tigerso::ConnectionFactory
allocID	test/ConnectionFactory.cpp	/^unsigned int ConnectionFactory::allocID() {$/;"	f	class:tigerso::ConnectionFactory
allocID	test/TCPServerLoop.h	/^    static unsigned int allocID() {$/;"	f	class:tigerso::ConnectionFactory
answer_name_	dns/DNSResolver.h	/^    std::string answer_name_;$/;"	m	class:tigerso::DNSResolver
answer_ttl_	dns/DNSResolver.h	/^    time_t answer_ttl_ = 0;$/;"	m	class:tigerso::DNSResolver
answers	dns/DNSResolver.h	/^    unsigned short answers;$/;"	m	struct:tigerso::DNSHeader
appendBody	http/HttpMessage.cpp	/^void HttpMessage::appendBody(const char* buf, size_t len) { body_.writeIn(buf, len); }$/;"	f	class:tigerso::HttpMessage
appendHeader	http/HttpMessage.cpp	/^void HttpMessage::appendHeader(std::string header, std::string value) {$/;"	f	class:tigerso::HttpMessage
appendWriteIn	core/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:tigerso::File
appendWriteIn	test/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
appendWriteIn	test/HttpFile/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
appendWriteIn	test/sendfile/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
aresPackDNSQuery	dns/DNSResolver.cpp	/^int DNSResolver::aresPackDNSQuery(const char* host, size_t len) {$/;"	f	class:tigerso::DNSResolver
aresResvDNSAnswer	dns/DNSResolver.cpp	/^int DNSResolver::aresResvDNSAnswer() {$/;"	f	class:tigerso::DNSResolver
array	dns/DNSCache.h	/^    DNSNode array[HASH_NODENUM];$/;"	m	struct:tigerso::DNSCacheData
assignHolder	core/ThreadMutex.h	/^    void assignHolder() {$/;"	f	class:tigerso::ThreadMutex
assigned_addr_	dns/DNSResolver.h	/^    std::string assigned_addr_ = "";$/;"	m	class:tigerso::DNSResolver
asyncQueryInit	dns/DNSResolver.cpp	/^int DNSResolver::asyncQueryInit(const std::string& host, Socket& udpsock){$/;"	f	class:tigerso::DNSResolver
asyncQueryStart	dns/DNSResolver.cpp	/^int DNSResolver::asyncQueryStart(EventsLoop& loop, Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
asyncQueryStart	dns/DNSResolver.cpp	/^int DNSResolver::asyncQueryStart(Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
attachHttpMessage	net/Buffer.cpp	/^int Buffer::attachHttpMessage(HttpMessage* msg) {$/;"	f	class:tigerso::Buffer
authorities	dns/DNSResolver.h	/^    unsigned short authorities;$/;"	m	struct:tigerso::DNSHeader
base_	http/HttpProxy.cpp	/^IDTYPE HttpProxyConnection::base_ = 0;$/;"	m	class:tigerso::HttpProxyConnection	file:
base_	http/HttpProxy.h	/^    static IDTYPE base_;$/;"	m	class:tigerso::HttpProxyConnection
base_	test/backup/http_proxy.cpp	/^    static IDTYPE base_;$/;"	m	class:HttpProxyConnection	file:
base_	test/backup/http_proxy.cpp	/^IDTYPE HttpProxyConnection::base_ = 0;$/;"	m	class:HttpProxyConnection	file:
basis_64	http/lib/base64.c	/^static const char basis_64[] =$/;"	v	file:
beforeCallback	test/test_http.cpp	/^int beforeCallback(SocketPtr& sockptr) {$/;"	f
before_cb	net/Channel.h	/^    EventFunc before_cb = nullptr;$/;"	m	class:tigerso::Channel
bigfile_	http/HttpParser.h	/^    bool bigfile_ = false;$/;"	m	class:tigerso::HttpParser
bindSocket	ssl/SSLContext.cpp	/^int SSLContext::bindSocket(int sockfd) {$/;"	f	class:tigerso::SSLContext
bindSocket	test/backup/SSLContex.h	/^    int bindSocket(int sockfd) {$/;"	f	class:HttpsContext
bindSocket	test/https_lib/SSLContext.cpp	/^    int bindSocket(int sockfd) {$/;"	f	class:SSLContext::HttpsContext
blockIO_	net/Socket.h	/^    bool blockIO_ = false;$/;"	m	class:tigerso::Socket
blocking	core/tigerso.h	59;"	d
blocking	test/File.h	15;"	d
blocking	test/HttpFile/File.h	18;"	d
blocking	test/sendfile/File.h	15;"	d
body_	http/HttpMessage.h	/^    HttpBodyFile body_;$/;"	m	class:tigerso::HttpMessage
bodyname_	http/HttpMessage.h	/^    std::string bodyname_;$/;"	m	class:tigerso::HttpMessage
bossZoneHandler	test/HttpFile/index.html	/^	function bossZoneHandler(){$/;"	f
buf	test/HttpFile/client.py	/^        buf = cli.recv()$/;"	v
bufPtr_	net/Socket.h	/^    BufferPtr bufPtr_;$/;"	m	class:tigerso::Socket
buffer	test/test_ringbuffer.cpp	/^char buffer[] = "I am testing RingBuffer cache!";$/;"	v
buffer2	test/test_ringbuffer.cpp	/^char buffer2[] = "padding to fulfill the cache! hahaha";$/;"	v
buffer_	http/HttpParser.h	/^    const char* buffer_;$/;"	m	class:tigerso::HttpParser
buffer_	net/Buffer.h	/^    char* buffer_;$/;"	m	class:tigerso::Buffer
bufsize_	net/Buffer.h	/^    size_t bufsize_;$/;"	m	class:tigerso::Buffer
c_ptr	test/test_mutex.cpp	/^share_count* c_ptr = nullptr;$/;"	v
cacheTid_	core/Thread.cpp	/^   __thread int cacheTid_ = 0;$/;"	m	namespace:tigerso::CurrentThread	file:
cachefile_	dns/DNSCache.cpp	/^std::string DNSCache::cachefile_ = CACHE_FILE_NAME;$/;"	m	class:tigerso::DNSCache	file:
cachefile_	dns/DNSCache.h	/^    static std::string cachefile_; $/;"	m	class:tigerso::DNSCache
cachehitnum	dns/DNSCache.h	/^    volatile size_t cachehitnum;$/;"	m	struct:tigerso::DNSCacheData
calcMd5	dns/DNSCache.cpp	/^static int calcMd5(const char* buf, unsigned char* key, int keylen) {$/;"	f	namespace:tigerso
callback_	dns/DNSResolver.h	/^    DNS_CALLBACK callback_ = nullptr;$/;"	m	class:tigerso::DNSResolver
channelNum_	net/EventsLoop.h	/^    const int channelNum_ = DEFAULT_CHANNEL_NUM;$/;"	m	class:tigerso::EventsLoop
channelptr	net/Socket.h	/^    Channel* channelptr = nullptr;$/;"	m	class:tigerso::Socket
checkImgErr	test/HttpFile/index.html	/^			function checkImgErr(n) {$/;"	f
checkOldDaemon	core/DaemonBase.cpp	/^int DaemonBase::checkOldDaemon() {$/;"	f	class:tigerso::DaemonBase
checkOldDaemon	test/DaemonBase.cpp	/^int DaemonBase::checkOldDaemon() {$/;"	f	class:tigerso::DaemonBase
child	test/test_class.cpp	/^    child() {}$/;"	f	class:child
child	test/test_class.cpp	/^class child: public parent{$/;"	c	file:
childInit	core/DaemonBase.cpp	/^int DaemonBase::childInit() {$/;"	f	class:tigerso::DaemonBase
childInit	test/DaemonBase.cpp	/^int DaemonBase::childInit() {$/;"	f	class:tigerso::DaemonBase
childMaxNum_	core/DaemonBase.h	/^    int childMaxNum_ = 1;$/;"	m	class:tigerso::DaemonBase
childMaxNum_	test/Daemon.h	/^    int childMaxNum_ = 1;$/;"	m	class:tigerso::DaemonBase
childStart	core/DaemonBase.cpp	/^int DaemonBase::childStart() {$/;"	f	class:tigerso::DaemonBase
childStart	test/DaemonBase.cpp	/^int DaemonBase::childStart() {$/;"	f	class:tigerso::DaemonBase
childStop	core/DaemonBase.cpp	/^int DaemonBase::childStop() {$/;"	f	class:tigerso::DaemonBase
childStop	test/DaemonBase.cpp	/^int DaemonBase::childStop() {$/;"	f	class:tigerso::DaemonBase
child_start	test/test_mutex.cpp	/^int child_start() {$/;"	f
chunked	http/HttpBodyFile.h	/^    bool chunked = false; $/;"	m	class:tigerso::HttpBodyFile
chunked	test/HttpFile/HttpBodyFile.h	/^    bool chunked = false; $/;"	m	class:HttpBodyFile
chunked	test/sendfile/HttpBodyFile.h	/^    bool chunked = false; $/;"	m	class:HttpBodyFile
cleanNeedDeletedChannels	net/EventsLoop.cpp	/^int EventsLoop::cleanNeedDeletedChannels() {$/;"	f	class:tigerso::EventsLoop
cleanup_openssl	test/HttpsServer.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	test/https_client.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	test/https_lib/https_client.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	test/https_lib/https_server.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	test/https_server.cpp	/^void cleanup_openssl()$/;"	f
clear	http/HttpMessage.cpp	/^void HttpMessage::clear() {$/;"	f	class:tigerso::HttpMessage
clear	http/HttpProxy.cpp	/^void HttpProxyLoop::clear() {$/;"	f	class:tigerso::HttpProxyLoop
clear	http/HttpRequest.cpp	/^void HttpRequest::clear() {$/;"	f	class:tigerso::HttpRequest
clear	http/HttpResponse.cpp	/^void HttpResponse::clear() {$/;"	f	class:tigerso::HttpResponse
clear	net/Buffer.cpp	/^size_t Buffer::clear() {$/;"	f	class:tigerso::Buffer
clear	net/RingBuffer.cpp	/^void RingBuffer::clear() {$/;"	f	class:tigerso::RingBuffer
clear	test/HttpFile/RingBuffer.h	/^    void clear() {$/;"	f	class:RingBuffer
clear	test/backup/http_proxy.cpp	/^    void clear() {$/;"	f	class:HttpProxyLoop	file:
clearCurrentTimeNode	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::clearCurrentTimeNode() {$/;"	f	class:tigerso::TimeWheelEvent
clearCurrentTimeNode	test/backup/TimedEvent.h	/^    int clearCurrentTimeNode() {$/;"	f	class:TimedEvent
clear_oldPEM	ssl/scripts/build_castore.sh	/^clear_oldPEM () {$/;"	f
cli	test/HttpFile/client.py	/^    cli = client(ip, port)$/;"	v
client	test/HttpFile/client.py	/^class client:$/;"	c
client2close_	http/HttpProxy.h	/^    bool client2close_ = false;$/;"	m	class:tigerso::HttpProxyConnection
client2close_	test/backup/http_proxy.cpp	/^    bool client2close_ = false;$/;"	m	class:HttpProxyConnection	file:
clientCloseHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientCloseHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientCloseHandle	test/backup/http_proxy.cpp	/^  int clientCloseHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientContexts	test/https_lib/Https.h	/^    SSL_CTX* clientContexts[SSL_VERSION_UNKNOW];$/;"	m	class:SSLContextFactory
clientErrorHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientErrorHandle(Socket& client) {  return clientRDHUPHandle(client); }$/;"	f	class:tigerso::HttpProxyConnection
clientErrorHandle	test/backup/http_proxy.cpp	/^    int clientErrorHandle(Socket& client) {  return clientRDHUPHandle(client); }$/;"	f	class:HttpProxyConnection
clientFinalWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientFinalWriteHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientFinalWriteHandle	test/backup/http_proxy.cpp	/^    int clientFinalWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientFirstReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientFirstReadHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientFirstReadHandle	test/backup/http_proxy.cpp	/^    int clientFirstReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientOnlyWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientOnlyWriteHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientOnlyWriteHandle	test/backup/http_proxy.cpp	/^    int clientOnlyWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientRDHUPHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientRDHUPHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientRDHUPHandle	test/backup/http_proxy.cpp	/^    int clientRDHUPHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientReadHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientReadHandle	test/backup/http_proxy.cpp	/^    int clientReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientSafeClose	http/HttpProxy.cpp	/^int HttpProxyConnection::clientSafeClose(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientSafeClose	test/backup/http_proxy.cpp	/^   int clientSafeClose(Socket& client) {$/;"	f	class:HttpProxyConnection
clientTimeoutHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientTimeoutHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientTunnelReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientTunnelReadHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientTunnelReadHandle	test/backup/http_proxy.cpp	/^    int clientTunnelReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientTunnelWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientTunnelWriteHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientTunnelWriteHandle	test/backup/http_proxy.cpp	/^    int clientTunnelWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientWriteHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientWriteHandle	test/backup/http_proxy.cpp	/^    int clientWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientptr_	net/Connection.h	/^    std::shared_ptr<Socket> clientptr_ = nullptr;$/;"	m	class:tigerso::Connection
clientptr_	test/Connection.h	/^    std::shared_ptr<Socket> clientptr_ = nullptr;$/;"	m	class:tigerso::Connection
clientptr_	test/TCPServerLoop.h	/^    SocketPtr clientptr_;$/;"	m	class:tigerso::Connection
clientptr_	test/test_http.cpp	/^    SocketPtr clientptr_ = nullptr;$/;"	m	class:ProxyConnection	file:
clockErrorHandle	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::clockErrorHandle(TimerFd& tfd) {$/;"	f	class:tigerso::TimeWheelEvent
clockEventHandle	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::clockEventHandle(TimerFd& tfd) {$/;"	f	class:tigerso::TimeWheelEvent
clockJump	net/TimeWheelEvent.cpp	/^void TimeWheelEvent::clockJump() {$/;"	f	class:tigerso::TimeWheelEvent
clockJump	test/backup/TimedEvent.h	/^    void clockJump() {$/;"	f	class:TimedEvent
close	core/File.h	/^    int close() { int ret = ::close(fd_); fd_ = -1; }$/;"	f	class:tigerso::File
close	net/Socket.cpp	/^int Socket::close() {$/;"	f	class:tigerso::Socket
close	ssl/SSLContext.cpp	/^int SSLContext::close() {$/;"	f	class:tigerso::SSLContext
close	test/backup/SSLContex.h	/^    int close() {$/;"	f	class:HttpsContext
close	test/https_lib/SSLContext.cpp	/^    int close() {$/;"	f	class:SSLContext::HttpsContext
closeFile	http/HttpBodyFile.cpp	/^int HttpBodyFile::closeFile() {$/;"	f	class:tigerso::HttpBodyFile
closeHandle	http/HttpConnection.cpp	/^int HttpConnection::closeHandle(Socket& sock) {$/;"	f	class:tigerso::HttpConnection
closeHandle	http/HttpProxyConnection.cpp	/^int HttpProxyConnection::closeHandle(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
closeProxy	test/test_http.cpp	/^    void closeProxy() {$/;"	f	class:ProxyConnection
closeProxyConnection	http/HttpProxy.cpp	/^void HttpProxyConnection::closeProxyConnection() {$/;"	f	class:tigerso::HttpProxyConnection
closeProxyConnection	test/backup/http_proxy.cpp	/^    void closeProxyConnection() {$/;"	f	class:HttpProxyConnection
cnt	test/HttpFile/client.py	/^                cnt = cnt + 1$/;"	v
cnt	test/HttpFile/client.py	/^    cnt = 0;$/;"	v
cnt	test/test_dns.cpp	/^static int cnt = 0;$/;"	v	file:
cond_	core/Condition.h	/^    pthread_cond_t cond_;$/;"	m	class:tigerso::Condition
config	test/HttpsServer.cpp	/^void config() {$/;"	f
configMap	core/ConfigParser.h	/^	std::map<std::string, std::map<std::string, std::string> > configMap;$/;"	m	class:tigerso::ConfigParser
configPtr_	core/DaemonBase.h	/^    ConfigParser* configPtr_ = nullptr;$/;"	m	class:tigerso::DaemonBase
configPtr_	test/Daemon.h	/^    ConfigParser* configPtr_ = nullptr;$/;"	m	class:tigerso::DaemonBase
configure_context	test/https_client.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	test/https_lib/https_client.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	test/https_lib/https_server.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	test/https_server.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
connect	ssl/SSLContext.cpp	/^int SSLContext::connect() {$/;"	f	class:tigerso::SSLContext
connect	test/HttpFile/client.py	/^    def connect(self):$/;"	m	class:client
connect	test/backup/SSLContex.h	/^    int connect() {$/;"	f	class:HttpsContext
connect	test/https_lib/SSLContext.cpp	/^    int connect() {$/;"	f	class:SSLContext::HttpsContext
connectionLimit	net/Acceptor.h	/^    int connectionLimit = 1024;$/;"	m	struct:tigerso::ServiceContext
connections_	http/HttpProxy.h	/^    std::map<IDTYPE, HTTPPROXYCONNECTIONPTR> connections_; $/;"	m	class:tigerso::HttpProxyLoop
connections_	net/ConnectionFactory.h	/^    std::map<IDType, std::shared_ptr<Connection>> connections_;$/;"	m	class:tigerso::ConnectionFactory
connections_	test/ConnectionFactory.h	/^    std::map<unsigned int, std::shared_ptr<Connection>> connections_;$/;"	m	class:tigerso::ConnectionFactory
connections_	test/TCPServerLoop.h	/^    std::map<unsigned int, ConnectionPtr> connections_;$/;"	m	class:tigerso::ConnectionFactory
connections_	test/backup/http_proxy.cpp	/^    std::map<IDTYPE, HTTPPROXYCONNECTIONPTR> connections_; $/;"	m	class:HttpProxyLoop	file:
connfact_	test/TCPServerLoop.h	/^    ConnectionFactory* connfact_ = nullptr;$/;"	m	class:tigerso::Connection
connfact_	test/TCPServerLoop.h	/^    ConnectionFactoryPtr connfact_;$/;"	v
connfactptr	test/test_server.cpp	/^std::shared_ptr<ConnectionFactory> connfactptr = std::shared_ptr<ConnectionFactory>(new ConnectionFactory(eloop));$/;"	v
connfactptr_	http/HttpService.h	/^    std::shared_ptr<ConnectionFactory> connfactptr_ = nullptr;$/;"	m	class:tigerso::HttpService
connfactptr_	net/Acceptor.h	/^    std::shared_ptr<ConnectionFactory> connfactptr_ = nullptr;$/;"	m	class:tigerso::Acceptor
connfactptr_	test/Acceptor.h	/^    std::shared_ptr<ConnectionFactory> connfactptr_ = nullptr;$/;"	m	class:tigerso::Acceptor
connfactptr_	test/Connection.h	/^    std::shared_ptr<ConnectionFactory> connfactptr_ = nullptr;$/;"	m	class:tigerso::Connection
contains	net/Upstream.h	/^    UpstreamNode* contains(const char* ip, unsigned int port) {$/;"	f	class:tigerso::Upstream
containsInCurrentTimeNode	net/TimeWheelEvent.cpp	/^bool TimeWheelEvent::containsInCurrentTimeNode(Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
containsInCurrentTimeNode	test/backup/TimedEvent.h	/^    bool containsInCurrentTimeNode(Channel* cnptr) {$/;"	f	class:TimedEvent
content_	core/FileLock.h	/^    std::string content_;$/;"	m	class:tigerso::FileLock
content_encoding	http/HttpBodyFile.h	/^    char content_encoding[1024] = {0};$/;"	m	class:tigerso::HttpBodyFile
content_encoding	test/HttpFile/HttpBodyFile.h	/^    char content_encoding[1024];$/;"	m	class:HttpBodyFile
content_length	http/lib/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser
content_type	http/HttpBodyFile.h	/^    char content_type [1024] = {0};$/;"	m	class:tigerso::HttpBodyFile
content_type	test/HttpFile/HttpBodyFile.h	/^    char content_type [1024];$/;"	m	class:HttpBodyFile
content_type	test/sendfile/HttpBodyFile.h	/^    char content_type [1024];$/;"	m	class:HttpBodyFile
continuousReadOut	core/File.cpp	/^ssize_t File::continuousReadOut(char* buf, size_t len) {$/;"	f	class:tigerso::File
cookie_	util/FileTypeDetector.h	/^    magic_t cookie_ = NULL;$/;"	m	class:tigerso::FileTypeDetector
cookie_	util/FileTypes/FileTypeDetector.h	/^    magic_t cookie_ = NULL;$/;"	m	class:tigerso::util::FileTypeDetector
core	core/tigerso.h	/^namespace core {$/;"	n	namespace:tigerso
coreDumpPrints	core/DaemonBase.cpp	/^void coreDumpPrints() {$/;"	f	namespace:tigerso
coreDumpPrints	test/DaemonBase.cpp	/^void coreDumpPrints() {$/;"	f	namespace:tigerso
count	test/test_mutex.cpp	/^    int count;$/;"	m	struct:share_count	file:
countAlive	test/TCPServerLoop.h	/^    int countAlive() {$/;"	f	class:tigerso::ConnectionFactory
countAliveConnection	net/ConnectionFactory.cpp	/^int ConnectionFactory::countAliveConnection() {$/;"	f	class:tigerso::ConnectionFactory
countAliveConnection	test/ConnectionFactory.cpp	/^int ConnectionFactory::countAliveConnection() {$/;"	f	class:tigerso::ConnectionFactory
countHttpConnections	http/HttpProxy.cpp	/^int HttpProxyLoop::countHttpConnections() {$/;"	f	class:tigerso::HttpProxyLoop
countHttpConnections	test/backup/http_proxy.cpp	/^    int countHttpConnections() {$/;"	f	class:HttpProxyLoop
cparser_	http/HttpProxy.h	/^    HttpParser cparser_;$/;"	m	class:tigerso::HttpProxyConnection
cparser_	test/backup/http_proxy.cpp	/^    HttpParser cparser_;$/;"	m	class:HttpProxyConnection	file:
createConnection	net/ConnectionFactory.cpp	/^std::shared_ptr<Connection>& ConnectionFactory::createConnection(std::shared_ptr<Acceptor>&& acptptr) {$/;"	f	class:tigerso::ConnectionFactory
createConnection	test/ConnectionFactory.cpp	/^std::shared_ptr<Connection>& ConnectionFactory::createConnection(const ConnectionType type) {$/;"	f	class:tigerso::ConnectionFactory
createConnection	test/TCPServerLoop.h	/^    ConnectionPtr createConnection() {$/;"	f	class:tigerso::ConnectionFactory
createEpollBase	net/EventsLoop.cpp	/^int EventsLoop::createEpollBase() {$/;"	f	class:tigerso::EventsLoop
createMasterListening	test/DaemonBase.cpp	/^int DaemonBase::createMasterListening(const std::string& ipaddr, const int port) {$/;"	f	class:tigerso::DaemonBase
createQuery	test/backup/test_ares.cpp	/^    int createQuery(const char* host, unsigned char* buf, size_t len) {$/;"	f	class:AsyncDNSResolver	file:
create_context	test/https_client.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	test/https_lib/https_client.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	test/https_lib/https_server.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	test/https_server.cpp	/^SSL_CTX *create_context()$/;"	f
create_process_shared_memory	core/SysUtil.cpp	/^void* SysUtil::create_process_shared_memory(const string& shm_name, size_t len, bool clear)$/;"	f	class:tigerso::SysUtil
create_socket	test/HttpsServer.cpp	/^int create_socket(int port)$/;"	f
create_socket	test/https_client.cpp	/^int create_socket(Socket& server, const char* host)$/;"	f
create_socket	test/https_lib/https_client.cpp	/^int create_socket(Socket& server, const char* host)$/;"	f
create_socket	test/https_lib/https_server.cpp	/^int create_socket(int port)$/;"	f
create_socket	test/https_server.cpp	/^int create_socket(int port)$/;"	f
csockptr	http/HttpProxy.h	/^    const SocketPtr csockptr;$/;"	m	class:tigerso::HttpProxyConnection
csockptr	test/backup/http_proxy.cpp	/^    const SOCKETPTR csockptr;$/;"	m	class:HttpProxyConnection	file:
ctlChannel	net/EventsLoop.cpp	/^int EventsLoop::ctlChannel(Channel* cnptr, const int op) {$/;"	f	class:tigerso::EventsLoop
ctransaction_	http/HttpProxy.h	/^    HttpTransaction ctransaction_;$/;"	m	class:tigerso::HttpProxyConnection
ctransaction_	test/backup/http_proxy.cpp	/^    HttpTransaction ctransaction_;$/;"	m	class:HttpProxyConnection	file:
cur_	core/File.h	/^    off_t cur_;$/;"	m	class:tigerso::File
cur_	test/File.h	/^    off_t cur_;$/;"	m	class:File
cur_	test/HttpFile/File.h	/^    off_t cur_;$/;"	m	class:File
cur_	test/sendfile/File.h	/^    off_t cur_;$/;"	m	class:File
daemonInit	core/DaemonBase.cpp	/^int DaemonBase::daemonInit() {$/;"	f	class:tigerso::DaemonBase
daemonInit	http/HttpService.h	/^    int daemonInit() {$/;"	f	class:tigerso::HttpService
daemon_role_s	core/DaemonBase.cpp	/^typedef enum daemon_role_s {$/;"	g	namespace:tigerso	file:
daemon_role_s	test/DaemonBase.cpp	/^typedef enum daemon_role_s {$/;"	g	namespace:tigerso	file:
daemonlize	core/DaemonBase.cpp	/^void DaemonBase::daemonlize() {$/;"	f	class:tigerso::DaemonBase
daemonlize	test/DaemonBase.cpp	/^void DaemonBase::daemonlize() {$/;"	f	class:tigerso::DaemonBase
data	http/lib/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser
dbgLog	core/Logging.cpp	/^int Logging::dbgLog(const char* fmt, ...)$/;"	f	class:tigerso::Logging
dec2hex	core/Dechex.cpp	/^const char* dec2hex(unsigned int num) {$/;"	f	namespace:tigerso
dec2hex	test/inter2hex.c	/^const char* dec2hex(unsigned int num) {$/;"	f
decideLineType	core/ConfigParser.cpp	/^int ConfigParser::decideLineType(const std::string& line, std::string& content)$/;"	f	class:tigerso::ConfigParser
defaultResponse403Body	http/HttpMessage.cpp	/^static const std::string defaultResponse403Body = "<html><head><title>TIGERSO NOTIFICATION<\/title><\/head><body><p>You Are Forbidden To Access This Website!<\/p><\/body><\/html>";$/;"	m	namespace:tigerso	file:
defaultResponse503Body	http/HttpMessage.cpp	/^static const std::string defaultResponse503Body = "<html><head><title>TIGERSO NOTIFICATION<\/title><\/head><body><p> Service Unavailable!<\/p><\/body><\/html>";$/;"	m	namespace:tigerso	file:
defaultResponse504Body	http/HttpMessage.cpp	/^static const std::string defaultResponse504Body = "<html><head><title>TIGERSO NOTIFICATION<\/title><\/head><body><p>Gateway Timeout! Please Inspect Your Gateway.<\/p><\/body><\/html>";$/;"	m	namespace:tigerso	file:
defaultResponseDNSErrorBody	http/HttpMessage.cpp	/^static const std::string defaultResponseDNSErrorBody = "<html><head><title>TIGERSO NOTIFICATION<\/title><\/head><body><p>Gateway Timeout! Please Inspect Your Gateway.<\/p><\/body><\/html>";$/;"	m	namespace:tigerso	file:
deleteChannel	test/backup/TimedEvent.h	/^    int deleteChannel(Channel* cnptr) {$/;"	f	class:TimedEvent
deleteChannelFromTimeNode	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::deleteChannelFromTimeNode(TimeNode* node, Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
deleteChannelFromTimeNode	test/backup/TimedEvent.h	/^    int deleteChannelFromTimeNode(TimeNode* node, Channel* cnptr) {$/;"	f	class:TimedEvent
deleteConnection	test/http_server.cpp	/^    int deleteConnection(HTTPCONNECTIONPTR& hcptr) {$/;"	f	class:HttpServer	file:
deleteProxyConnection	test/test_http.cpp	/^bool deleteProxyConnection(SocketPtr& clientptr) {$/;"	f
deleteself	test/backup/deleteself.cc	/^   int  deleteself() {$/;"	f	class:mytest
desc_	http/HttpResponse.h	/^    std::string desc_;$/;"	m	class:tigerso::HttpResponse
description	http/lib/http_parser.c	/^  const char *description;$/;"	m	struct:__anon2	file:
destory	core/DaemonBase.cpp	/^int DaemonBase::destory() {$/;"	f	class:tigerso::DaemonBase
destory	net/TimeWheelEvent.cpp	/^void TimeWheelEvent::destory() {$/;"	f	class:tigerso::TimeWheelEvent
destory	net/Upstream.h	/^    void destory() {$/;"	f	class:tigerso::Upstream
destory	ssl/SSLContext.cpp	/^    void destory() {$/;"	f	namespace:tigerso::_OPENSSL_
destory	ssl/SSLContext.cpp	/^void SSLContext::destory() {$/;"	f	class:tigerso::SSLContext
destory	test/DaemonBase.cpp	/^int DaemonBase::destory() {$/;"	f	class:tigerso::DaemonBase
destory	test/backup/TimedEvent.h	/^    void destory() {$/;"	f	class:TimedEvent
destory	test/https_lib/Https.h	/^    void destory() {$/;"	f	class:SSLContextFactory
destoryHttpProxyPool	test/backup/http_proxy.cpp	/^int destoryHttpProxyPool() {$/;"	f
destoryProxy	test/http_proxy.cpp	/^int destoryProxy() {$/;"	f
destroy	core/FileLock.cpp	/^int FileLock::destroy() {$/;"	f	class:tigerso::FileLock
destroy	core/SysUtil.cpp	/^int SharedMemory::destroy() {$/;"	f	class:tigerso::SharedMemory
destroy	core/SysUtil.cpp	/^int ShmMutex::destroy()$/;"	f	class:tigerso::ShmMutex
destroy	core/ThreadMutex.h	/^    int destroy() {$/;"	f	class:tigerso::ThreadMutex
destroy_process_shared_memory	core/SysUtil.cpp	/^int SysUtil::destroy_process_shared_memory(const string& shm_name, void* ptr, size_t len)$/;"	f	class:tigerso::SysUtil
detectBuffer	util/FileTypeDetector.h	/^    const char* detectBuffer(const char* buffer, size_t len) {$/;"	f	class:tigerso::FileTypeDetector
detectBuffer	util/FileTypes/FileTypeDetector.h	/^    const char* detectBuffer(const char* buffer, size_t len) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFd	util/FileTypeDetector.h	/^    const char* detectFd(const int fd) {$/;"	f	class:tigerso::FileTypeDetector
detectFd	util/FileTypes/FileTypeDetector.h	/^    const char* detectFd(const int fd) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFile	util/FileTypeDetector.h	/^    const char* detectFile(const char* filename) {$/;"	f	class:tigerso::FileTypeDetector
detectFile	util/FileTypeDetector.h	/^    const char* detectFile(const std::string& file) { return detectFile(file.c_str()); }$/;"	f	class:tigerso::FileTypeDetector
detectFile	util/FileTypes/FileTypeDetector.h	/^    const char* detectFile(const char* filename) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFile	util/FileTypes/FileTypeDetector.h	/^    const char* detectFile(const std::string& file) { return detectFile(file.c_str()); }$/;"	f	class:tigerso::util::FileTypeDetector
detectMIMEType	http/HttpMessage.cpp	/^const char* HttpMessage::detectMIMEType(const std::string& filename) {$/;"	f	class:tigerso::HttpMessage
dhs_name	dns/DNSResolver.h	/^    unsigned char* dhs_name;$/;"	m	struct:tigerso::DNSAnswer
disableAllEvent	net/Channel.cpp	/^bool Channel::disableAllEvent() {$/;"	f	class:tigerso::Channel
disableEvent	net/Socket.cpp	/^bool Socket::disableEvent(unsigned short flags) {$/;"	f	class:tigerso::Socket
disableReadEvent	net/Channel.cpp	/^bool Channel::disableReadEvent() {$/;"	f	class:tigerso::Channel
disableReadEvent	net/Socket.cpp	/^bool Socket::disableReadEvent() {$/;"	f	class:tigerso::Socket
disableWriteEvent	net/Channel.cpp	/^bool Channel::disableWriteEvent() {$/;"	f	class:tigerso::Channel
disableWriteEvent	net/Socket.cpp	/^bool Socket::disableWriteEvent() {$/;"	f	class:tigerso::Socket
discardIDs_	http/HttpProxy.h	/^    std::set<IDTYPE> discardIDs_;$/;"	m	class:tigerso::HttpProxyLoop
discardIDs_	test/backup/http_proxy.cpp	/^    std::set<IDTYPE> discardIDs_;$/;"	m	class:HttpProxyLoop	file:
discardIDs_	test/http_server.cpp	/^    std::set<UUID_T> discardIDs_;$/;"	m	class:HttpServer	file:
discardThisHttpProxyConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::discardThisHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:tigerso::HttpProxyLoop
discardThisHttpProxyConnection	test/backup/http_proxy.cpp	/^     int discardThisHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:HttpProxyLoop
dns_	http/HttpProxyConnection.h	/^    DNSResolver dns_;$/;"	m	class:tigerso::HttpProxyConnection
dns_class	dns/DNSResolver.h	/^    unsigned short dns_class;$/;"	m	struct:tigerso::DNSAnswer
dns_class	dns/DNSResolver.h	/^    unsigned short dns_class;$/;"	m	struct:tigerso::DNSQuery
dns_data	dns/DNSResolver.h	/^    char* dns_data;$/;"	m	struct:tigerso::DNSAnswer
dns_name	dns/DNSResolver.h	/^    unsigned char* dns_name;$/;"	m	struct:tigerso::DNSQuery
dns_ttl	dns/DNSResolver.h	/^    unsigned short dns_ttl;$/;"	m	struct:tigerso::DNSAnswer
dns_type	dns/DNSResolver.h	/^    unsigned short dns_type;$/;"	m	struct:tigerso::DNSAnswer
dns_type	dns/DNSResolver.h	/^    unsigned short dns_type;$/;"	m	struct:tigerso::DNSQuery
doGet	http/HttpConnection.cpp	/^void HttpConnection::doGet(HttpRequest& request, HttpResponse& response) {$/;"	f	class:tigerso::HttpConnection
doPost	http/HttpConnection.h	/^    virtual void doPost(HttpRequest&, HttpResponse&) {}$/;"	f	class:tigerso::HttpConnection
dsockptr	http/HttpProxy.h	/^    const SocketPtr dsockptr;$/;"	m	class:tigerso::HttpProxyConnection
dsockptr	test/backup/http_proxy.cpp	/^    const SOCKETPTR dsockptr;$/;"	m	class:HttpProxyConnection	file:
edgeFlag	net/Channel.h	/^        bool edgeFlag;$/;"	m	struct:tigerso::Channel::__anon6
eloop	test/test_http.cpp	/^EventsLoop eloop;$/;"	v
eloop_	http/HttpProxy.h	/^    EventsLoop eloop_;$/;"	m	class:tigerso::HttpProxyLoop
eloop_	test/TCPServerLoop.h	/^    EventsLoopPtr eloop_;$/;"	m	class:tigerso::ConnectionFactory
eloop_	test/TCPServerLoop.h	/^    EventsLoopPtr eloop_;$/;"	v
eloop_	test/backup/http_proxy.cpp	/^    EventsLoop eloop_;$/;"	m	class:HttpProxyLoop	file:
elooptr_	http/HttpProxy.h	/^    EventsLoop* elooptr_ = nullptr;$/;"	m	class:tigerso::HttpProxyConnection
elooptr_	test/backup/http_proxy.cpp	/^    EventsLoop* elooptr_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
empty	net/Upstream.h	/^    int empty() { return nullptr == _root; }$/;"	f	class:tigerso::Upstream
empty	test/HttpFile/client.py	/^    empty = False;$/;"	v
enableEvent	net/Socket.cpp	/^bool Socket::enableEvent(unsigned short flags) {$/;"	f	class:tigerso::Socket
enableReadEvent	net/Channel.cpp	/^bool Channel::enableReadEvent() {$/;"	f	class:tigerso::Channel
enableReadEvent	net/Socket.cpp	/^bool Socket::enableReadEvent() {$/;"	f	class:tigerso::Socket
enableWriteEvent	net/Channel.cpp	/^bool Channel::enableWriteEvent() {$/;"	f	class:tigerso::Channel
enableWriteEvent	net/Socket.cpp	/^bool Socket::enableWriteEvent() {$/;"	f	class:tigerso::Socket
endFile	test/HttpFile/HttpBodyFile.h	/^    void endFile() {$/;"	f	class:HttpBodyFile
endFile	test/sendfile/HttpBodyFile.h	/^    void endFile() {$/;"	f	class:HttpBodyFile
endFmt	core/Logging.h	/^	const std::string endFmt;$/;"	m	class:tigerso::Logging
end_	http/HttpBodyFile.h	/^    ssize_t end_ = -1;$/;"	m	class:tigerso::HttpBodyFile
epevents_	net/EventsLoop.h	/^    epoll_event epevents_[MAX_CHANNEL_NUM];$/;"	m	class:tigerso::EventsLoop
epfd_	net/EventsLoop.h	/^    int epfd_ = -1;$/;"	m	class:tigerso::EventsLoop
epollptr_	net/ConnectionFactory.h	/^    std::shared_ptr<EventsLoop> epollptr_ = nullptr;$/;"	m	class:tigerso::ConnectionFactory
epollptr_	test/ConnectionFactory.h	/^    std::shared_ptr<EventsLoop> epollptr_;$/;"	m	class:tigerso::ConnectionFactory
eraseChannel	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::eraseChannel(Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
eraseHttpProxyConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::eraseHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:tigerso::HttpProxyLoop
eraseHttpProxyConnection	test/backup/http_proxy.cpp	/^    int eraseHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:HttpProxyLoop	file:
erase_func_	http/HttpProxy.h	/^    LOOP_CALLBACK erase_func_ = nullptr;$/;"	m	class:tigerso::HttpProxyConnection
erase_func_	test/backup/http_proxy.cpp	/^    LOOP_CALLBACK erase_func_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
errorCallback	test/test_http.cpp	/^int errorCallback(SocketPtr& sockptr) {$/;"	f
errorHandle	dns/DNSResolver.cpp	/^int DNSResolver::errorHandle(Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
errorHandle	http/HttpConnection.cpp	/^int HttpConnection::errorHandle(Socket& sock){$/;"	f	class:tigerso::HttpConnection
errorHandle	http/HttpProxyConnection.cpp	/^int HttpProxyConnection::errorHandle(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
errorHandle	net/Acceptor.cpp	/^int Acceptor::errorHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
errorHandle	test/Acceptor.cpp	/^int Acceptor::errorHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
errorHandle	test/TCPServerLoop.h	/^    int errorHandle(Socket& _l) {$/;"	f
errorHandleEnter	net/Connection.cpp	/^int Connection::errorHandleEnter(Socket& _l) { return errorHandle(_l); }$/;"	f	class:tigerso::Connection
errorHandleEnter	test/Connection.cpp	/^int Connection::errorHandleEnter(Socket& _l) { return errorHandle(_l); }$/;"	f	class:tigerso::Connection
errorHandleEnter	test/TCPServerLoop.h	/^    int errorHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
error_cb	net/Channel.h	/^    EventFunc error_cb = nullptr;$/;"	m	class:tigerso::Channel
events	net/Channel.h	/^    } events;$/;"	m	class:tigerso::Channel	typeref:struct:tigerso::Channel::__anon6
evf_t	net/Channel.h	/^typedef unsigned int evf_t;$/;"	t	namespace:tigerso
exist	net/Socket.cpp	/^bool Socket::exist() const {$/;"	f	class:tigerso::Socket
expriedAt_	dns/DNSCache.h	/^    time_t expriedAt_ = 0;$/;"	m	struct:tigerso::DNSNode
ext_list	util/FileTypeDetector.h	/^    const char* ext_list;$/;"	m	struct:tigerso::ScanFileType
ext_list	util/FileTypes/FileTypeDetector.h	/^    const char* ext_list;$/;"	m	struct:tigerso::util::ScanFileType
fd_	core/File.h	/^    int fd_;$/;"	m	class:tigerso::File
fd_	core/FileLock.h	/^    int fd_;$/;"	m	class:tigerso::FileLock
fd_	test/File.h	/^    int fd_;$/;"	m	class:File
fd_	test/HttpFile/File.h	/^    int fd_;$/;"	m	class:File
fd_	test/sendfile/File.h	/^    int fd_;$/;"	m	class:File
fetch	net/Upstream.h	/^    int fetch(const char* ip, unsigned int& port) {$/;"	f	class:tigerso::Upstream
fetchUrl	ssl/scripts/ca_converter.py	/^def fetchUrl(url):$/;"	f
field_data	http/lib/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon1
field_set	http/lib/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url
file	test/HttpFile/client.py	/^    file = open(filename, 'w')$/;"	v
filename	core/ConfigParser.h	/^	std::string filename;$/;"	m	class:tigerso::ConfigParser
filename	test/HttpFile/HttpBodyFile.h	/^    char filename[1024];$/;"	m	class:HttpBodyFile
filename	test/HttpFile/client.py	/^    filename = sys.argv[2]$/;"	v
filename	test/sendfile/HttpBodyFile.h	/^    char filename[1024];$/;"	m	class:HttpBodyFile
filename_	core/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH] = {0};$/;"	m	class:tigerso::File
filename_	core/FileLock.h	/^    std::string filename_;$/;"	m	class:tigerso::FileLock
filename_	test/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH];$/;"	m	class:File
filename_	test/HttpFile/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH] = {0};$/;"	m	class:File
filename_	test/sendfile/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH];$/;"	m	class:File
filter	test/http_server.cpp	/^    int filter(HttpRequest& request) {$/;"	f	class:HttpConnection
finalize	http/HttpProxy.cpp	/^void HttpProxyConnection::finalize() {$/;"	f	class:tigerso::HttpProxyConnection
finalize	test/backup/http_proxy.cpp	/^    void finalize() {$/;"	f	class:HttpProxyConnection	file:
flags	dns/DNSResolver.h	/^    unsigned short flags;$/;"	m	struct:tigerso::DNSHeader
flags	http/lib/http_parser.h	/^  unsigned int flags : 8;        \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser
flags	http/lib/http_parser.h	/^enum flags$/;"	g
flushFile	http/HttpBodyFile.cpp	/^void HttpBodyFile::flushFile() {$/;"	f	class:tigerso::HttpBodyFile
forceCloseProxyConnection	http/HttpProxy.cpp	/^void HttpProxyConnection::forceCloseProxyConnection() {$/;"	f	class:tigerso::HttpProxyConnection
forceCloseProxyConnection	test/backup/http_proxy.cpp	/^    void forceCloseProxyConnection() {$/;"	f	class:HttpProxyConnection
func_	core/Thread.cpp	/^    ThreadFunc func_;$/;"	m	class:tigerso::ThreadData	file:
func_	core/Thread.h	/^    ThreadFunc func_;$/;"	m	class:tigerso::Thread
g_DNSCachePtr	dns/DNSResolver.h	/^    DNSCache* g_DNSCachePtr = nullptr; $/;"	m	class:tigerso::DNSResolver
g_client_ssl_ctx	ssl/SSLContext.cpp	/^static SSL_CTX* g_client_ssl_ctx = NULL;$/;"	m	namespace:tigerso::_OPENSSL_	file:
g_client_ssl_ctx	test/backup/SSLContex.h	/^    static SSL_CTX* g_client_ssl_ctx = NULL;$/;"	m	namespace:SSLContext
g_client_ssl_ctx	test/https_lib/SSLContext.cpp	/^    static SSL_CTX* g_client_ssl_ctx = NULL;$/;"	m	namespace:SSLContext	file:
g_config	ssl/SSLContext.cpp	/^ConfigParser* g_config = ConfigParser::getInstance(); $/;"	m	namespace:tigerso::_OPENSSL_	file:
g_config	test/HttpsServer.cpp	/^static ConfigParser* g_config = ConfigParser::getInstance();$/;"	v	file:
g_config	test/backup/SSLContex.h	/^    ConfigParser* g_config = ConfigParser::getInstance(); $/;"	m	namespace:SSLContext
g_config	test/https_lib/SSLContext.cpp	/^    ConfigParser* g_config = ConfigParser::getInstance(); $/;"	m	namespace:SSLContext	file:
g_configini	test/http_proxy.cpp	/^tigerso::ConfigParser* g_configini = nullptr;$/;"	v
g_configini	test/test_server.cpp	/^tigerso::ConfigParser* g_configini = nullptr;$/;"	v
g_httpproxy	test/http_proxy.cpp	/^tigerso::HttpProxyLoop* g_httpproxy = nullptr;$/;"	v
g_httpproxypoolptr	test/backup/http_proxy.cpp	/^HttpProxyLoop* g_httpproxypoolptr = nullptr;$/;"	v
g_log	test/HttpsServer.cpp	/^static Logging* g_log = Logging::getInstance();$/;"	v	file:
g_logging	test/http_proxy.cpp	/^tigerso::Logging* g_logging = nullptr;$/;"	v
g_logging	test/test_server.cpp	/^tigerso::Logging* g_logging = nullptr;$/;"	v
g_server_cert_verify_cb	ssl/SSLContext.cpp	/^static ServerCertVerifyCallback g_server_cert_verify_cb = NULL;$/;"	m	namespace:tigerso::_OPENSSL_	file:
g_server_cert_verify_cb	test/backup/SSLContex.h	/^    static serverCertVerifyCallback g_server_cert_verify_cb = NULL;$/;"	m	namespace:SSLContext
g_server_cert_verify_cb	test/https_lib/SSLContext.cpp	/^    static serverCertVerifyCallback g_server_cert_verify_cb = NULL;$/;"	m	namespace:SSLContext	file:
g_server_ssl_ctx	ssl/SSLContext.cpp	/^static SSL_CTX* g_server_ssl_ctx = NULL;$/;"	m	namespace:tigerso::_OPENSSL_	file:
g_server_ssl_ctx	test/backup/SSLContex.h	/^    static SSL_CTX* g_server_ssl_ctx = NULL;$/;"	m	namespace:SSLContext
g_server_ssl_ctx	test/https_lib/SSLContext.cpp	/^    static SSL_CTX* g_server_ssl_ctx = NULL;$/;"	m	namespace:SSLContext	file:
gain_gap	net/Buffer.h	/^    static const size_t gain_gap = BUFFER_GAP_LENGTH;$/;"	m	class:tigerso::Buffer
gc_	net/ConnectionFactory.h	/^    std::map<ConnectionType, std::queue<IDType>> gc_;$/;"	m	class:tigerso::ConnectionFactory
gc_	test/ConnectionFactory.h	/^    std::map<ConnectionType, std::set<unsigned int>> gc_;$/;"	m	class:tigerso::ConnectionFactory
gc_	test/TCPServerLoop.h	/^    std::set<unsigned int> gc_;$/;"	m	class:tigerso::ConnectionFactory
genRSA	ssl/SSLHelper.cpp	/^static RSA* genRSA(int key_length) {$/;"	f	namespace:tigerso
genSerialNumber	ssl/SSLHelper.cpp	/^static bool genSerialNumber(char* issuer, char* commonName, char* serial, char* newSerial, int len) {$/;"	f	namespace:tigerso
getAllKey	core/ConfigParser.cpp	/^void ConfigParser::getAllKey()$/;"	f	class:tigerso::ConfigParser
getAnswer	dns/DNSResolver.cpp	/^int DNSResolver::getAnswer(std::string& name, time_t& ttl) {$/;"	f	class:tigerso::DNSResolver
getBody	http/HttpMessage.cpp	/^HttpBodyFile* HttpMessage::getBody() { return &body_; }$/;"	f	class:tigerso::HttpMessage
getBodyFileName	http/HttpMessage.cpp	/^std::string& HttpMessage::getBodyFileName() { return bodyname_; }$/;"	f	class:tigerso::HttpMessage
getBodyFileName	http/HttpRequest.cpp	/^std::string& HttpRequest::getBodyFileName() {$/;"	f	class:tigerso::HttpRequest
getClientSSLCTX	ssl/SSLContext.cpp	/^   SSL_CTX* getClientSSLCTX() {$/;"	f	namespace:tigerso::_OPENSSL_
getClientSSLCTX	test/backup/SSLContex.h	/^    SSL_CTX* getClientSSLCTX() {$/;"	f	namespace:SSLContext
getClientSSLCTX	test/https_lib/SSLContext.cpp	/^    SSL_CTX* getClientSSLCTX() {$/;"	f	namespace:SSLContext
getClientSocket	net/Connection.cpp	/^std::shared_ptr<Socket>& Connection::getClientSocket() { return clientptr_; }$/;"	f	class:tigerso::Connection
getClientSocket	test/Connection.cpp	/^std::shared_ptr<Socket>& Connection::getClientSocket() { return clientptr_; }$/;"	f	class:tigerso::Connection
getClientSocketPtr	test/test_http.cpp	/^SocketPtr getClientSocketPtr(SocketPtr& serverptr) {$/;"	f
getContentLength	http/HttpMessage.cpp	/^int HttpMessage::getContentLength() {$/;"	f	class:tigerso::HttpMessage
getDesc	http/HttpMessage.h	/^    virtual std::string getDesc() { return ""; }$/;"	f	class:tigerso::HttpMessage
getDesc	http/HttpResponse.cpp	/^std::string HttpResponse::getDesc() { return desc_; }$/;"	f	class:tigerso::HttpResponse
getEpollBase	net/EventsLoop.cpp	/^int EventsLoop::getEpollBase() const { return epfd_; }$/;"	f	class:tigerso::EventsLoop
getFileLength	test/HttpFile/sendcontent.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileLength	test/HttpFile/sendfile.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileLength	test/sendfile/sendfile.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileSize	core/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:tigerso::File
getFileSize	test/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getFileSize	test/HttpFile/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getFileSize	test/sendfile/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getFormatTime	core/SysUtil.cpp	/^string SysUtil::getFormatTime(const string& fmt){$/;"	f	class:tigerso::SysUtil
getHashkey	dns/DNSCache.cpp	/^hashkey_t DNSCache::getHashkey(const std::string& host, unsigned char* pkey, size_t len) {$/;"	f	class:tigerso::DNSCache
getHeader	http/HttpRequest.cpp	/^std::string& HttpRequest::getHeader() {$/;"	f	class:tigerso::HttpRequest
getHeader	http/HttpResponse.cpp	/^std::string& HttpResponse::getHeader() { $/;"	f	class:tigerso::HttpResponse
getHost	http/HttpRequest.cpp	/^std::string HttpRequest::getHost() {$/;"	f	class:tigerso::HttpRequest
getHostPort	http/HttpRequest.cpp	/^std::string HttpRequest::getHostPort() {$/;"	f	class:tigerso::HttpRequest
getID	http/HttpProxy.cpp	/^const IDTYPE& HttpProxyConnection::getID() { return ID_; }$/;"	f	class:tigerso::HttpProxyConnection
getID	net/Connection.cpp	/^IDType Connection::getID() { return id_; }$/;"	f	class:tigerso::Connection
getID	test/Connection.cpp	/^unsigned int Connection::getID() { return id_; }$/;"	f	class:tigerso::Connection
getID	test/TCPServerLoop.h	/^    unsigned int getID() { return id_; }$/;"	f	class:tigerso::Connection
getID	test/backup/http_proxy.cpp	/^    const IDTYPE& getID() { return ID_; }$/;"	f	class:HttpProxyConnection
getID	test/test_bind.cpp	/^    int& getID() {return id;}$/;"	f	class:nocopy
getIPPort	test/HttpFile/client.py	/^def getIPPort(param):$/;"	f
getInBufferPtr	net/Socket.h	/^    std::shared_ptr<Buffer> getInBufferPtr() const { return bufPtr_.in_.lock(); }$/;"	f	class:tigerso::Socket
getInstance	core/BaseClass.h	/^    static T* getInstance() {$/;"	f	class:tigerso::Singleton
getInstance	core/ConfigParser.cpp	/^ConfigParser* ConfigParser::getInstance()$/;"	f	class:tigerso::ConfigParser
getInstance	core/Logging.cpp	/^Logging* Logging::getInstance()$/;"	f	class:tigerso::Logging
getInstance	dns/DNSCache.cpp	/^DNSCache* DNSCache::getInstance() {$/;"	f	class:tigerso::DNSCache
getKey	test/test_http.cpp	/^    int getKey() { return sockfd_; }$/;"	f	class:ProxyConnection
getLastParsedSize	http/HttpParser.h	/^    size_t getLastParsedSize() { return parsedn_; }$/;"	f	class:tigerso::HttpParser
getLicense	ssl/scripts/ca_converter.py	/^def getLicense(lines, num):$/;"	f
getLogFile	core/Logging.cpp	/^std::string Logging::getLogFile() const$/;"	f	class:tigerso::Logging
getMethod	http/HttpMessage.h	/^    virtual std::string getMethod() { return ""; }$/;"	f	class:tigerso::HttpMessage
getMethod	http/HttpRequest.cpp	/^std::string HttpRequest::getMethod() { return method_; }$/;"	f	class:tigerso::HttpRequest
getNextHashkey	dns/DNSCache.cpp	/^hashkey_t DNSCache::getNextHashkey(const unsigned char* pkey, const size_t len, const offset_t cnt) {$/;"	f	class:tigerso::DNSCache
getOutBufferPtr	net/Socket.h	/^    std::shared_ptr<Buffer> getOutBufferPtr() const { return bufPtr_.out_.lock(); }$/;"	f	class:tigerso::Socket
getParseState	http/HttpParser.h	/^    inline PARSE_STATE getParseState() { return state_; }$/;"	f	class:tigerso::HttpParser
getProxyConnection	test/test_http.cpp	/^ProxyConnection& getProxyConnection(SocketPtr& clientptr) {$/;"	f
getReadIdx	net/Buffer.cpp	/^size_t Buffer::getReadIdx() const {$/;"	f	class:tigerso::Buffer
getReadPtr	net/Buffer.cpp	/^const char* Buffer::getReadPtr() const {$/;"	f	class:tigerso::Buffer
getReadableBytes	net/Buffer.cpp	/^ssize_t Buffer::getReadableBytes() const {$/;"	f	class:tigerso::Buffer
getResponseStatusDesc	http/HttpMessage.cpp	/^std::string HttpHelper::getResponseStatusDesc(const int code) {$/;"	f	class:tigerso::HttpHelper
getRole	http/HttpMessage.cpp	/^http_role_t HttpMessage::getRole() { return role_; }$/;"	f	class:tigerso::HttpMessage
getRole	net/Socket.cpp	/^socket_role_t Socket::getRole() const {$/;"	f	class:tigerso::Socket
getServerSSLCTX	ssl/SSLContext.cpp	/^    SSL_CTX* getServerSSLCTX() {$/;"	f	namespace:tigerso::_OPENSSL_
getServerSSLCTX	test/backup/SSLContex.h	/^    SSL_CTX* getServerSSLCTX() {$/;"	f	namespace:SSLContext
getServerSSLCTX	test/https_lib/SSLContext.cpp	/^    SSL_CTX* getServerSSLCTX() {$/;"	f	namespace:SSLContext
getServerSocketPtr	test/test_http.cpp	/^SocketPtr getServerSocketPtr(SocketPtr& clientptr) {$/;"	f
getServiceHost	net/Acceptor.h	/^    const std::string& getServiceHost() { return service_.host; }$/;"	f	class:tigerso::Acceptor
getServiceRoot	net/Acceptor.h	/^    const std::string& getServiceRoot() { return service_.rootDir;  }$/;"	f	class:tigerso::Acceptor
getShmPtr	dns/DNSCache.cpp	/^DNSCacheData* DNSCache::getShmPtr() {$/;"	f	class:tigerso::DNSCache
getSockAddr	net/Socket.cpp	/^int Socket::getSockAddr(sockaddr_in& inaddr) {$/;"	f	class:tigerso::Socket
getSocket	net/Socket.cpp	/^socket_t Socket::getSocket() const {$/;"	f	class:tigerso::Socket
getSocketPtr	net/Channel.cpp	/^Socket* Channel::getSocketPtr() const {$/;"	f	class:tigerso::Channel
getStage	net/Socket.cpp	/^socket_stage_t Socket::getStage() const {$/;"	f	class:tigerso::Socket
getStatuscode	http/HttpMessage.h	/^    virtual int         getStatuscode() { return -1; }$/;"	f	class:tigerso::HttpMessage
getStatuscode	http/HttpResponse.cpp	/^int HttpResponse::getStatuscode() { return statuscode_; }$/;"	f	class:tigerso::HttpResponse
getStickDNSNode	dns/DNSCache.cpp	/^int DNSCache::getStickDNSNode(const std::string& host, std::string& ip) {$/;"	f	class:tigerso::DNSCache
getStrAddr	net/Socket.cpp	/^std::string Socket::getStrAddr() const {$/;"	f	class:tigerso::Socket
getStrErr	http/HttpParser.h	/^    const char* getStrErr() { return http_errno_description(HTTP_PARSER_ERRNO(&parser_)); }$/;"	f	class:tigerso::HttpParser
getStrPort	net/Socket.cpp	/^std::string Socket::getStrPort() const {$/;"	f	class:tigerso::Socket
getThreadMutex	core/ThreadMutex.h	/^    pthread_mutex_t* getThreadMutex() {$/;"	f	class:tigerso::ThreadMutex
getTime	core/Logging.cpp	/^std::string Logging::getTime()$/;"	f	class:tigerso::Logging
getTimeoutCallback	net/Channel.cpp	/^EventFunc Channel::getTimeoutCallback() {$/;"	f	class:tigerso::Channel
getType	http/HttpProxyConnection.h	/^    ConnectionType getType() { return HTTP_PROXY_CONNECTION; }$/;"	f	class:tigerso::HttpProxyConnection
getType	net/Acceptor.cpp	/^ConnectionType Acceptor::getType() {$/;"	f	class:tigerso::Acceptor
getType	net/Connection.cpp	/^ConnectionType Connection::getType() { return acptptr_->getType(); }  $/;"	f	class:tigerso::Connection
getType	test/Connection.h	/^    virtual ConnectionType getType() { return TCP_UNKNOW; }$/;"	f	class:tigerso::Connection
getUid	test/http_server.cpp	/^    UUID_T getUid() { return _uuid; }$/;"	f	class:HttpConnection
getUrl	http/HttpMessage.h	/^    virtual std::string getUrl() { return ""; }$/;"	f	class:tigerso::HttpMessage
getUrl	http/HttpRequest.cpp	/^std::string HttpRequest::getUrl() { return url_; }$/;"	f	class:tigerso::HttpRequest
getValueByHeader	http/HttpMessage.cpp	/^std::string HttpMessage::getValueByHeader(const std::string& header) {$/;"	f	class:tigerso::HttpMessage
getValueByKey	core/ConfigParser.cpp	/^std::string ConfigParser::getValueByKey(const std::string& section, const std::string& key)$/;"	f	class:tigerso::ConfigParser
getVersion	http/HttpMessage.cpp	/^std::string HttpMessage::getVersion() { return version_; };$/;"	f	class:tigerso::HttpMessage
getWriteIdx	net/Buffer.cpp	/^size_t Buffer::getWriteIdx() const {$/;"	f	class:tigerso::Buffer
get_shm_mutex	core/SysUtil.cpp	/^shm_mutex_t* ShmMutex::get_shm_mutex() const$/;"	f	class:tigerso::ShmMutex
get_shm_name	core/SysUtil.cpp	/^string ShmMutex::get_shm_name() const$/;"	f	class:tigerso::ShmMutex
get_shm_ptr	core/SysUtil.cpp	/^void* SharedMemory::get_shm_ptr() const {$/;"	f	class:tigerso::SharedMemory
get_work_path	core/SysUtil.cpp	/^string SysUtil::get_work_path()$/;"	f	class:tigerso::SysUtil
group	util/FileTypeDetector.h	/^    const char* group;$/;"	m	struct:tigerso::ScanFileType
group	util/FileTypes/FileTypeDetector.h	/^    const char* group;$/;"	m	struct:tigerso::util::ScanFileType
h_C	http/lib/http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	http/lib/http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	http/lib/http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	http/lib/http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	http/lib/http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	http/lib/http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_connection_upgrade	http/lib/http_parser.c	/^  , h_connection_upgrade$/;"	e	enum:header_states	file:
h_content_length	http/lib/http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_general	http/lib/http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	http/lib/http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	http/lib/http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	http/lib/http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_connection_token	http/lib/http_parser.c	/^  , h_matching_connection_token$/;"	e	enum:header_states	file:
h_matching_connection_token_start	http/lib/http_parser.c	/^  , h_matching_connection_token_start$/;"	e	enum:header_states	file:
h_matching_connection_upgrade	http/lib/http_parser.c	/^  , h_matching_connection_upgrade$/;"	e	enum:header_states	file:
h_matching_content_length	http/lib/http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	http/lib/http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	http/lib/http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	http/lib/http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	http/lib/http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	http/lib/http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	http/lib/http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	http/lib/http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
handle	core/DaemonBase.cpp	/^    void(*handle)(int);$/;"	m	struct:tigerso::SignalHandleSet	file:
hash_caPEM	ssl/scripts/build_castore.sh	/^hash_caPEM() {$/;"	f
hashkey_t	dns/DNSCache.h	/^typedef unsigned short hashkey_t;$/;"	t	namespace:tigerso
headerCompleted	http/HttpParser.h	/^    bool headerCompleted() {  return (state_ >= PARSE_HEADER_COMPLETE? true : false); }$/;"	f	class:tigerso::HttpParser
header_field	http/HttpMessage.h	/^    std::string header_field;$/;"	m	class:tigerso::HttpMessage
header_state	http/lib/http_parser.h	/^  unsigned int header_state : 7; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser
header_states	http/lib/http_parser.c	/^enum header_states$/;"	g	file:
headers_	http/HttpMessage.h	/^    headers_t headers_;$/;"	m	class:tigerso::HttpMessage
headers_t	http/HttpMessage.h	/^typedef std::vector<std::pair<std::string,std::string>> headers_t;$/;"	t	namespace:tigerso
headstr_	http/HttpMessage.h	/^    std::string headstr_;$/;"	m	class:tigerso::HttpMessage
hex2dec	core/Dechex.cpp	/^unsigned int hex2dec(const char* hex) {$/;"	f	namespace:tigerso
hex2dec	test/inter2hex.c	/^unsigned int hex2dec(const char* hex) {$/;"	f
hexstrbuf	core/Dechex.cpp	/^static char hexstrbuf[9] = {0};$/;"	m	namespace:tigerso	file:
hexstrbuf	test/inter2hex.c	/^static char hexstrbuf[9] = {0};$/;"	v	file:
holder_	core/ThreadMutex.h	/^    pid_t holder_ = 0;$/;"	m	class:tigerso::ThreadMutex
host	net/Acceptor.h	/^    std::string host; \/\/only for host services, i.e. Http Service $/;"	m	struct:tigerso::ServiceContext
host_	dns/DNSCache.h	/^    char host_[HOST_MAXLENGTH] = {0};$/;"	m	struct:tigerso::DNSNode
host_	http/HttpRequest.h	/^    std::string host_;$/;"	m	class:tigerso::HttpRequest
host_	test/test_http.cpp	/^    string host_;$/;"	m	class:ProxyConnection	file:
httpInspectCallback	http/HttpMessage.h	/^typedef int (*httpInspectCallback)(const std::weak_ptr<HttpMessage>&);$/;"	t	namespace:tigerso
http_body_is_final	http/lib/http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f
http_cb	http/lib/http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t
http_data_cb	http/lib/http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t
http_errno	http/lib/http_parser.h	/^  unsigned int http_errno : 7;$/;"	m	struct:http_parser
http_errno	http/lib/http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	http/lib/http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f
http_errno_name	http/lib/http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f
http_host_state	http/lib/http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	http/lib/http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser
http_message_needs_eof	http/lib/http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f
http_method	http/lib/http_parser.h	/^enum http_method$/;"	g
http_method_str	http/lib/http_parser.c	/^http_method_str (enum http_method m)$/;"	f
http_minor	http/lib/http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser
http_parse_host	http/lib/http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	file:
http_parse_host_char	http/lib/http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	file:
http_parser	http/lib/http_parser.h	/^struct http_parser {$/;"	s
http_parser	http/lib/http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser_execute	http/lib/http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f
http_parser_h	http/lib/http_parser.h	22;"	d
http_parser_init	http/lib/http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f
http_parser_is_chunked	http/lib/http_parser.c	/^http_parser_is_chunked(const struct http_parser *parser) {$/;"	f
http_parser_parse_url	http/lib/http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f
http_parser_pause	http/lib/http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f
http_parser_settings	http/lib/http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	http/lib/http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_settings_init	http/lib/http_parser.c	/^http_parser_settings_init(http_parser_settings *settings)$/;"	f
http_parser_type	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	http/lib/http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	http/lib/http_parser.h	/^enum http_parser_url_fields$/;"	g
http_parser_url_init	http/lib/http_parser.c	/^http_parser_url_init(struct http_parser_url *u) {$/;"	f
http_parser_version	http/lib/http_parser.c	/^http_parser_version(void) {$/;"	f
http_role_t	http/HttpMessage.h	/^typedef int http_role_t;$/;"	t	namespace:tigerso
http_should_keep_alive	http/lib/http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f
http_status	http/lib/http_parser.h	/^enum http_status$/;"	g
http_strerror_tab	http/lib/http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon2	file:
httpproxypool	test/test_http.cpp	/^vector<ProxyConnection> httpproxypool;$/;"	v
hupFlag	net/Channel.h	/^        bool hupFlag;$/;"	m	struct:tigerso::Channel::__anon6
id	dns/DNSResolver.h	/^    unsigned short id;$/;"	m	struct:tigerso::DNSHeader
id	net/TimeWheelEvent.h	/^    int id = 0;$/;"	m	struct:tigerso::TimeWheelEvent::_TimeNode_st
id	test/test_bind.cpp	/^  int id = 0;  $/;"	m	class:nocopy	file:
id_	net/Connection.h	/^    const IDType id_;$/;"	m	class:tigerso::Connection
id_	test/Connection.h	/^    unsigned int id_;$/;"	m	class:tigerso::Connection
id_	test/TCPServerLoop.h	/^    unsigned int id_;$/;"	m	class:tigerso::Connection
idbase_	net/ConnectionFactory.cpp	/^IDType ConnectionFactory::idbase_ = 0;$/;"	m	class:tigerso::ConnectionFactory	file:
idbase_	net/ConnectionFactory.h	/^    static IDType idbase_;$/;"	m	class:tigerso::ConnectionFactory
idbase_	test/ConnectionFactory.cpp	/^unsigned int ConnectionFactory::idbase_ = 0;$/;"	m	class:tigerso::ConnectionFactory	file:
idbase_	test/ConnectionFactory.h	/^    static unsigned int idbase_;$/;"	m	class:tigerso::ConnectionFactory
idbase_	test/TCPServerLoop.h	/^    static unsigned int idbase_;$/;"	m	class:tigerso::ConnectionFactory
idbase_	test/TCPServerLoop.h	/^unsigned int ConnectionFactory::idbase_ = 0;$/;"	m	class:tigerso::ConnectionFactory
inBuffer_	net/Socket.h	/^    std::shared_ptr<Buffer> inBuffer_ = std::make_shared<Buffer>();$/;"	m	class:tigerso::Socket
in_	net/Socket.h	/^    std::weak_ptr<Buffer> in_;$/;"	m	struct:tigerso::BufferPtr
inactve	net/Upstream.h	/^    bool inactve(unsigned int loc) {$/;"	f	class:tigerso::Upstream
index	http/lib/http_parser.h	/^  unsigned int index : 7;        \/* index into current matcher *\/$/;"	m	struct:http_parser
info	test/backup/deleteself.cc	/^    int info() { cout << "haha, not see me" << endl;}$/;"	f	class:mytest
infoLog	core/Logging.cpp	/^int Logging::infoLog(const char* fmt, ...)$/;"	f	class:tigerso::Logging
init	core/FileLock.cpp	/^int FileLock::init() {$/;"	f	class:tigerso::FileLock
init	core/SysUtil.cpp	/^int SharedMemory::init() {$/;"	f	class:tigerso::SharedMemory
init	core/SysUtil.cpp	/^int ShmMutex::init()$/;"	f	class:tigerso::ShmMutex
init	core/Thread.cpp	/^ThreadInit init;$/;"	m	namespace:tigerso::initmain__	file:
init	core/ThreadMutex.h	/^    int init() {$/;"	f	class:tigerso::ThreadMutex
init	dns/DNSCache.cpp	/^void DNSCache::init() {$/;"	f	class:tigerso::DNSCache
init	net/TimeWheelEvent.cpp	/^void TimeWheelEvent::init() {$/;"	f	class:tigerso::TimeWheelEvent
init	ssl/SSLContext.cpp	/^    void init() {$/;"	f	namespace:tigerso::_OPENSSL_
init	ssl/SSLContext.cpp	/^int SSLContext::init(SSLRole role) {$/;"	f	class:tigerso::SSLContext
init	test/backup/SSLContex.h	/^    int init(int role) {$/;"	f	class:HttpsContext
init	test/backup/TimedEvent.h	/^    void init() {$/;"	f	class:TimedEvent
init	test/https_lib/SSLContext.cpp	/^    int init(int role) {$/;"	f	class:SSLContext::HttpsContext
init	util/FileTypeDetector.h	/^    int init(int flags = MAGIC_MIME_TYPE) {$/;"	f	class:tigerso::FileTypeDetector
init	util/FileTypes/FileTypeDetector.h	/^    int init(int flags = MAGIC_MIME_TYPE) {$/;"	f	class:tigerso::util::FileTypeDetector
initHttpProxyPool	test/backup/http_proxy.cpp	/^int initHttpProxyPool(const char* ipaddr, const int port) {$/;"	f
initListenConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::initListenConnection() {$/;"	f	class:tigerso::HttpProxyLoop
initListenConnection	test/backup/http_proxy.cpp	/^    int initListenConnection() {$/;"	f	class:HttpProxyLoop
initParser	http/HttpParser.cpp	/^int HttpParser::initParser(HttpMessage& message) {$/;"	f	class:tigerso::HttpParser
initProxy	test/http_proxy.cpp	/^int initProxy() {$/;"	f
initService	net/Acceptor.cpp	/^int Acceptor::initService(const ServiceContext& service) {$/;"	f	class:tigerso::Acceptor
init_openssl	test/HttpsServer.cpp	/^void init_openssl()$/;"	f
init_openssl	test/https_client.cpp	/^void init_openssl()$/;"	f
init_openssl	test/https_lib/https_client.cpp	/^void init_openssl()$/;"	f
init_openssl	test/https_lib/https_server.cpp	/^void init_openssl()$/;"	f
init_openssl	test/https_server.cpp	/^void init_openssl()$/;"	f
initilize	core/DaemonBase.cpp	/^int DaemonBase::initilize() {$/;"	f	class:tigerso::DaemonBase
initilize	test/DaemonBase.cpp	/^int DaemonBase::initilize() {$/;"	f	class:tigerso::DaemonBase
initilize	test/https_lib/Https.h	/^    void initilize() {$/;"	f	class:SSLContextFactory
initmain__	core/Thread.cpp	/^namespace initmain__ {$/;"	n	namespace:tigerso	file:
insertHttpProxyConnectionPtr	http/HttpProxy.cpp	/^int HttpProxyLoop::insertHttpProxyConnectionPtr(HTTPPROXYCONNECTIONPTR& hcptr) {$/;"	f	class:tigerso::HttpProxyLoop
insertHttpProxyConnectionPtr	test/backup/http_proxy.cpp	/^    int insertHttpProxyConnectionPtr(HTTPPROXYCONNECTIONPTR& hcptr) {$/;"	f	class:HttpProxyLoop	file:
insertNode	net/Upstream.h	/^    UpstreamNode* insertNode(const char* ip, unsigned int port)  {$/;"	f	class:tigerso::Upstream
int16_t	http/lib/http_parser.h	/^typedef __int16 int16_t;$/;"	t
int32_t	http/lib/http_parser.h	/^typedef __int32 int32_t;$/;"	t
int64_t	http/lib/http_parser.h	/^typedef __int64 int64_t;$/;"	t
int8_t	http/lib/http_parser.h	/^typedef __int8 int8_t;$/;"	t
inter2HexString	http/HttpBodyFile.cpp	/^std::string HttpBodyFile::inter2HexString(int num) {$/;"	f	class:tigerso::HttpBodyFile
inter2HexString	test/HttpFile/HttpBodyFile.h	/^    std::string inter2HexString(int num) {$/;"	f	class:HttpBodyFile
ipaddr_	http/HttpProxy.h	/^    const std::string ipaddr_;$/;"	m	class:tigerso::HttpProxyLoop
ipaddr_	net/Acceptor.h	/^    const std::string ipaddr_;$/;"	m	class:tigerso::Acceptor
ipaddr_	test/Acceptor.h	/^    const std::string ipaddr_;$/;"	m	class:tigerso::Acceptor
ipaddr_	test/TCPServerLoop.h	/^    const std::string ipaddr_;$/;"	v
ipaddr_	test/backup/http_proxy.cpp	/^    const std::string ipaddr_;$/;"	m	class:HttpProxyLoop	file:
isBigFile	http/HttpParser.h	/^    bool isBigFile() { return bigfile_; }$/;"	f	class:tigerso::HttpParser
isCertTrusted	ssl/scripts/ca_converter.py	/^def isCertTrusted(cert, trusts, explicitTrustOnly, trustServerAuth,$/;"	f
isClientAlive	http/HttpProxy.h	/^    bool isClientAlive() { return _clientSocket.exist(); }$/;"	f	class:tigerso::HttpProxyConnection
isClientAlive	test/backup/http_proxy.cpp	/^    bool isClientAlive() { return _clientSocket.exist(); }$/;"	f	class:HttpProxyConnection	file:
isEmpty	net/RingBuffer.cpp	/^bool RingBuffer::isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:tigerso::RingBuffer
isEmpty	test/HttpFile/RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isEmpty	test/RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isEmpty	test/sendfile/RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isFileExisted	core/ConfigParser.h	/^	bool isFileExisted;$/;"	m	class:tigerso::ConfigParser
isFull	core/ThreadPool.h	/^    bool isFull() const {$/;"	f	class:tigerso::ThreadPool
isFull	net/RingBuffer.cpp	/^bool RingBuffer::isFull() { return (space() == 0); }$/;"	f	class:tigerso::RingBuffer
isFull	test/HttpFile/RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isFull	test/RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isFull	test/sendfile/RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isListening	net/Socket.h	/^    bool isListening() { if(exist() && listening) {return true;} return false; }$/;"	f	class:tigerso::Socket
isLocked	core/SysUtil.h	/^    bool isLocked() const {$/;"	f	class:tigerso::LockTryGuard
isLocked	core/SysUtil.h	/^    bool isLocked() { return locked_ ; }$/;"	f	class:tigerso::ShmMutex
isLockedByCurrentThread	core/ThreadMutex.h	/^    bool isLockedByCurrentThread() const {$/;"	f	class:tigerso::ThreadMutex
isMainThread	core/CurrentThread.h	/^   inline bool isMainThread() { return CurrentThread::tid() == getpid(); }$/;"	f	namespace:tigerso::CurrentThread
isNIO	net/Socket.cpp	/^bool Socket::isNIO() const {$/;"	f	class:tigerso::Socket
isNodeUsed	dns/DNSCache.cpp	/^bool DNSCache::isNodeUsed(DNSNode& node) {$/;"	f	class:tigerso::DNSCache
isProcessNeedReload	core/DaemonBase.cpp	/^bool DaemonBase::isProcessNeedReload() { return __reload; }$/;"	f	class:tigerso::DaemonBase
isProcessNeedReload	test/DaemonBase.cpp	/^bool DaemonBase::isProcessNeedReload() { return __reload; }$/;"	f	class:tigerso::DaemonBase
isProcessNeedStop	core/DaemonBase.cpp	/^bool DaemonBase::isProcessNeedStop() { return __child_loop; }$/;"	f	class:tigerso::DaemonBase
isProcessNeedStop	test/DaemonBase.cpp	/^bool DaemonBase::isProcessNeedStop() { return __child_loop; }$/;"	f	class:tigerso::DaemonBase
isReadDone	core/File.h	/^    bool isReadDone() { return readdone_; }$/;"	f	class:tigerso::File
isRefreshed	core/ConfigParser.h	/^	bool isRefreshed;$/;"	m	class:tigerso::ConfigParser
isSSL	net/Socket.h	/^    bool isSSL() { return sctx.active(); }$/;"	f	class:tigerso::Socket
isSendDone	net/Buffer.h	/^    bool isSendDone() { $/;"	f	class:tigerso::Buffer
isServerAlive	http/HttpProxy.h	/^    bool isServerAlive() { return _serverSocket.exist(); }$/;"	f	class:tigerso::HttpProxyConnection
isServerAlive	test/backup/http_proxy.cpp	/^    bool isServerAlive() { return _serverSocket.exist(); }$/;"	f	class:HttpProxyConnection	file:
isSkipChannel	net/TimeWheelEvent.cpp	/^bool TimeWheelEvent::isSkipChannel(Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
isVaildResponseStatusCode	http/HttpMessage.cpp	/^bool HttpHelper::isVaildResponseStatusCode(const int code) {$/;"	f	class:tigerso::HttpHelper
join	core/Thread.cpp	/^int Thread::join() {$/;"	f	class:tigerso::Thread
joined_	core/Thread.h	/^    bool joined_ = false;$/;"	m	class:tigerso::Thread
keepFlag	net/Channel.h	/^        bool keepFlag;$/;"	m	struct:tigerso::Channel::__anon6
keepalive	http/HttpMessage.cpp	/^bool HttpMessage::keepalive() { $/;"	f	class:tigerso::HttpMessage
keepalive_	http/HttpProxy.h	/^    bool keepalive_ = true;$/;"	m	class:tigerso::HttpProxyConnection
keepalive_	test/backup/http_proxy.cpp	/^    bool keepalive_ = true;$/;"	m	class:HttpProxyConnection	file:
key_	dns/DNSCache.h	/^    unsigned char key_[MD5_KEYSIZE] = {0};$/;"	m	struct:tigerso::DNSNode
killAllChildren	core/DaemonBase.cpp	/^int DaemonBase::killAllChildren() {$/;"	f	class:tigerso::DaemonBase
killAllChildren	test/DaemonBase.cpp	/^int DaemonBase::killAllChildren() {$/;"	f	class:tigerso::DaemonBase
labelBigFile	http/HttpParser.h	/^    bool labelBigFile() { bigfile_ = true; }$/;"	f	class:tigerso::HttpParser
least_len	net/Buffer.h	/^    static const size_t least_len = BUFFER_LEAST_LENGTH;$/;"	m	class:tigerso::Buffer
len	http/lib/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon1
length_	http/HttpParser.h	/^    size_t length_;$/;"	m	class:tigerso::HttpParser
lenient_http_headers	http/lib/http_parser.h	/^  unsigned int lenient_http_headers : 1;$/;"	m	struct:http_parser
level	core/Logging.h	/^	int level;$/;"	m	class:tigerso::Logging
linkServer	test/test_http.cpp	/^    bool linkServer(SocketPtr& sockptr) {$/;"	f	class:ProxyConnection
linkServerSocketPtr	test/test_http.cpp	/^bool linkServerSocketPtr(SocketPtr& clientptr, SocketPtr& serverptr) {$/;"	f
linkToAcceptor	net/Connection.cpp	/^void Connection::linkToAcceptor(std::shared_ptr<Acceptor> acptptr) { acptptr_ = acptptr; }$/;"	f	class:tigerso::Connection
listenHttpClientConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::listenHttpClientConnection() {$/;"	f	class:tigerso::HttpProxyLoop
listenHttpClientConnection	test/backup/http_proxy.cpp	/^    int listenHttpClientConnection() {$/;"	f	class:HttpProxyLoop	file:
listenOn	net/Acceptor.cpp	/^int Acceptor::listenOn() {$/;"	f	class:tigerso::Acceptor
listenOn	test/Acceptor.cpp	/^int Acceptor::listenOn() {$/;"	f	class:tigerso::Acceptor
listenSockptr_	net/Acceptor.h	/^    std::unique_ptr<Socket> listenSockptr_ = nullptr;$/;"	m	class:tigerso::Acceptor
listenSockptr_	test/Acceptor.h	/^    std::unique_ptr<Socket> listenSockptr_ = nullptr;$/;"	m	class:tigerso::Acceptor
listen_sock	test/test_buffer.cpp	/^McSocket listen_sock;$/;"	v
listenfd	test/HttpFile/sendcontent.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listenfd	test/HttpFile/sendfile.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listenfd	test/sendfile/sendfile.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listening	net/Socket.h	/^    bool listening = false;$/;"	m	class:tigerso::Socket
listeningOnLocal	test/HttpFile/sendcontent.cc	/^int listeningOnLocal() {$/;"	f
listeningOnLocal	test/HttpFile/sendfile.cc	/^int listeningOnLocal() {$/;"	f
listeningOnLocal	test/sendfile/sendfile.cc	/^int listeningOnLocal() {$/;"	f
loadConfig2Map	core/ConfigParser.cpp	/^int ConfigParser::loadConfig2Map()$/;"	f	class:tigerso::ConfigParser
loadConfigParams	core/DaemonBase.cpp	/^int DaemonBase::loadConfigParams() {$/;"	f	class:tigerso::DaemonBase
loadConfigParams	test/DaemonBase.cpp	/^int DaemonBase::loadConfigParams() {$/;"	f	class:tigerso::DaemonBase
loadPrivateKeyFromFile	ssl/SSLHelper.cpp	/^EVP_PKEY* loadPrivateKeyFromFile(const char* keyfile, const char* passwd) {$/;"	f	namespace:tigerso
loadX509FromFile	ssl/SSLHelper.cpp	/^X509* loadX509FromFile(const char* filename) {$/;"	f	namespace:tigerso
locate	net/Upstream.h	/^    UpstreamNode* locate(unsigned int loc) {$/;"	f	class:tigerso::Upstream
lock	core/FileLock.cpp	/^int FileLock::lock() {$/;"	f	class:tigerso::FileLock
lock	core/SysUtil.cpp	/^int ShmMutex::lock()$/;"	f	class:tigerso::ShmMutex
lock	core/ThreadMutex.h	/^    int lock() {$/;"	f	class:tigerso::ThreadMutex
lock_cmd	core/FileLock.cpp	/^int FileLock::lock_cmd(int cmd) {$/;"	f	class:tigerso::FileLock
locked	core/SysUtil.h	/^    bool locked;$/;"	m	class:tigerso::LockTryGuard
locked_	core/FileLock.h	/^    bool locked_ = false;$/;"	m	class:tigerso::FileLock
locked_	core/SysUtil.h	/^    bool locked_ = false;$/;"	m	class:tigerso::ShmMutex
locked_pid	core/SysUtil.h	/^    pid_t locked_pid;$/;"	m	class:tigerso::ShmMutex
logFile	core/Logging.h	/^	std::string logFile;$/;"	m	class:tigerso::Logging
logPath	core/Logging.h	/^	std::string logPath;$/;"	m	class:tigerso::Logging
log_ptr	test/test_mutex.cpp	/^Logging* log_ptr = nullptr;$/;"	v
loop	net/EventsLoop.cpp	/^int EventsLoop::loop() {$/;"	f	class:tigerso::EventsLoop
loop_	net/Channel.h	/^    EventsLoop& loop_;$/;"	m	class:tigerso::Channel
loop_	net/EventsLoop.h	/^    bool loop_ = false;$/;"	m	class:tigerso::EventsLoop
loopmutex_	core/ThreadPool.h	/^    mutable ThreadMutex loopmutex_;$/;"	m	class:tigerso::ThreadPool
m_client	http/HttpProxyConnection.cpp	6;"	d	file:
m_server	http/HttpProxyConnection.cpp	7;"	d	file:
m_sock	http/HttpConnection.cpp	8;"	d	file:
main	ssl/scripts/ca_converter.py	/^def main(explicitTrustOnly = True, trustServerAuth = True,$/;"	f
main	test/Daemon.cpp	/^int main() {$/;"	f
main	test/HttpFile/sendcontent.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	test/HttpFile/sendfile.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	test/HttpsServer.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/backup/deleteself.cc	/^int main() {$/;"	f
main	test/backup/http_proxy.cpp	/^int main() {$/;"	f
main	test/http_proxy.cpp	/^int main() {$/;"	f
main	test/https_client.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/https_lib/https_client.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/https_lib/https_server.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/https_server.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/inter2hex.c	/^int main(int argc, char* argv[]) {$/;"	f
main	test/main.c	/^int main() {$/;"	f
main	test/sendfile/sendfile.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	test/shared_ptr_test.cpp	/^int main() {$/;"	f
main	test/test_bind.cpp	/^int main() {$/;"	f
main	test/test_buffer.cpp	/^int main(){$/;"	f
main	test/test_class.cpp	/^int main() {$/;"	f
main	test/test_dns.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test/test_http.cpp	/^int main() {$/;"	f
main	test/test_mutex.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test/test_ringbuffer.cpp	/^int main() {$/;"	f
main	test/test_server.cpp	/^int main() {$/;"	f
main	test/test_thread.cpp	/^int main() {$/;"	f
main	util/main.cc	/^int main(int argc, char* argv[]) {$/;"	f
makeHttpProxyConnection	http/HttpProxy.cpp	/^HTTPPROXYCONNECTIONPTR HttpProxyLoop::makeHttpProxyConnection() {$/;"	f	class:tigerso::HttpProxyLoop
makeHttpProxyConnection	test/backup/http_proxy.cpp	/^   HTTPPROXYCONNECTIONPTR makeHttpProxyConnection() {$/;"	f	class:HttpProxyLoop	file:
makeSpace	net/Buffer.cpp	/^int Buffer::makeSpace(const size_t len) {$/;"	f	class:tigerso::Buffer
make_dirtree	core/SysUtil.cpp	/^int SysUtil::make_dirtree(const string& dirname)$/;"	f	class:tigerso::SysUtil
markTrade	http/HttpMessage.cpp	/^void HttpMessage::markTrade() {$/;"	f	class:tigerso::HttpMessage
masterAfterHandle	http/HttpProxy.cpp	/^int HttpProxyLoop::masterAfterHandle(Socket& master) {$/;"	f	class:tigerso::HttpProxyLoop
masterAfterHandle	test/backup/http_proxy.cpp	/^     int masterAfterHandle(Socket& master) {$/;"	f	class:HttpProxyLoop
masterErrorHandle	http/HttpProxy.cpp	/^int HttpProxyLoop::masterErrorHandle(Socket& master) {$/;"	f	class:tigerso::HttpProxyLoop
masterErrorHandle	test/backup/http_proxy.cpp	/^     int masterErrorHandle(Socket& master) {$/;"	f	class:HttpProxyLoop
master_	test/Daemon.h	/^    SocketPtr master_;$/;"	m	class:tigerso::DaemonBase
master_	test/TCPServerLoop.h	/^       eloop_->registerChannel(*master_);$/;"	t	namespace:tigerso
master_	test/TCPServerLoop.h	/^    std::unique_ptr<Socket> master_;$/;"	v
memory2Shared	dns/DNSCache.cpp	/^int DNSCache::memory2Shared() {$/;"	f	class:tigerso::DNSCache
message_	http/HttpParser.h	/^    HttpMessage* message_;$/;"	m	class:tigerso::HttpParser
method	http/lib/http_parser.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	struct:http_parser
method_	http/HttpRequest.h	/^    std::string method_;$/;"	m	class:tigerso::HttpRequest
method_strings	http/lib/http_parser.c	/^static const char *method_strings[] =$/;"	v	file:
mime	util/FileTypeDetector.h	/^    const char* mime;$/;"	m	struct:tigerso::ScanFileType
mime	util/FileTypes/FileTypeDetector.h	/^    const char* mime;$/;"	m	struct:tigerso::util::ScanFileType
mime_type	http/HttpBodyFile.h	/^    char mime_type[1024] = {0};$/;"	m	class:tigerso::HttpBodyFile
mine_type	test/HttpFile/HttpBodyFile.h	/^    char mine_type[1024];$/;"	m	class:HttpBodyFile
mode	http/HttpBodyFile.cpp	/^HttpBodyMode HttpBodyFile::mode() {$/;"	f	class:tigerso::HttpBodyFile
msgptr_	net/Buffer.h	/^    HttpMessage* msgptr_ = nullptr;$/;"	m	class:tigerso::Buffer
msockptr_	http/HttpProxy.h	/^    const SocketPtr msockptr_;$/;"	m	class:tigerso::HttpProxyLoop
msockptr_	test/backup/http_proxy.cpp	/^    const SOCKETPTR msockptr_;$/;"	m	class:HttpProxyLoop	file:
mutex	core/SysUtil.h	/^    pthread_mutex_t mutex;$/;"	m	struct:tigerso::shm_mutex_t
mutex_	core/Condition.h	/^    ThreadMutex& mutex_;$/;"	m	class:tigerso::Condition
mutex_	core/ThreadMutex.h	/^    pthread_mutex_t  mutex_;$/;"	m	class:tigerso::ThreadMutex
mutex_	core/ThreadPool.h	/^    mutable ThreadMutex mutex_;$/;"	m	class:tigerso::ThreadPool
mutex_	dns/DNSCache.h	/^    ShmMutex  mutex_; \/\/process-shared mutex$/;"	m	class:tigerso::DNSCache
mutex_	net/Acceptor.h	/^    ShmMutex mutex_;$/;"	m	class:tigerso::Acceptor
mutex_	test/Acceptor.h	/^    ShmMutex mutex_;$/;"	m	class:tigerso::Acceptor
mutex_ptr	core/SysUtil.h	/^    shm_mutex_t* mutex_ptr;$/;"	m	class:tigerso::ShmMutex
mutexattr	core/SysUtil.h	/^    pthread_mutexattr_t mutexattr;$/;"	m	struct:tigerso::shm_mutex_t
myfunc	test/shared_ptr_test.cpp	/^    void myfunc() {$/;"	f	class:Test
mytest	test/backup/deleteself.cc	/^    mytest(){}$/;"	f	class:mytest
mytest	test/backup/deleteself.cc	/^class mytest {$/;"	c	file:
name	core/CurrentThread.h	/^   inline const char* name() { return threadName_; }$/;"	f	namespace:tigerso::CurrentThread
name	core/Thread.h	/^    const std::string& name() { return name_; }$/;"	f	class:tigerso::Thread
name	http/lib/http_parser.c	/^  const char *name;$/;"	m	struct:__anon2	file:
name	util/FileTypeDetector.h	/^    const char* name;$/;"	m	struct:tigerso::ScanFileType
name	util/FileTypes/FileTypeDetector.h	/^    const char* name;$/;"	m	struct:tigerso::util::ScanFileType
name_	core/Thread.cpp	/^    std::string name_;$/;"	m	class:tigerso::ThreadData	file:
name_	core/Thread.h	/^    std::string name_="";$/;"	m	class:tigerso::Thread
name_	core/ThreadPool.h	/^    std::string name_;$/;"	m	class:tigerso::ThreadPool
needDeletedChannelSet_	net/EventsLoop.h	/^    std::set<Channel*> needDeletedChannelSet_;$/;"	m	class:tigerso::EventsLoop
needMoreData	http/HttpParser.h	/^    bool needMoreData() { return state_ != PARSE_COMPLETE; }$/;"	f	class:tigerso::HttpParser
next	net/TimeWheelEvent.h	/^    _TimeNode_st* next = nullptr;$/;"	m	struct:tigerso::TimeWheelEvent::_TimeNode_st
next	net/Upstream.h	/^    UpstreamNode* next = nullptr;$/;"	m	struct:tigerso::Upstream::UpstreamNode
next	test/backup/TimedEvent.h	/^    TimeNodeSet* next = nullptr;$/;"	m	struct:TimeNode
nocopy	test/test_bind.cpp	/^    nocopy(){}$/;"	f	class:nocopy
nocopy	test/test_bind.cpp	/^class nocopy {$/;"	c	file:
nocopy_func	test/test_bind.cpp	/^typedef std::function<int(nocopy&)> nocopy_func;$/;"	t	file:
nocopyable	core/BaseClass.h	/^    nocopyable(){}$/;"	f	class:tigerso::nocopyable
nocopyable	core/BaseClass.h	/^class nocopyable {$/;"	c	namespace:tigerso
nonBlocking	core/tigerso.h	58;"	d
nonBlocking	test/File.h	14;"	d
nonBlocking	test/HttpFile/File.h	17;"	d
nonBlocking	test/HttpFile/sendcontent.cc	16;"	d	file:
nonBlocking	test/HttpFile/sendfile.cc	16;"	d	file:
nonBlocking	test/sendfile/File.h	14;"	d
nonBlocking	test/sendfile/sendfile.cc	16;"	d	file:
normal_url_char	http/lib/http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	file:
notEmpty	core/ThreadPool.h	/^    bool notEmpty = false;$/;"	m	class:tigerso::ThreadPool
notEmpty_	core/ThreadPool.h	/^    Condition notEmpty_;$/;"	m	class:tigerso::ThreadPool
notFull	core/ThreadPool.h	/^    bool notFull = true;$/;"	m	class:tigerso::ThreadPool
notFull_	core/ThreadPool.h	/^    Condition notFull_;$/;"	m	class:tigerso::ThreadPool
notify	core/Condition.h	/^    void notify() {$/;"	f	class:tigerso::Condition
notifyAll	core/Condition.h	/^    void notifyAll() {$/;"	f	class:tigerso::Condition
nread	http/lib/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser
numCreated	core/Thread.h	/^    static int numCreated() { return numCreated_.load(); }$/;"	f	class:tigerso::Thread
numCreated_	core/Thread.h	/^    static std::atomic<int> numCreated_;$/;"	m	class:tigerso::Thread
off	http/lib/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon1
offset_	http/HttpBodyFile.h	/^    off_t offset_ = 0;$/;"	m	class:tigerso::HttpBodyFile
offset_t	dns/DNSCache.h	/^typedef unsigned int offset_t;$/;"	t	namespace:tigerso
offsets	net/Upstream.h	/^    time_t offsets[10] = {-1};$/;"	m	struct:tigerso::Upstream::UpstreamNode
on_body	http/HttpParser.cpp	/^int HttpParser::on_body(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_body	http/lib/http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings
on_chunk_complete	http/lib/http_parser.h	/^  http_cb      on_chunk_complete;$/;"	m	struct:http_parser_settings
on_chunk_header	http/lib/http_parser.h	/^  http_cb      on_chunk_header;$/;"	m	struct:http_parser_settings
on_header_field	http/HttpParser.cpp	/^int HttpParser::on_header_field(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_header_field	http/lib/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings
on_header_value	http/HttpParser.cpp	/^int HttpParser::on_header_value(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_header_value	http/lib/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings
on_headers_complete	http/HttpParser.cpp	/^int HttpParser::on_headers_complete(http_parser* parser) {$/;"	f	class:tigerso::HttpParser
on_headers_complete	http/lib/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings
on_message_begin	http/HttpParser.cpp	/^int HttpParser::on_message_begin(http_parser* parser) {$/;"	f	class:tigerso::HttpParser
on_message_begin	http/lib/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings
on_message_complete	http/HttpParser.cpp	/^int HttpParser::on_message_complete(http_parser* parser) {$/;"	f	class:tigerso::HttpParser
on_message_complete	http/lib/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings
on_status	http/HttpParser.cpp	/^int HttpParser::on_status(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_status	http/lib/http_parser.h	/^  http_data_cb on_status;$/;"	m	struct:http_parser_settings
on_url	http/HttpParser.cpp	/^int HttpParser::on_url(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_url	http/lib/http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings
operator <	net/Socket.cpp	/^bool Socket::operator<(const Socket& sock) const {$/;"	f	class:tigerso::Socket
operator =	core/SysUtil.cpp	/^ShmMutex ShmMutex::operator=(const ShmMutex& mutex)$/;"	f	class:tigerso::ShmMutex
operator =	dns/DNSResolver.h	/^    DNSResolver& operator=(const DNSResolver&){}$/;"	f	class:tigerso::DNSResolver
operator ==	net/Socket.cpp	/^bool Socket::operator==(const Socket& sock) const {$/;"	f	class:tigerso::Socket
operator ==	net/Socket.cpp	/^bool Socket::operator==(const socket_t& fd) const {$/;"	f	class:tigerso::Socket
operator >	net/Socket.cpp	/^bool Socket::operator>(const Socket& sock) const {$/;"	f	class:tigerso::Socket
operator int	net/Socket.h	/^    operator int() const { return sockfd_; }$/;"	f	class:tigerso::Socket
outBuffer_	net/Socket.h	/^    std::shared_ptr<Buffer> outBuffer_ = std::make_shared<Buffer>();$/;"	m	class:tigerso::Socket
out_	net/Socket.h	/^    std::weak_ptr<Buffer> out_;$/;"	m	struct:tigerso::BufferPtr
owner_	core/ThreadMutex.h	/^        ThreadMutex& owner_;$/;"	m	class:tigerso::ThreadMutex::UnassignGuard
pInstance	core/BaseClass.h	/^    static singleton* pInstance; $/;"	m	class:tigerso::singleton
pInstance	core/ConfigParser.cpp	/^std::unique_ptr<ConfigParser> ConfigParser::pInstance;$/;"	m	class:tigerso::ConfigParser	file:
pInstance	core/ConfigParser.h	/^	static std::unique_ptr<ConfigParser> pInstance;$/;"	m	class:tigerso::ConfigParser
pInstance	core/Logging.cpp	/^std::unique_ptr<Logging> Logging::pInstance;$/;"	m	class:tigerso::Logging	file:
pInstance	core/Logging.h	/^	static std::unique_ptr<Logging> pInstance;$/;"	m	class:tigerso::Logging
pInstance_	core/BaseClass.h	/^    static std::unique_ptr<T> pInstance_;$/;"	m	class:tigerso::Singleton
pInstance_	core/BaseClass.h	/^std::unique_ptr<T> Singleton<T>::pInstance_;$/;"	m	class:tigerso::Singleton
pInstance_	dns/DNSCache.cpp	/^std::unique_ptr<DNSCache> DNSCache::pInstance_;$/;"	m	class:tigerso::DNSCache	file:
pInstance_	dns/DNSCache.h	/^    static std::unique_ptr<DNSCache> pInstance_;$/;"	m	class:tigerso::DNSCache
packDNSQuery	dns/DNSResolver.cpp	/^int DNSResolver::packDNSQuery(const char* query_name, size_t len) {$/;"	f	class:tigerso::DNSResolver
parent	test/test_class.cpp	/^    parent() {}$/;"	f	class:parent
parent	test/test_class.cpp	/^class parent {$/;"	c	file:
parentPid_	core/DaemonBase.h	/^    pid_t parentPid_;$/;"	m	class:tigerso::DaemonBase
parentPid_	test/Daemon.h	/^    pid_t parentPid_;$/;"	m	class:tigerso::DaemonBase
parentStart	core/DaemonBase.cpp	/^int DaemonBase::parentStart() {$/;"	f	class:tigerso::DaemonBase
parentStart	test/DaemonBase.cpp	/^int DaemonBase::parentStart() {$/;"	f	class:tigerso::DaemonBase
parse	http/HttpParser.cpp	/^int HttpParser::parse(const char* buf,size_t len, HttpMessage& message) {$/;"	f	class:tigerso::HttpParser
parse	http/HttpParser.cpp	/^int HttpParser::parse(const std::string& buffer, HttpMessage& message) {$/;"	f	class:tigerso::HttpParser
parseMultlineOctal	ssl/scripts/ca_converter.py	/^def parseMultlineOctal(lines, num):$/;"	f
parseNSSFile	ssl/scripts/ca_converter.py	/^def parseNSSFile(explicitTrustOnly = True, trustServerAuth = True,$/;"	f
parse_url_char	http/lib/http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	file:
parsedn_	http/HttpParser.h	/^    size_t parsedn_;$/;"	m	class:tigerso::HttpParser
parser	test/test_http.cpp	/^HttpParser parser;$/;"	v
parser_	http/HttpConnection.h	/^    HttpParser parser_;$/;"	m	class:tigerso::HttpConnection
parser_	http/HttpParser.h	/^    http_parser parser_;$/;"	m	class:tigerso::HttpParser
parser_	http/HttpProxyConnection.h	/^    HttpParser parser_;$/;"	m	class:tigerso::HttpProxyConnection
pe	test/backup/deleteself.cc	/^    peer* pe;$/;"	m	class:mytest	file:
peer	test/backup/deleteself.cc	/^    peer() {}$/;"	f	class:peer
peer	test/backup/deleteself.cc	/^class peer {$/;"	c	file:
peerIPstr_	test/test_http.cpp	/^    string peerIPstr_;$/;"	m	class:TcpConnection	file:
pid	test/test_mutex.cpp	/^    pid_t pid;$/;"	m	struct:share_count	file:
pidFilename_	core/DaemonBase.h	/^    std::string pidFilename_ = "daemon-base";$/;"	m	class:tigerso::DaemonBase
pidFilename_	test/Daemon.h	/^    std::string pidFilename_ = "daemon-base";$/;"	m	class:tigerso::DaemonBase
port	http/lib/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url
port	net/Upstream.h	/^    unsigned int port = 0;  $/;"	m	struct:tigerso::Upstream::UpstreamNode
port_	http/HttpProxy.h	/^    const std::string port_;$/;"	m	class:tigerso::HttpProxyLoop
port_	http/HttpRequest.h	/^    std::string port_;$/;"	m	class:tigerso::HttpRequest
port_	net/Acceptor.h	/^    const int port_;$/;"	m	class:tigerso::Acceptor
port_	net/Socket.h	/^    std::string port_;$/;"	m	class:tigerso::Socket
port_	test/Acceptor.h	/^    const int port_;$/;"	m	class:tigerso::Acceptor
port_	test/TCPServerLoop.h	/^    const int port_;$/;"	v
port_	test/backup/http_proxy.cpp	/^    std::string port_;$/;"	m	class:HttpProxyLoop	file:
port_	test/test_http.cpp	/^    string port_;$/;"	m	class:ProxyConnection	file:
port_	test/test_http.cpp	/^    string port_;$/;"	m	class:TcpConnection	file:
postEvent	net/Acceptor.cpp	/^int Acceptor::postEvent() {$/;"	f	class:tigerso::Acceptor
pr2six	http/lib/base64.c	/^static const unsigned char pr2six[256] =$/;"	v	file:
prefix_	net/Buffer.h	/^    const size_t prefix_;$/;"	m	class:tigerso::Buffer
prefreeBytes	net/Buffer.cpp	/^size_t Buffer::prefreeBytes() const {$/;"	f	class:tigerso::Buffer
pregap	net/Buffer.h	/^    static const size_t pregap = 8;$/;"	m	class:tigerso::Buffer
prepare200Response	http/HttpMessage.cpp	/^int HttpHelper::prepare200Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepare400Response	http/HttpMessage.cpp	/^int HttpHelper::prepare400Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepare403Response	http/HttpMessage.cpp	/^int HttpHelper::prepare403Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepare503Response	http/HttpMessage.cpp	/^int HttpHelper::prepare503Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepare504Response	http/HttpMessage.cpp	/^int HttpHelper::prepare504Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepareDNSErrorResponse	http/HttpMessage.cpp	/^int HttpHelper::prepareDNSErrorResponse(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepareSSLContext	net/Socket.cpp	/^int Socket::prepareSSLContext() {$/;"	f	class:tigerso::Socket
primary_addr_	dns/DNSResolver.cpp	/^std::string DNSResolver::primary_addr_ = DNS_SERVER_ADDR;$/;"	m	class:tigerso::DNSResolver	file:
primary_addr_	dns/DNSResolver.h	/^    static std::string primary_addr_;$/;"	m	class:tigerso::DNSResolver
printInfo	net/Buffer.cpp	/^void Buffer::printInfo() const {$/;"	f	class:tigerso::Buffer
printInfo	test/test_buffer.cpp	/^void printInfo() {$/;"	f
print_class	test/test_bind.cpp	/^int print_class(nocopy_func func, nocopy& copy) {$/;"	f
print_share_count	test/test_mutex.cpp	/^void print_share_count() {$/;"	f
printchar	test/HttpFile/RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
printchar	test/RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
printchar	test/sendfile/RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
printlist	net/TimeWheelEvent.cpp	/^void TimeWheelEvent::printlist() {$/;"	f	class:tigerso::TimeWheelEvent
process	test/test_class.cpp	/^    int process() {$/;"	f	class:parent
processInit	core/DaemonBase.cpp	/^int DaemonBase::processInit() {$/;"	f	class:tigerso::DaemonBase
processInit	http/HttpService.h	/^    int processInit() {$/;"	f	class:tigerso::HttpService
processStart	core/DaemonBase.cpp	/^int DaemonBase::processStart() {$/;"	f	class:tigerso::DaemonBase
processStart	http/HttpService.h	/^    int processStart() {$/;"	f	class:tigerso::HttpService
processStart	test/DaemonBase.cpp	/^int DaemonBase::processStart() {$/;"	f	class:tigerso::DaemonBase
processStop	core/DaemonBase.cpp	/^int DaemonBase::processStop() {$/;"	f	class:tigerso::DaemonBase
processStop	http/HttpService.h	/^    int processStop() {$/;"	f	class:tigerso::HttpService
processStop	test/DaemonBase.cpp	/^int DaemonBase::processStop() {$/;"	f	class:tigerso::DaemonBase
ptlogin2_onClose	test/HttpFile/index.html	/^	function ptlogin2_onClose(){$/;"	f
ptlogin2_onResize	test/HttpFile/index.html	/^	function ptlogin2_onResize(width, height) {$/;"	f
queryDNSCache	dns/DNSResolver.cpp	/^int DNSResolver::queryDNSCache(const std::string& host, std::string& ipaddr) {$/;"	f	class:tigerso::DNSResolver
queryIP	dns/DNSCache.cpp	/^int DNSCache::queryIP(const char* host, char* ipaddr, size_t len) {$/;"	f	class:tigerso::DNSCache
queryIP	test/test_dns.cpp	/^int queryIP(const char* host) {$/;"	f
query_buf_	dns/DNSResolver.h	/^    unsigned char query_buf_ [DNS_MESSAGE_LIMIT] = {0};$/;"	m	class:tigerso::DNSResolver
query_name_	dns/DNSResolver.h	/^    std::string query_name_;$/;"	m	class:tigerso::DNSResolver
questions	dns/DNSResolver.h	/^    unsigned short questions;$/;"	m	struct:tigerso::DNSHeader
rdhupHandle	http/HttpConnection.cpp	/^int HttpConnection::rdhupHandle(Socket& sock){$/;"	f	class:tigerso::HttpConnection
rdhupHandle	http/HttpProxyConnection.cpp	/^int HttpProxyConnection::rdhupHandle(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
rdhupHandle	net/Acceptor.cpp	/^int Acceptor::rdhupHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
rdhupHandle	test/Acceptor.cpp	/^int Acceptor::rdhupHandle(Socket& _l) {$/;"	f	class:tigerso::Acceptor
rdhupHandleEnter	net/Connection.cpp	/^int Connection::rdhupHandleEnter(Socket& _l) { return rdhupHandle(_l); }$/;"	f	class:tigerso::Connection
rdhupHandleEnter	test/Connection.cpp	/^int Connection::rdhupHandleEnter(Socket& _l) { return rdhupHandle(_l); }$/;"	f	class:tigerso::Connection
rdhupHandleEnter	test/TCPServerLoop.h	/^    int rdhupHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
rdhup_cb	net/Channel.h	/^    EventFunc rdhup_cb = nullptr;$/;"	m	class:tigerso::Channel
readCallback	test/test_http.cpp	/^int readCallback(SocketPtr& sockptr) {$/;"	f
readFlag	net/Channel.h	/^        bool readFlag;$/;"	m	struct:tigerso::Channel::__anon6
readHandle	http/HttpConnection.cpp	/^int HttpConnection::readHandle(Socket& sock){$/;"	f	class:tigerso::HttpConnection
readHandle	http/HttpProxyConnection.cpp	/^int HttpProxyConnection::readHandle(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
readHandle	test/TCPServerLoop.h	/^    virtual int readHandle(Socket& _1) {$/;"	f	class:tigerso::Connection
readHandleEnter	net/Connection.cpp	/^int Connection::readHandleEnter(Socket& _l) { return readHandle(_l); }$/;"	f	class:tigerso::Connection
readHandleEnter	test/Connection.cpp	/^int Connection::readHandleEnter(Socket& _l) { return readHandle(_l); }$/;"	f	class:tigerso::Connection
readHandleEnter	test/TCPServerLoop.h	/^    int readHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
readIdx_	net/Buffer.h	/^    size_t readIdx_;$/;"	m	class:tigerso::Buffer
readOut	core/File.cpp	/^ssize_t File::readOut(char* buf, size_t len, off_t& offset) {$/;"	f	class:tigerso::File
readOut	net/RingBuffer.cpp	/^int RingBuffer::readOut(char* buf, size_t len) {$/;"	f	class:tigerso::RingBuffer
readOut	net/RingBuffer.cpp	/^int RingBuffer::readOut(int fd) {$/;"	f	class:tigerso::RingBuffer
readOut	test/File.cpp	/^ssize_t File::readOut(char* buf, size_t len) {$/;"	f	class:File
readOut	test/HttpFile/File.cpp	/^ssize_t File::readOut(char* buf, size_t len, off_t& offset) {$/;"	f	class:File
readOut	test/HttpFile/RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut	test/HttpFile/RingBuffer.h	/^    int readOut(int fd) {$/;"	f	class:RingBuffer
readOut	test/RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut	test/RingBuffer.h	/^    int readOut(int fd) {$/;"	f	class:RingBuffer
readOut	test/sendfile/File.cpp	/^ssize_t File::readOut(char* buf, size_t len) {$/;"	f	class:File
readOut	test/sendfile/RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut2File	net/RingBuffer.cpp	/^int RingBuffer::readOut2File(File& file) {$/;"	f	class:tigerso::RingBuffer
readOut2File	test/HttpFile/RingBuffer.h	/^    int readOut2File(File& file) {$/;"	f	class:RingBuffer
readOut2File	test/RingBuffer.h	/^    int readOut2File(File& file) {$/;"	f	class:RingBuffer
readableBytes	net/Buffer.cpp	/^size_t Buffer::readableBytes() const {$/;"	f	class:tigerso::Buffer
readable_cb	net/Channel.h	/^    EventFunc readable_cb = nullptr;$/;"	m	class:tigerso::Channel
readdone_	core/File.h	/^    bool readdone_ = false;$/;"	m	class:tigerso::File
recv	ssl/SSLContext.cpp	/^int SSLContext::recv(void* buf, size_t len, size_t* readn) {$/;"	f	class:tigerso::SSLContext
recv	test/HttpFile/client.py	/^    def recv(self):$/;"	m	class:client
recv	test/backup/SSLContex.h	/^    int recv(void* buf, size_t len, size_t* readn) {$/;"	f	class:HttpsContext
recv	test/https_lib/SSLContext.cpp	/^    int recv(void* buf, size_t len, size_t* readn) {$/;"	f	class:SSLContext::HttpsContext
recvAnswer	dns/DNSResolver.cpp	/^int DNSResolver::recvAnswer(Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
recvFromSocket	net/Buffer.cpp	/^int Buffer::recvFromSocket(Socket& mcsock) {$/;"	f	class:tigerso::Buffer
recvNIO	net/Socket.cpp	/^ssize_t Socket::recvNIO() {$/;"	f	class:tigerso::Socket
recycle	http/HttpConnection.cpp	/^void HttpConnection::recycle() {$/;"	f	class:tigerso::HttpConnection
recycle	net/Acceptor.cpp	/^void Acceptor::recycle(Connection* connptr) {$/;"	f	class:tigerso::Acceptor
recycle	net/Connection.cpp	/^void Connection::recycle() {$/;"	f	class:tigerso::Connection
recycle	net/ConnectionFactory.cpp	/^void ConnectionFactory::recycle(Connection* connptr) {$/;"	f	class:tigerso::ConnectionFactory
recycle	test/ConnectionFactory.cpp	/^void ConnectionFactory::recycle(Connection* conn) {$/;"	f	class:tigerso::ConnectionFactory
recyle	test/Connection.cpp	/^viod Connection::recyle() {$/;"	f	class:tigerso::Connection
recyle	test/TCPServerLoop.h	/^    viod recyle() {$/;"	f	class:tigerso::Connection
refer_num	core/SysUtil.h	/^    int refer_num;$/;"	m	struct:tigerso::shm_mutex_t
refresh	core/DaemonBase.cpp	/^int DaemonBase::refresh() {$/;"	f	class:tigerso::DaemonBase
refresh	test/DaemonBase.cpp	/^int DaemonBase::refresh() {$/;"	f	class:tigerso::DaemonBase
register2EventsLoop	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::register2EventsLoop(EventsLoop& loop) {$/;"	f	class:tigerso::TimeWheelEvent
registerChannel	net/Acceptor.cpp	/^int Acceptor::registerChannel(Socket& sock) {$/;"	f	class:tigerso::Acceptor
registerChannel	net/Connection.cpp	/^int Connection::registerChannel(Socket& sock) {$/;"	f	class:tigerso::Connection
registerChannel	net/ConnectionFactory.cpp	/^int ConnectionFactory::registerChannel(Socket& sock) {$/;"	f	class:tigerso::ConnectionFactory
registerChannel	net/EventsLoop.cpp	/^int EventsLoop::registerChannel(Socket& socket) {$/;"	f	class:tigerso::EventsLoop
registerChannel	test/ConnectionFactory.cpp	/^int ConnectionFactory::registerChannel(Socket& sock) {$/;"	f	class:tigerso::ConnectionFactory
registerChannel	test/TCPServerLoop.h	/^    int registerChannel(Socket& sock) {$/;"	f	class:tigerso::ConnectionFactory
registerFunctionsForHttpProxyConnection	http/HttpProxy.cpp	/^void HttpProxyLoop::registerFunctionsForHttpProxyConnection(HttpProxyConnection& hpc) {$/;"	f	class:tigerso::HttpProxyLoop
registerFunctionsForHttpProxyConnection	test/backup/http_proxy.cpp	/^    void registerFunctionsForHttpProxyConnection(HttpProxyConnection& hpc) {$/;"	f	class:HttpProxyLoop	file:
registerSocket	http/HttpProxy.cpp	/^int HttpProxyLoop::registerSocket(Socket& sock) {$/;"	f	class:tigerso::HttpProxyLoop
registerSocket	test/backup/http_proxy.cpp	/^    int registerSocket(Socket& sock) {$/;"	f	class:HttpProxyLoop
registerSocket	test/http_server.cpp	/^    int registerSocket(Socket& socket) {$/;"	f	class:HttpServer	file:
register_func_	http/HttpProxy.h	/^    EventFunc register_func_ = nullptr;$/;"	m	class:tigerso::HttpProxyConnection
register_func_	test/backup/http_proxy.cpp	/^    EventFunc register_func_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
reload	core/ConfigParser.cpp	/^int ConfigParser::reload() {$/;"	f	class:tigerso::ConfigParser
remove	net/Channel.cpp	/^void Channel::remove() {$/;"	f	class:tigerso::Channel
removeChannel	net/EventsLoop.cpp	/^int EventsLoop::removeChannel(Channel* cnptr) {$/;"	f	class:tigerso::EventsLoop
removeData	net/Buffer.cpp	/^size_t Buffer::removeData(std::string& data, const size_t len) {$/;"	f	class:tigerso::Buffer
removeHeader	http/HttpMessage.cpp	/^void HttpMessage::removeHeader(const std::string& header) {$/;"	f	class:tigerso::HttpMessage
remove_file	core/SysUtil.cpp	/^int SysUtil::remove_file(const string& file)$/;"	f	class:tigerso::SysUtil
request	http/HttpProxy.h	/^    HttpRequest request;$/;"	m	struct:tigerso::HttpProxyConnection::HttpTransaction
request	test/backup/http_proxy.cpp	/^    HttpRequest request;$/;"	m	struct:HttpProxyConnection::HttpTransaction	file:
requestCallbacks_	http/HttpMessage.h	/^    std::map<std::string, httpInspectCallback> requestCallbacks_;$/;"	m	class:tigerso::HttpInSpection
request_	http/HttpConnection.h	/^    HttpRequest request_;$/;"	m	class:tigerso::HttpConnection
request_	http/HttpProxyConnection.h	/^    HttpRequest request_;$/;"	m	class:tigerso::HttpProxyConnection
reset	core/File.h	/^    inline void reset() { ::close(fd_); fd_ = -1; size_ = 0; cur_ = 0; readdone_= false; }$/;"	f	class:tigerso::File
reset	http/HttpBodyFile.cpp	/^void HttpBodyFile::reset() {$/;"	f	class:tigerso::HttpBodyFile
reset	http/HttpParser.cpp	/^void HttpParser::reset() {$/;"	f	class:tigerso::HttpParser
reset	http/HttpProxyConnection.cpp	/^void HttpProxyConnection::reset() {$/;"	f	class:tigerso::HttpProxyConnection
reset	net/Socket.cpp	/^void Socket::reset() {$/;"	f	class:tigerso::Socket
reset	test/File.h	/^    inline void reset() { fd_ = -1; size_ = 0; cur_ = 0; bzero(filename_, FILE_NAME_MAX_LENGTH); }$/;"	f	class:File
reset	test/HttpFile/File.h	/^    inline void reset() { ::close(fd_); fd_ = -1; size_ = 0; cur_ = 0; }$/;"	f	class:File
reset	test/HttpFile/HttpBodyFile.h	/^    void reset() {$/;"	f	class:HttpBodyFile
reset	test/RingBuffer.h	/^    void reset() {$/;"	f	class:RingBuffer
reset	test/sendfile/File.h	/^    inline void reset() { fd_ = -1; size_ = 0; cur_ = 0; bzero(filename_, FILE_NAME_MAX_LENGTH); }$/;"	f	class:File
reset	test/sendfile/RingBuffer.h	/^    void reset() {$/;"	f	class:RingBuffer
resetFlag	net/Channel.cpp	/^void Channel::resetFlag() {$/;"	f	class:tigerso::Channel
resetResources	http/HttpConnection.cpp	/^void HttpConnection::resetResources() {$/;"	f	class:tigerso::HttpConnection
resetState	http/HttpProxyConnection.cpp	/^void HttpProxyConnection::resetState() {$/;"	f	class:tigerso::HttpProxyConnection
resolveRR	dns/DNSResolver.cpp	/^int DNSResolver::resolveRR(unsigned char* buf, size_t buf_len, unsigned char* curp, unsigned char* name, size_t name_len, unsigned short* type, unsigned short* rclass, time_t* ttl, unsigned char* rdata) {$/;"	f	class:tigerso::DNSResolver
resolveRRName	dns/DNSResolver.cpp	/^int DNSResolver::resolveRRName(unsigned char* buf, size_t buf_len, unsigned char* curp, unsigned char* pname, size_t name_len) {$/;"	f	class:tigerso::DNSResolver
resolver_	http/HttpProxy.h	/^    DNSResolver resolver_;$/;"	m	class:tigerso::HttpProxyConnection
resolver_	test/backup/http_proxy.cpp	/^    DNSResolver resolver_;$/;"	m	class:HttpProxyConnection	file:
response	http/HttpProxy.h	/^    HttpResponse response;$/;"	m	struct:tigerso::HttpProxyConnection::HttpTransaction
response	test/backup/http_proxy.cpp	/^    HttpResponse response;$/;"	m	struct:HttpProxyConnection::HttpTransaction	file:
response403html	http/HttpMessage.h	/^    static std::string response403html;$/;"	m	class:tigerso::HttpHelper
response503html	http/HttpMessage.h	/^    static std::string response503html;$/;"	m	class:tigerso::HttpHelper
responseCallbacks_	http/HttpMessage.h	/^    std::map<std::string, httpInspectCallback> responseCallbacks_;$/;"	m	class:tigerso::HttpInSpection
response_	http/HttpConnection.h	/^    HttpResponse response_;$/;"	m	class:tigerso::HttpConnection
response_	http/HttpProxyConnection.h	/^    HttpResponse response_;$/;"	m	class:tigerso::HttpProxyConnection
response_buf_	dns/DNSResolver.h	/^    unsigned char response_buf_[DNS_MESSAGE_LIMIT] = {0};$/;"	m	class:tigerso::DNSResolver
response_status_array	http/HttpMessage.cpp	/^static const status_pair_t response_status_array [] = {$/;"	m	namespace:tigerso	file:
resvDNSAnswer	dns/DNSResolver.cpp	/^int DNSResolver::resvDNSAnswer() {$/;"	f	class:tigerso::DNSResolver
role_	http/HttpMessage.h	/^    http_role_t role_ = HTTP_ROLE_UINIT;$/;"	m	class:tigerso::HttpMessage
role_	net/Socket.h	/^    socket_role_t role_ = SOCKET_ROLE_UINIT;$/;"	m	class:tigerso::Socket
rootDir	net/Acceptor.h	/^    std::string rootDir = ".\/";$/;"	m	struct:tigerso::ServiceContext
roundRobin	net/Upstream.h	/^    int roundRobin(const char* ip, unsigned int& port) {$/;"	f	class:tigerso::Upstream
run	core/ThreadPool.h	/^    void run(const Task task) {$/;"	f	class:tigerso::ThreadPool
runInThread	core/Thread.cpp	/^    void runInThread() {$/;"	f	class:tigerso::ThreadData
runInThread	core/ThreadPool.h	/^    void runInThread() {$/;"	f	class:tigerso::ThreadPool
running_	core/ThreadPool.h	/^    std::atomic<bool> running_;$/;"	m	class:tigerso::ThreadPool
s_body_identity	http/lib/http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	http/lib/http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chunk_data	http/lib/http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	http/lib/http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	http/lib/http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	http/lib/http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	http/lib/http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	http/lib/http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	http/lib/http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	http/lib/http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_header_almost_done	http/lib/http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	http/lib/http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	http/lib/http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	http/lib/http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_discard_lws	http/lib/http_parser.c	/^  , s_header_value_discard_lws$/;"	e	enum:state	file:
s_header_value_discard_ws	http/lib/http_parser.c	/^  , s_header_value_discard_ws$/;"	e	enum:state	file:
s_header_value_discard_ws_almost_done	http/lib/http_parser.c	/^  , s_header_value_discard_ws_almost_done$/;"	e	enum:state	file:
s_header_value_lws	http/lib/http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	http/lib/http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	http/lib/http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	http/lib/http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	http/lib/http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	http/lib/http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	http/lib/http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	http/lib/http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	http/lib/http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	http/lib/http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	http/lib/http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	http/lib/http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone	http/lib/http_parser.c	/^  , s_http_host_v6_zone$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone_start	http/lib/http_parser.c	/^  , s_http_host_v6_zone_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	http/lib/http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	http/lib/http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_message_done	http/lib/http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_req_first_http_major	http/lib/http_parser.c	/^  , s_req_first_http_major$/;"	e	enum:state	file:
s_req_first_http_minor	http/lib/http_parser.c	/^  , s_req_first_http_minor$/;"	e	enum:state	file:
s_req_fragment	http/lib/http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	http/lib/http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	http/lib/http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	http/lib/http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	http/lib/http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	http/lib/http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_major	http/lib/http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	http/lib/http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	http/lib/http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	http/lib/http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	http/lib/http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	http/lib/http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	http/lib/http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	http/lib/http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	http/lib/http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	http/lib/http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	http/lib/http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	http/lib/http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	http/lib/http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	http/lib/http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	http/lib/http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	http/lib/http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	http/lib/http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	http/lib/http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	http/lib/http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_http_major	http/lib/http_parser.c	/^  , s_res_first_http_major$/;"	e	enum:state	file:
s_res_first_http_minor	http/lib/http_parser.c	/^  , s_res_first_http_minor$/;"	e	enum:state	file:
s_res_first_status_code	http/lib/http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_major	http/lib/http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	http/lib/http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	http/lib/http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	http/lib/http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	http/lib/http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	http/lib/http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_res_status_start	http/lib/http_parser.c	/^  , s_res_status_start$/;"	e	enum:state	file:
s_start_req	http/lib/http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	http/lib/http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	http/lib/http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
sctx	net/Socket.h	/^    SSLContext sctx;$/;"	m	class:tigerso::Socket
second_addr_	dns/DNSResolver.cpp	/^std::string DNSResolver::second_addr_ = "";$/;"	m	class:tigerso::DNSResolver	file:
second_addr_	dns/DNSResolver.h	/^    static std::string second_addr_;$/;"	m	class:tigerso::DNSResolver
sem	test/test_mutex.cpp	/^FileLock* sem = nullptr;$/;"	v
send	ssl/SSLContext.cpp	/^int SSLContext::send(const void* buf, size_t len, size_t* written) {$/;"	f	class:tigerso::SSLContext
send	test/HttpFile/client.py	/^    def send(self, message):$/;"	m	class:client
send	test/backup/SSLContex.h	/^    int send(void* buf, size_t len, size_t* written) {$/;"	f	class:HttpsContext
send	test/https_lib/SSLContext.cpp	/^    int send(void* buf, size_t len, size_t* written) {$/;"	f	class:SSLContext::HttpsContext
send2Socket	core/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:tigerso::File
send2Socket	core/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn, off_t& offset, size_t count) {$/;"	f	class:tigerso::File
send2Socket	http/HttpBodyFile.cpp	/^int HttpBodyFile::send2Socket(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
send2Socket	net/RingBuffer.cpp	/^int RingBuffer::send2Socket(Socket& mcsock) {$/;"	f	class:tigerso::RingBuffer
send2Socket	net/RingBuffer.cpp	/^int RingBuffer::send2Socket(int sockfd) {$/;"	f	class:tigerso::RingBuffer
send2Socket	test/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
send2Socket	test/HttpFile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
send2Socket	test/HttpFile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn, off_t& offset, size_t count) {$/;"	f	class:File
send2Socket	test/HttpFile/RingBuffer.h	/^    int send2Socket(int sockfd) {$/;"	f	class:RingBuffer
send2Socket	test/RingBuffer.h	/^    int send2Socket(int sockfd) {$/;"	f	class:RingBuffer
send2Socket	test/sendfile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
sendChunk	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendChunk(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
sendChunk2Socket	test/HttpFile/HttpBodyFile.h	/^    int sendChunk2Socket(int sockfd) {$/;"	f	class:HttpBodyFile
sendContent	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendContent(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
sendContent2Socket	test/HttpFile/HttpBodyFile.h	/^    int sendContent2Socket(int sockfd) {$/;"	f	class:HttpBodyFile
sendFile	test/HttpFile/sendcontent.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
sendFile	test/HttpFile/sendfile.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
sendFile	test/sendfile/sendfile.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
sendFileChunk	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendFileChunk(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
sendFileChunk	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendFileChunk(int sockfd) {$/;"	f	class:tigerso::HttpBodyFile
sendFileContent	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendFileContent(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
sendFileContent	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendFileContent(int sockfd) {$/;"	f	class:tigerso::HttpBodyFile
sendNIO	net/Socket.cpp	/^ssize_t Socket::sendNIO() {$/;"	f	class:tigerso::Socket
sendQuery	dns/DNSResolver.cpp	/^int DNSResolver::sendQuery(Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
sendToSocket	net/Buffer.cpp	/^int Buffer::sendToSocket(Socket& mcsock) {$/;"	f	class:tigerso::Buffer
senddone_	net/Buffer.h	/^    bool senddone_ = false;$/;"	m	class:tigerso::Buffer
sendfile	http/HttpBodyFile.cpp	/^bool HttpBodyFile::sendfile = true;$/;"	m	class:tigerso::HttpBodyFile	file:
sendfile	http/HttpBodyFile.h	/^    static bool sendfile;$/;"	m	class:tigerso::HttpBodyFile
serrno	ssl/SSLContext.h	/^    int serrno = SSL_ERROR_NONE;$/;"	m	class:tigerso::SSLContext
server2close_	http/HttpProxy.h	/^    bool server2close_ = false;$/;"	m	class:tigerso::HttpProxyConnection
server2close_	test/backup/http_proxy.cpp	/^    bool server2close_ = false;$/;"	m	class:HttpProxyConnection	file:
serverCertfile	test/https_lib/Https.h	/^    std::string serverCertfile;$/;"	m	class:SSLContextFactory
serverCloseHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverCloseHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverCloseHandle	test/backup/http_proxy.cpp	/^  int serverCloseHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverConnectTo	http/HttpProxy.cpp	/^int HttpProxyConnection::serverConnectTo(const char* ip, time_t ttl) {$/;"	f	class:tigerso::HttpProxyConnection
serverConnectTo	test/backup/http_proxy.cpp	/^    int serverConnectTo(const char* ip, time_t ttl) {$/;"	f	class:HttpProxyConnection
serverContexts	test/https_lib/Https.h	/^    SSL_CTX* serverContexts[SSL_VERSION_UNKNOW];$/;"	m	class:SSLContextFactory
serverDecideSkipBody	http/HttpProxy.cpp	/^void HttpProxyConnection::serverDecideSkipBody() {$/;"	f	class:tigerso::HttpProxyConnection
serverDecideSkipBody	test/backup/http_proxy.cpp	/^    void serverDecideSkipBody() {$/;"	f	class:HttpProxyConnection	file:
serverErrorHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverErrorHandle(Socket& server) {  return serverRDHUPHandle(server); }$/;"	f	class:tigerso::HttpProxyConnection
serverErrorHandle	test/backup/http_proxy.cpp	/^    int serverErrorHandle(Socket& server) {  return serverRDHUPHandle(server); }$/;"	f	class:HttpProxyConnection
serverFirstWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverFirstWriteHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverFirstWriteHandle	test/backup/http_proxy.cpp	/^    int serverFirstWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverOnlyWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverOnlyWriteHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverOnlyWriteHandle	test/backup/http_proxy.cpp	/^    int serverOnlyWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverRDHUPHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverRDHUPHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverRDHUPHandle	test/backup/http_proxy.cpp	/^    int serverRDHUPHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverReadHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverReadHandle	test/backup/http_proxy.cpp	/^    int serverReadHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverSafeClose	http/HttpProxy.cpp	/^int HttpProxyConnection::serverSafeClose(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverSafeClose	test/backup/http_proxy.cpp	/^   int serverSafeClose(Socket& server) {$/;"	f	class:HttpProxyConnection
serverTimeoutHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverTimeoutHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverTunnelReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverTunnelReadHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverTunnelReadHandle	test/backup/http_proxy.cpp	/^    int serverTunnelReadHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverTunnelWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverTunnelWriteHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverTunnelWriteHandle	test/backup/http_proxy.cpp	/^    int serverTunnelWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverWriteHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverWriteHandle	test/backup/http_proxy.cpp	/^    int serverWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
server_addr_	dns/DNSResolver.h	/^    sockaddr_in server_addr_;$/;"	m	class:tigerso::DNSResolver
serverptr_	http/HttpProxyConnection.h	/^    std::shared_ptr<Socket> serverptr_;$/;"	m	class:tigerso::HttpProxyConnection
serverptr_	test/test_http.cpp	/^    SocketPtr serverptr_ = nullptr;$/;"	m	class:ProxyConnection	file:
service_	net/Acceptor.h	/^    ServiceContext service_;$/;"	m	class:tigerso::Acceptor
setAfterCallback	net/Channel.cpp	/^EventFunc Channel::setAfterCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setBeforeCallback	net/Channel.cpp	/^EventFunc Channel::setBeforeCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setBlockingIO	core/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:tigerso::File
setBlockingIO	test/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setBlockingIO	test/HttpFile/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setBlockingIO	test/sendfile/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setBody	http/HttpMessage.cpp	/^void HttpMessage::setBody(const std::string& body) { body_.writeIn(body.c_str(), body.size()); }$/;"	f	class:tigerso::HttpMessage
setBodyFileName	http/HttpMessage.cpp	/^int HttpMessage::setBodyFileName(const std::string& fn) {$/;"	f	class:tigerso::HttpMessage
setCallback	dns/DNSResolver.h	/^    int setCallback(DNS_CALLBACK cb) {callback_ = cb;}$/;"	f	class:tigerso::DNSResolver
setChunkedTransfer	http/HttpMessage.cpp	/^void HttpMessage::setChunkedTransfer(bool bin) {$/;"	f	class:tigerso::HttpMessage
setCloseExec	net/Socket.cpp	/^void Socket::setCloseExec(bool on) {$/;"	f	class:tigerso::Socket
setConfigPath	core/ConfigParser.cpp	/^void ConfigParser::setConfigPath(const std::string& file)$/;"	f	class:tigerso::ConfigParser
setConnectionLimitation	test/Acceptor.cpp	/^int Acceptor::setConnectionLimitation(const int num) {$/;"	f	class:tigerso::Acceptor
setContentLength	http/HttpMessage.cpp	/^void HttpMessage::setContentLength(const unsigned int length) {$/;"	f	class:tigerso::HttpMessage
setContentType	http/HttpMessage.cpp	/^void HttpMessage::setContentType(const std::string& type) {$/;"	f	class:tigerso::HttpMessage
setCookie	http/HttpMessage.cpp	/^void HttpMessage::setCookie(const std::string& cookie) {$/;"	f	class:tigerso::HttpMessage
setDefaultName	core/Thread.cpp	/^void Thread::setDefaultName() {$/;"	f	class:tigerso::Thread
setDesc	http/HttpMessage.h	/^    virtual void setDesc(const std::string&) {}$/;"	f	class:tigerso::HttpMessage
setDesc	http/HttpResponse.cpp	/^void HttpResponse::setDesc(const std::string& desc) { desc_ = desc; }$/;"	f	class:tigerso::HttpResponse
setEraseFunc	http/HttpProxy.cpp	/^void HttpProxyConnection::setEraseFunc(LOOP_CALLBACK cb) { erase_func_ = cb; }$/;"	f	class:tigerso::HttpProxyConnection
setEraseFunc	test/backup/http_proxy.cpp	/^    void setEraseFunc(LOOP_CALLBACK cb) { erase_func_ = cb; }$/;"	f	class:HttpProxyConnection
setErrorCallback	net/Channel.cpp	/^EventFunc Channel::setErrorCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setEventHandle	net/Socket.cpp	/^bool Socket::setEventHandle(EventHandle func, unsigned short flag) {$/;"	f	class:tigerso::Socket
setEvents	net/Channel.cpp	/^int Channel::setEvents(bool readable, bool writeable, bool edge, bool keep) {$/;"	f	class:tigerso::Channel
setEventsLoopPtr	http/HttpProxy.cpp	/^void HttpProxyConnection::setEventsLoopPtr(EventsLoop* loop) { elooptr_ = loop; }$/;"	f	class:tigerso::HttpProxyConnection
setEventsLoopPtr	test/backup/http_proxy.cpp	/^    void setEventsLoopPtr(EventsLoop* loop) {$/;"	f	class:HttpProxyConnection
setFile	http/HttpBodyFile.cpp	/^void HttpBodyFile::setFile(const char* filename) {$/;"	f	class:tigerso::HttpBodyFile
setFile	test/HttpFile/HttpBodyFile.h	/^    void setFile(const char* filename) {$/;"	f	class:HttpBodyFile
setFilename	core/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:tigerso::File
setFilename	test/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setFilename	test/HttpFile/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setFilename	test/sendfile/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setInBufferPtr	net/Socket.h	/^    void setInBufferPtr(std::shared_ptr<Buffer> inptr) { bufPtr_.in_ = inptr; }$/;"	f	class:tigerso::Socket
setKeepAlive	http/HttpMessage.cpp	/^void HttpMessage::setKeepAlive(bool bin) {$/;"	f	class:tigerso::HttpMessage
setKeepAlive	net/Socket.cpp	/^void Socket::setKeepAlive(bool on) {$/;"	f	class:tigerso::Socket
setLevel	core/Logging.cpp	/^int Logging::setLevel(const std::string& le)$/;"	f	class:tigerso::Logging
setLogFile	core/Logging.cpp	/^int Logging::setLogFile(const std::string& file)$/;"	f	class:tigerso::Logging
setLogPath	core/Logging.cpp	/^int Logging::setLogPath(const std::string& path)$/;"	f	class:tigerso::Logging
setMethod	http/HttpMessage.h	/^    virtual void setMethod(const std::string& method) {}$/;"	f	class:tigerso::HttpMessage
setMethod	http/HttpRequest.cpp	/^void HttpRequest::setMethod(const std::string& method) { method_ = method; }$/;"	f	class:tigerso::HttpRequest
setNIO	net/Socket.cpp	/^void Socket::setNIO(bool unblock) {$/;"	f	class:tigerso::Socket
setOutBufferPtr	net/Socket.h	/^    void setOutBufferPtr(std::shared_ptr<Buffer> outptr) { bufPtr_.out_ = outptr; }$/;"	f	class:tigerso::Socket
setParseState	http/HttpParser.h	/^    void setParseState(PARSE_STATE state) { state_ = state; }$/;"	f	class:tigerso::HttpParser
setPrimaryAddr	dns/DNSResolver.h	/^    static void setPrimaryAddr(const std::string& paddr) { primary_addr_ = paddr; }$/;"	f	class:tigerso::DNSResolver
setRdhupCallback	net/Channel.cpp	/^EventFunc Channel::setRdhupCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setReadCallback	net/Channel.cpp	/^EventFunc Channel::setReadCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setRole	net/Socket.cpp	/^void Socket::setRole(const socket_role_t& role) {$/;"	f	class:tigerso::Socket
setSecondAddr	dns/DNSResolver.h	/^    static void setSecondAddr(const std::string& saddr) { second_addr_ = saddr; }$/;"	f	class:tigerso::DNSResolver
setSkipBody	http/HttpParser.h	/^    void setSkipBody(bool skip) { skipbody_ = skip; }$/;"	f	class:tigerso::HttpParser
setSocket	net/Socket.cpp	/^void Socket::setSocket(const socket_t& sockfd) {$/;"	f	class:tigerso::Socket
setSocketRegisterFunc	http/HttpProxy.cpp	/^void HttpProxyConnection::setSocketRegisterFunc(EventFunc f) {register_func_ = f;}$/;"	f	class:tigerso::HttpProxyConnection
setSocketRegisterFunc	test/backup/http_proxy.cpp	/^    void setSocketRegisterFunc(EventFunc f) {register_func_ = f;}$/;"	f	class:HttpProxyConnection
setStage	net/Socket.cpp	/^void Socket::setStage(const socket_stage_t& stage) {$/;"	f	class:tigerso::Socket
setStatuscode	http/HttpMessage.h	/^    virtual void setStatuscode(int) {}$/;"	f	class:tigerso::HttpMessage
setStatuscode	http/HttpResponse.cpp	/^void HttpResponse::setStatuscode(int code) { $/;"	f	class:tigerso::HttpResponse
setStickDNSNode	dns/DNSCache.cpp	/^int DNSCache::setStickDNSNode(std::string& host, std::string& ip) {$/;"	f	class:tigerso::DNSCache
setStrAddr	net/Socket.cpp	/^void Socket::setStrAddr(const std::string& addr) {$/;"	f	class:tigerso::Socket
setStrPort	net/Socket.cpp	/^void Socket::setStrPort(const std::string& port) {$/;"	f	class:tigerso::Socket
setTcpNoDelay	net/Socket.cpp	/^void Socket::setTcpNoDelay(bool on) {$/;"	f	class:tigerso::Socket
setTimeout	net/EventsLoop.cpp	/^void EventsLoop::setTimeout(const int time) { waitTime_ = time; }$/;"	f	class:tigerso::EventsLoop
setTimeoutCallback	net/Channel.cpp	/^EventFunc Channel::setTimeoutCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setUrl	http/HttpMessage.h	/^    virtual void setUrl(const std::string& Url){}$/;"	f	class:tigerso::HttpMessage
setUrl	http/HttpRequest.cpp	/^void HttpRequest::setUrl(const std::string& url) { url_ = url; }$/;"	f	class:tigerso::HttpRequest
setValueByHeader	http/HttpMessage.cpp	/^void HttpMessage::setValueByHeader(const std::string& header, const std::string& value) {$/;"	f	class:tigerso::HttpMessage
setVersion	http/HttpMessage.cpp	/^void HttpMessage::setVersion(const std::string& verison) { version_ = verison; }$/;"	f	class:tigerso::HttpMessage
setWriteCallback	net/Channel.cpp	/^EventFunc Channel::setWriteCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
set_signal_handler	core/SysUtil.cpp	/^signal_func* SysUtil::set_signal_handler(int signo, signal_func* func) {$/;"	f	class:tigerso::SysUtil
settings_	http/HttpParser.h	/^    http_parser_settings settings_;$/;"	m	class:tigerso::HttpParser
setupCertKey	ssl/SSLContext.cpp	/^int SSLContext::setupCertKey(X509* cert, EVP_PKEY* pkey) {$/;"	f	class:tigerso::SSLContext
setupCertKey	test/backup/SSLContex.h	/^    int setupCertKey(X509* cert, EVP_PKEY* pkey) {$/;"	f	class:HttpsContext
setupCertKey	test/https_lib/SSLContext.cpp	/^    int setupCertKey(X509* cert, EVP_PKEY* pkey) {$/;"	f	class:SSLContext::HttpsContext
setupInterestedSignal	core/DaemonBase.cpp	/^int DaemonBase::setupInterestedSignal() {$/;"	f	class:tigerso::DaemonBase
setupInterestedSignal	test/DaemonBase.cpp	/^int DaemonBase::setupInterestedSignal() {$/;"	f	class:tigerso::DaemonBase
share_count	test/test_mutex.cpp	/^    share_count():count(0), pid(-1) {}$/;"	f	struct:share_count
share_count	test/test_mutex.cpp	/^struct share_count {$/;"	s	file:
shmCache_	dns/DNSCache.h	/^    std::map<std::string, std::pair<std::string, time_t>> shmCache_;$/;"	m	class:tigerso::DNSCache
shm_	dns/DNSCache.h	/^    SharedMemory shm_;$/;"	m	class:tigerso::DNSCache
shm_len	core/SysUtil.h	/^    size_t shm_len;$/;"	m	class:tigerso::SharedMemory
shm_mutex_t	core/SysUtil.h	/^struct shm_mutex_t {$/;"	s	namespace:tigerso
shm_name	core/SysUtil.h	/^    char shm_name[1024];$/;"	m	struct:tigerso::shm_mutex_t
shm_name	core/SysUtil.h	/^    string shm_name;$/;"	m	class:tigerso::SharedMemory
shm_name	core/SysUtil.h	/^    string shm_name;$/;"	m	class:tigerso::ShmMutex
shm_pid	core/SysUtil.h	/^    pid_t shm_pid;$/;"	m	class:tigerso::SharedMemory
shm_pid	core/SysUtil.h	/^    pid_t shm_pid;$/;"	m	class:tigerso::ShmMutex
shm_prot	core/SysUtil.h	/^    int shm_prot;$/;"	m	class:tigerso::SharedMemory
shm_ptr	core/SysUtil.h	/^    void* shm_ptr;$/;"	m	class:tigerso::SharedMemory
showComplete	test/HttpFile/sendcontent.cc	25;"	d	file:
showComplete	test/HttpFile/sendfile.cc	25;"	d	file:
showComplete	test/sendfile/sendfile.cc	25;"	d	file:
showIPAddress	test/test_dns.cpp	/^int showIPAddress(const char* ipaddr, time_t rttl) {$/;"	f
showProcess	test/HttpFile/sendcontent.cc	/^void showProcess(long now, long total) {$/;"	f
showProcess	test/HttpFile/sendfile.cc	/^void showProcess(long now, long total) {$/;"	f
showProcess	test/sendfile/sendfile.cc	/^void showProcess(long now, long total) {$/;"	f
signCert	ssl/SSLHelper.cpp	/^bool SSLHelper::signCert(X509* ca_cert, EVP_PKEY* ca_pkey, int key_length, X509* org_cert, X509** cert, EVP_PKEY** pkey) { $/;"	f	class:tigerso::SSLHelper
signal_func	core/SysUtil.h	/^typedef void (signal_func)(int);$/;"	t	namespace:tigerso
signo	core/DaemonBase.cpp	/^    int signo;$/;"	m	struct:tigerso::SignalHandleSet	file:
singleton	core/BaseClass.h	/^class singleton {$/;"	c	namespace:tigerso
size	http/HttpBodyFile.cpp	/^size_t HttpBodyFile::size() { return _file.getFileSize() + _ringbuf.size(); }$/;"	f	class:tigerso::HttpBodyFile
size	net/RingBuffer.cpp	/^size_t RingBuffer::size() { return (_capacity - space() - 1); }$/;"	f	class:tigerso::RingBuffer
size	net/Upstream.h	/^    int size() {$/;"	f	class:tigerso::Upstream
size	test/HttpFile/HttpBodyFile.h	/^    size_t size() { return _file.getFileSize() + _ringbuf.size(); }$/;"	f	class:HttpBodyFile
size	test/HttpFile/RingBuffer.h	/^    size_t size() { return (_size - space() - 1); }$/;"	f	class:RingBuffer
size	test/RingBuffer.h	/^    size_t size() { return (_size - space() - 1); }$/;"	f	class:RingBuffer
size	test/sendfile/HttpBodyFile.h	/^    size_t size() { return _file.getFileSize() + _ringbuf.size(); }$/;"	f	class:HttpBodyFile
size	test/sendfile/RingBuffer.h	/^    size_t size() { return (_size - space() -1); }$/;"	f	class:RingBuffer
size_	core/File.h	/^    off_t size_;$/;"	m	class:tigerso::File
size_	test/File.h	/^    off_t size_;$/;"	m	class:File
size_	test/HttpFile/File.h	/^    off_t size_;$/;"	m	class:File
size_	test/sendfile/File.h	/^    off_t size_;$/;"	m	class:File
skipBody	http/HttpParser.h	/^    bool skipBody() { return skipbody_; }$/;"	f	class:tigerso::HttpParser
skipbody_	http/HttpParser.h	/^    bool skipbody_ = false;$/;"	m	class:tigerso::HttpParser
sock_	net/Channel.h	/^    Socket* sock_;$/;"	m	class:tigerso::Channel
socketDisableReadEvent	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketDisableReadEvent(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketDisableReadEvent	test/backup/http_proxy.cpp	/^    bool socketDisableReadEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketDisableWriteEvent	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketDisableWriteEvent(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketDisableWriteEvent	test/backup/http_proxy.cpp	/^    bool socketDisableWriteEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketEnableReadEvent	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketEnableReadEvent(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketEnableReadEvent	test/backup/http_proxy.cpp	/^    bool socketEnableReadEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketEnableWriteEvent	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketEnableWriteEvent(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketEnableWriteEvent	test/backup/http_proxy.cpp	/^    bool socketEnableWriteEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketMaxNum_	core/DaemonBase.h	/^    int socketMaxNum_ = 1024;$/;"	m	class:tigerso::DaemonBase
socketMaxNum_	test/Daemon.h	/^    int socketMaxNum_ = 1024;$/;"	m	class:tigerso::DaemonBase
socketNullHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::socketNullHandle(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketNullHandle	test/backup/http_proxy.cpp	/^    int socketNullHandle(Socket& sock) {$/;"	f	class:HttpProxyConnection
socketSetEventHandle	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketSetEventHandle(Socket& sock, EventFunc func, unsigned short flag) {$/;"	f	class:tigerso::HttpProxyConnection
socketSetEventHandle	test/backup/http_proxy.cpp	/^    bool socketSetEventHandle(Socket& sock, EventFunc func, unsigned short flag) {$/;"	f	class:HttpProxyConnection	file:
socket_role_t	net/Socket.h	/^typedef int socket_role_t;$/;"	t	namespace:tigerso
socket_stage_t	net/Socket.h	/^typedef int socket_stage_t;$/;"	t	namespace:tigerso
socket_t	dns/DNSResolver.h	/^typedef int socket_t;$/;"	t	namespace:tigerso
socket_t	net/Buffer.h	/^    typedef int socket_t;$/;"	t	class:tigerso::Buffer
socket_t	net/Socket.h	/^typedef int socket_t;$/;"	t	namespace:tigerso
sockfd	net/Channel.h	/^    int sockfd = -1;$/;"	m	class:tigerso::Channel
sockfd_	dns/DNSResolver.h	/^    socket_t sockfd_ = -1;$/;"	m	class:tigerso::DNSResolver
sockfd_	net/Socket.h	/^    socket_t sockfd_ = -1;$/;"	m	class:tigerso::Socket
sockfd_	test/test_http.cpp	/^    socket_t sockfd_  = -1;$/;"	m	class:ProxyConnection	file:
sockptr	test/http_server.cpp	/^    const SocketPtr sockptr;$/;"	m	class:HttpConnection	file:
sogouShow	test/HttpFile/index.html	/^		function sogouShow(){}$/;"	f
sosoShow	test/HttpFile/index.html	/^		function sosoShow(){}$/;"	f
space	net/RingBuffer.cpp	/^size_t RingBuffer::space() {$/;"	f	class:tigerso::RingBuffer
space	test/HttpFile/RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
space	test/RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
space	test/sendfile/RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
sparser_	http/HttpProxy.h	/^    HttpParser sparser_;$/;"	m	class:tigerso::HttpProxyConnection
sparser_	test/backup/http_proxy.cpp	/^    HttpParser sparser_;$/;"	m	class:HttpProxyConnection	file:
sslEnabled	net/Acceptor.h	/^    bool sslEnabled = false;$/;"	m	struct:tigerso::ServiceContext
ssockptr	http/HttpProxy.h	/^    const SocketPtr ssockptr;$/;"	m	class:tigerso::HttpProxyConnection
ssockptr	test/backup/http_proxy.cpp	/^    const SOCKETPTR ssockptr;$/;"	m	class:HttpProxyConnection	file:
stage_	net/Socket.h	/^    socket_stage_t stage_ = SOCKET_STAGE_UINIT;$/;"	m	class:tigerso::Socket
start	core/DaemonBase.cpp	/^int DaemonBase::start() {$/;"	f	class:tigerso::DaemonBase
start	core/Thread.cpp	/^void Thread::start() {$/;"	f	class:tigerso::Thread
start	core/ThreadPool.h	/^    void start(const int threadNum) {$/;"	f	class:tigerso::ThreadPool
start	net/ConnectionFactory.cpp	/^int ConnectionFactory::start() {$/;"	f	class:tigerso::ConnectionFactory
start	test/DaemonBase.cpp	/^int DaemonBase::start(const int port) {$/;"	f	class:tigerso::DaemonBase
startLoop	http/HttpProxy.cpp	/^int HttpProxyLoop::startLoop() {$/;"	f	class:tigerso::HttpProxyLoop
startLoop	test/backup/http_proxy.cpp	/^    int startLoop() {$/;"	f	class:HttpProxyLoop
startProxy	test/http_proxy.cpp	/^int startProxy() {$/;"	f
startThread	core/Thread.cpp	/^void* startThread(void* obj) {$/;"	f	namespace:tigerso
startWithLabel	dns/DNSResolver.h	/^    inline bool startWithLabel(unsigned char* cur) {$/;"	f	class:tigerso::DNSResolver
startWithPointer	dns/DNSResolver.h	/^    inline bool startWithPointer(unsigned char* cur) {$/;"	f	class:tigerso::DNSResolver
start_	core/Thread.h	/^    bool start_ = false;$/;"	m	class:tigerso::Thread
start_state	http/lib/http_parser.c	445;"	d	file:
started	core/Thread.h	/^    bool started() const { return start_; }$/;"	f	class:tigerso::Thread
state	http/lib/http_parser.c	/^enum state$/;"	g	file:
state	http/lib/http_parser.h	/^  unsigned int state : 7;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser
state_	http/HttpConnection.h	/^    HttpState state_ = TCP_INIT;$/;"	m	class:tigerso::HttpConnection
state_	http/HttpParser.h	/^    PARSE_STATE state_;$/;"	m	class:tigerso::HttpParser
state_	http/HttpProxyConnection.h	/^    HttpProxyState state_ = STATE_RESET;$/;"	m	class:tigerso::HttpProxyConnection
staticWebCGI	test/http_server.cpp	/^class staticWebCGI {$/;"	c	file:
status_code	http/lib/http_parser.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	struct:http_parser
status_pair_t	http/HttpMessage.cpp	/^typedef std::map<int, std::string>::value_type  status_pair_t;$/;"	t	namespace:tigerso	file:
statuscode_	http/HttpResponse.h	/^    int         statuscode_;$/;"	m	class:tigerso::HttpResponse
stickDNSData_	dns/DNSCache.h	/^    std::map<std::string, std::vector<std::string>> stickDNSData_;$/;"	m	class:tigerso::DNSCache
stop	core/DaemonBase.cpp	/^int DaemonBase::stop() {$/;"	f	class:tigerso::DaemonBase
stop	core/ThreadPool.h	/^    void stop() {$/;"	f	class:tigerso::ThreadPool
stop	net/ConnectionFactory.cpp	/^int ConnectionFactory::stop() {$/;"	f	class:tigerso::ConnectionFactory
stop	net/EventsLoop.cpp	/^int EventsLoop::stop() { loop_ = false; }$/;"	f	class:tigerso::EventsLoop
stop	test/DaemonBase.cpp	/^int DaemonBase::stop() {$/;"	f	class:tigerso::DaemonBase
stopLoop	http/HttpProxy.h	/^    int stopLoop() { eloop_.stop(); }$/;"	f	class:tigerso::HttpProxyLoop
store2Memory	dns/DNSCache.cpp	/^int DNSCache::store2Memory(const char* host, const char* ip, int ttl) {$/;"	f	class:tigerso::DNSCache
storeX509ToPEMStr	ssl/SSLHelper.cpp	/^int storeX509ToPEMStr(X509* cert, char* buf, int len) {$/;"	f	namespace:tigerso
stransaction_	http/HttpProxy.h	/^    HttpTransaction stransaction_;$/;"	m	class:tigerso::HttpProxyConnection
stransaction_	test/backup/http_proxy.cpp	/^    HttpTransaction stransaction_;$/;"	m	class:HttpProxyConnection	file:
switchBuffers	http/HttpProxyConnection.cpp	/^int HttpProxyConnection::switchBuffers() {$/;"	f	class:tigerso::HttpProxyConnection
switchRequest	http/HttpConnection.cpp	/^void HttpConnection::switchRequest() {$/;"	f	class:tigerso::HttpConnection
take	core/ThreadPool.h	/^    Task take() {$/;"	f	class:tigerso::ThreadPool
tasks_	core/ThreadPool.h	/^    std::deque<Task> tasks_;$/;"	m	class:tigerso::ThreadPool
tcpClose	net/Socket.cpp	/^int Socket::tcpClose() {$/;"	f	class:tigerso::Socket
tcpServer	test/test_http.cpp	/^int tcpServer(SocketPtr& master) {$/;"	f
test	test/backup/deleteself.cc	/^    mytest* test;$/;"	m	class:peer	file:
test	test/test_bind.cpp	/^    int test(nocopy& np) {$/;"	f	class:testbind
test	test/test_thread.cpp	/^void test() {$/;"	f
testExist	core/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:tigerso::File
testExist	test/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testExist	test/HttpFile/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testExist	test/sendfile/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testRead	core/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:tigerso::File
testRead	test/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testRead	test/HttpFile/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testRead	test/sendfile/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testUpstreamThread	net/Upstream.h	/^    bool testUpstreamThread() {$/;"	f	class:tigerso::Upstream
testWrite	core/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:tigerso::File
testWrite	test/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testWrite	test/HttpFile/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testWrite	test/sendfile/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testbind	test/test_bind.cpp	/^    testbind() {}$/;"	f	class:testbind
testbind	test/test_bind.cpp	/^class testbind {$/;"	c	file:
testdata	test/backup/deleteself.cc	/^    static int testdata;$/;"	m	class:mytest	file:
testdata2	test/backup/deleteself.cc	/^    static int testdata2;$/;"	m	class:mytest	file:
testf	test/test_bind.cpp	/^int testf(function<int()> func) {$/;"	f
threadId_	core/Thread.h	/^    pthread_t threadId_ = 0;$/;"	m	class:tigerso::Thread
threadName_	core/Thread.cpp	/^   __thread const char* threadName_ = "unknow thread";$/;"	m	namespace:tigerso::CurrentThread	file:
threadNum_	core/ThreadPool.h	/^    int threadNum_;$/;"	m	class:tigerso::ThreadPool
threads_	core/ThreadPool.h	/^    std::vector<ThreadPtr> threads_;$/;"	m	class:tigerso::ThreadPool
tid	core/Thread.cpp	/^   pid_t tid() {$/;"	f	namespace:tigerso::CurrentThread
tid	core/Thread.h	/^    pid_t tid() const { return *tid_; }$/;"	f	class:tigerso::Thread
tidStrLength	core/Thread.cpp	/^   __thread size_t tidStrLength = 0;$/;"	m	namespace:tigerso::CurrentThread	file:
tidString	core/CurrentThread.h	/^   inline const char* tidString() { return tidString_; }$/;"	f	namespace:tigerso::CurrentThread
tidString_	core/Thread.cpp	/^   __thread char tidString_[32] = {0};$/;"	m	namespace:tigerso::CurrentThread	file:
tid_	core/Thread.h	/^    std::shared_ptr<pid_t> tid_;$/;"	m	class:tigerso::Thread
tigerso	core/BaseClass.h	/^namespace tigerso {$/;"	n
tigerso	core/Condition.h	/^namespace tigerso{$/;"	n
tigerso	core/ConfigParser.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/ConfigParser.h	/^namespace tigerso {$/;"	n
tigerso	core/CurrentThread.h	/^namespace tigerso {$/;"	n
tigerso	core/DaemonBase.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/DaemonBase.h	/^namespace tigerso {$/;"	n
tigerso	core/Dechex.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/Dechex.h	/^namespace tigerso {$/;"	n
tigerso	core/File.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/File.h	/^namespace tigerso {$/;"	n
tigerso	core/FileLock.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/FileLock.h	/^namespace tigerso {$/;"	n
tigerso	core/Logging.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/Logging.h	/^namespace tigerso {$/;"	n
tigerso	core/SysUtil.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/SysUtil.h	/^namespace tigerso {$/;"	n
tigerso	core/Thread.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/Thread.h	/^namespace tigerso {$/;"	n
tigerso	core/ThreadMutex.h	/^namespace tigerso {$/;"	n
tigerso	core/ThreadPool.h	/^namespace tigerso {$/;"	n
tigerso	core/tigerso.h	/^namespace tigerso {$/;"	n
tigerso	dns/DNSCache.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	dns/DNSCache.h	/^namespace tigerso {$/;"	n
tigerso	dns/DNSResolver.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	dns/DNSResolver.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpBodyFile.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpBodyFile.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpConnection.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpConnection.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpFilter.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpMessage.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpMessage.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpParser.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpParser.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpProxy.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpProxy.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpProxyConnection.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpProxyConnection.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpRequest.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpRequest.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpResponse.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpResponse.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpService.h	/^namespace tigerso {$/;"	n
tigerso	net/Acceptor.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/Acceptor.h	/^namespace tigerso {$/;"	n
tigerso	net/Buffer.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/Buffer.h	/^namespace tigerso {$/;"	n
tigerso	net/Channel.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/Channel.h	/^namespace tigerso {$/;"	n
tigerso	net/Connection.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/Connection.h	/^namespace tigerso {$/;"	n
tigerso	net/ConnectionFactory.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/ConnectionFactory.h	/^namespace tigerso {$/;"	n
tigerso	net/EventsLoop.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/EventsLoop.h	/^namespace tigerso {$/;"	n
tigerso	net/RingBuffer.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/RingBuffer.h	/^namespace tigerso {$/;"	n
tigerso	net/Socket.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/Socket.h	/^namespace tigerso {$/;"	n
tigerso	net/SocketUtil.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/SocketUtil.h	/^namespace tigerso {$/;"	n
tigerso	net/TimeWheelEvent.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/TimeWheelEvent.h	/^namespace tigerso {$/;"	n
tigerso	net/Upstream.h	/^namespace tigerso {$/;"	n
tigerso	ssl/SSLContext.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	ssl/SSLContext.h	/^namespace tigerso {$/;"	n
tigerso	ssl/SSLHelper.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	ssl/SSLHelper.h	/^namespace tigerso {$/;"	n
tigerso	test/Acceptor.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	test/Acceptor.h	/^namespace tigerso {$/;"	n
tigerso	test/Connection.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	test/Connection.h	/^namespace tigerso {$/;"	n
tigerso	test/ConnectionFactory.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	test/ConnectionFactory.h	/^namespace tigerso {$/;"	n
tigerso	test/Daemon.h	/^namespace tigerso {$/;"	n
tigerso	test/DaemonBase.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	test/TCPServerLoop.h	/^namespace tigerso {$/;"	n
tigerso	util/FileTypeDetector.h	/^namespace tigerso {$/;"	n
timeoutHandle	dns/DNSResolver.cpp	/^int DNSResolver::timeoutHandle(Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
timeoutHandle	http/HttpConnection.cpp	/^int HttpConnection::timeoutHandle(Socket& sock){$/;"	f	class:tigerso::HttpConnection
timeoutHandle	http/HttpProxyConnection.cpp	/^int HttpProxyConnection::timeoutHandle(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
timeoutHandleEnter	net/Connection.cpp	/^int Connection::timeoutHandleEnter(Socket& _l) { return timeoutHandle(_l); }$/;"	f	class:tigerso::Connection
timeoutHandleEnter	test/Connection.cpp	/^int Connection::timeoutHandleEnter(Socket& _l) { return timeoutHandle(_l); }$/;"	f	class:tigerso::Connection
timeoutHandleEnter	test/TCPServerLoop.h	/^    int timeoutHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
timeout_cb	net/Channel.h	/^    EventFunc timeout_cb = nullptr;$/;"	m	class:tigerso::Channel
timer_	net/EventsLoop.h	/^    TimeWheelEvent timer_;$/;"	m	class:tigerso::EventsLoop
toLower	core/SysUtil.h	/^    void toLower(std::string& src, std::string& dst) { std::transform(src.begin(), src.end(), dst.begin(), ::tolower); }$/;"	f	class:tigerso::SysUtil
toString	http/HttpRequest.cpp	/^std::string HttpRequest::toString() {$/;"	f	class:tigerso::HttpRequest
toString	http/HttpResponse.cpp	/^std::string HttpResponse::toString() {$/;"	f	class:tigerso::HttpResponse
toString	net/Buffer.cpp	/^std::string Buffer::toString() const {$/;"	f	class:tigerso::Buffer
toUpper	core/SysUtil.h	/^    void toUpper(std::string& src, std::string& dst) { std::transform(src.begin(), src.end(), dst.begin(), ::toupper); }$/;"	f	class:tigerso::SysUtil
tokens	http/lib/http_parser.c	/^static const char tokens[256] = {$/;"	v	file:
topFixed	test/HttpFile/index.html	/^	function topFixed(){$/;"	f
transFlag	net/EventsLoop.cpp	/^evf_t EventsLoop::transFlag(Channel* cnptr) {$/;"	f	class:tigerso::EventsLoop
transferProxyBuffer	http/HttpProxy.cpp	/^void HttpProxyConnection::transferProxyBuffer() {$/;"	f	class:tigerso::HttpProxyConnection
transferProxyBuffer	test/backup/http_proxy.cpp	/^    void transferProxyBuffer() {$/;"	f	class:HttpProxyConnection	file:
try_lock	core/FileLock.cpp	/^int FileLock::try_lock() {$/;"	f	class:tigerso::FileLock
try_lock	core/SysUtil.cpp	/^int ShmMutex::try_lock()$/;"	f	class:tigerso::ShmMutex
try_lock	core/ThreadMutex.h	/^    int try_lock() {$/;"	f	class:tigerso::ThreadMutex
tunnelReadClientCallback	test/test_http.cpp	/^int tunnelReadClientCallback(SocketPtr& clientptr) {$/;"	f
tunnelReadServerCallback	test/test_http.cpp	/^int tunnelReadServerCallback(SocketPtr& serverptr) {$/;"	f
tunnelWriteClientCallback	test/test_http.cpp	/^int tunnelWriteClientCallback(SocketPtr& clientptr) {$/;"	f
tunnelWriteServerCallback	test/test_http.cpp	/^int tunnelWriteServerCallback(SocketPtr& serverptr) {$/;"	f
type	http/lib/http_parser.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	struct:http_parser
type_	net/Acceptor.h	/^    ConnectionType type_;$/;"	m	class:tigerso::Acceptor
type_	test/Acceptor.h	/^    ConnectionType type_;$/;"	m	class:tigerso::Acceptor
type_	test/ConnectionFactory.h	/^    ConnectionType type_;$/;"	m	class:tigerso::ConnectionFactory
type_	test/TCPServerLoop.h	/^    ConnectionType type_;$/;"	m	class:tigerso::ConnectionFactory
typenum	util/FileTypeDetector.h	/^    int typenum;$/;"	m	struct:tigerso::ScanFileType
typenum	util/FileTypes/FileTypeDetector.h	/^    int typenum;$/;"	m	struct:tigerso::util::ScanFileType
udpptr_	http/HttpProxyConnection.h	/^    std::shared_ptr<Socket> udpptr_;$/;"	m	class:tigerso::HttpProxyConnection
udpsock	test/test_dns.cpp	/^Socket udpsock;$/;"	v
uint16_t	http/lib/http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	http/lib/http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	http/lib/http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	http/lib/http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t
unassignHolder	core/ThreadMutex.h	/^    void unassignHolder() {$/;"	f	class:tigerso::ThreadMutex
unhex	http/lib/http_parser.c	/^static const int8_t unhex[256] =$/;"	v	file:
unlink	core/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:tigerso::File
unlink	test/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlink	test/HttpFile/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlink	test/sendfile/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlinkPidFile	core/DaemonBase.cpp	/^int DaemonBase::unlinkPidFile() {$/;"	f	class:tigerso::DaemonBase
unlinkPidFile	test/DaemonBase.cpp	/^int DaemonBase::unlinkPidFile() {$/;"	f	class:tigerso::DaemonBase
unlinkServer	test/test_http.cpp	/^    bool unlinkServer(SocketPtr& sockptr) {$/;"	f	class:ProxyConnection
unlock	core/FileLock.cpp	/^int FileLock::unlock() {$/;"	f	class:tigerso::FileLock
unlock	core/SysUtil.cpp	/^int ShmMutex::unlock()$/;"	f	class:tigerso::ShmMutex
unlock	core/ThreadMutex.h	/^    int unlock() {$/;"	f	class:tigerso::ThreadMutex
unregisterChannel	net/EventsLoop.cpp	/^int EventsLoop::unregisterChannel(Socket& socket) {$/;"	f	class:tigerso::EventsLoop
update	net/Channel.cpp	/^bool Channel::update() {$/;"	f	class:tigerso::Channel
updateChannel	net/EventsLoop.cpp	/^int EventsLoop::updateChannel(Channel* cnptr) {$/;"	f	class:tigerso::EventsLoop
updateChannel	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::updateChannel(Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
updateChannel	test/backup/TimedEvent.h	/^    int updateChannel(Channel* cnptr) {$/;"	f	class:TimedEvent
updateDNS	dns/DNSCache.cpp	/^int DNSCache::updateDNS(const char* host, const char* ip, int& ttl) {$/;"	f	class:tigerso::DNSCache
updateNode	dns/DNSCache.cpp	/^int DNSCache::updateNode(DNSNode& dst, const char* host, unsigned char* key, const char* ip, int& ttl) {$/;"	f	class:tigerso::DNSCache
upgrade	http/lib/http_parser.h	/^  unsigned int upgrade : 1;$/;"	m	struct:http_parser
url_	http/HttpRequest.h	/^    std::string url_;$/;"	m	class:tigerso::HttpRequest
userLogin	test/HttpFile/index.html	/^	function userLogin(){$/;"	f
util	util/FileTypes/FileTypeDetector.h	/^namespace tigerso::util {$/;"	n	class:tigerso
uuid	http/HttpProxy.cpp	/^IDTYPE HttpProxyConnection::uuid() {$/;"	f	class:tigerso::HttpProxyConnection
uuid	test/backup/http_proxy.cpp	/^    static IDTYPE uuid() {$/;"	f	class:HttpProxyConnection	file:
validChannel	net/EventsLoop.cpp	18;"	d	file:
validFd	core/tigerso.h	60;"	d
validFd	test/File.h	16;"	d
validFd	test/HttpFile/File.h	19;"	d
validFd	test/sendfile/File.h	16;"	d
validSSL	ssl/SSLHelper.cpp	/^bool SSLHelper::validSSL(SSL* ssl) {$/;"	f	class:tigerso::SSLHelper
validate_filename	core/SysUtil.cpp	/^bool SysUtil::validate_filename(const string& filename)$/;"	f	class:tigerso::SysUtil
version_	http/HttpMessage.h	/^    std::string version_ = "HTTP\/1.1";$/;"	m	class:tigerso::HttpMessage
vp	test/test_class.cpp	/^    int vp() {$/;"	f	class:child
vp	test/test_class.cpp	/^    virtual int vp() {$/;"	f	class:parent
wait	core/Condition.h	/^    void wait() {$/;"	f	class:tigerso::Condition
waitChannel	net/EventsLoop.cpp	/^int EventsLoop::waitChannel() {$/;"	f	class:tigerso::EventsLoop
waitForSeconds	core/Condition.h	/^    bool waitForSeconds(double seconds) {$/;"	f	class:tigerso::Condition
waitTime_	net/EventsLoop.h	/^    int waitTime_ = 10000; \/\/10s$/;"	m	class:tigerso::EventsLoop
wkTid_	core/Thread.cpp	/^    std::weak_ptr<pid_t> wkTid_;$/;"	m	class:tigerso::ThreadData	file:
wrapB64	ssl/scripts/ca_converter.py	/^def wrapB64(str, width = 70):$/;"	f
writeCallback	test/test_http.cpp	/^int writeCallback(SocketPtr& sockptr) {$/;"	f
writeFlag	net/Channel.h	/^        bool writeFlag;$/;"	m	struct:tigerso::Channel::__anon6
writeHandle	http/HttpConnection.cpp	/^int HttpConnection::writeHandle(Socket& sock) {$/;"	f	class:tigerso::HttpConnection
writeHandle	http/HttpProxyConnection.cpp	/^int HttpProxyConnection::writeHandle(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
writeHandle	test/TCPServerLoop.h	/^    virtual int writeHandle(Socket& _1) {$/;"	f	class:tigerso::Connection
writeHandleEnter	net/Connection.cpp	/^int Connection::writeHandleEnter(Socket& _l) { return writeHandle(_l); }$/;"	f	class:tigerso::Connection
writeHandleEnter	test/Connection.cpp	/^int Connection::writeHandleEnter(Socket& _l) { return writeHandle(_l); }$/;"	f	class:tigerso::Connection
writeHandleEnter	test/TCPServerLoop.h	/^    int writeHandleEnter(Socket& _l) {$/;"	f	class:tigerso::Connection
writeIdx_	net/Buffer.h	/^    size_t writeIdx_;$/;"	m	class:tigerso::Buffer
writeIn	core/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:tigerso::File
writeIn	http/HttpBodyFile.cpp	/^int HttpBodyFile::writeIn(const char* buf, size_t len) {$/;"	f	class:tigerso::HttpBodyFile
writeIn	net/RingBuffer.cpp	/^int RingBuffer::writeIn(const char* buf, size_t length) {$/;"	f	class:tigerso::RingBuffer
writeIn	test/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	test/HttpFile/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	test/HttpFile/RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writeIn	test/RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writeIn	test/sendfile/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	test/sendfile/RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writeInFromFile	net/RingBuffer.cpp	/^int RingBuffer::writeInFromFile(File& file) {$/;"	f	class:tigerso::RingBuffer
writePidFile	core/DaemonBase.cpp	/^int DaemonBase::writePidFile() {$/;"	f	class:tigerso::DaemonBase
writePidFile	test/DaemonBase.cpp	/^int DaemonBase::writePidFile() {$/;"	f	class:tigerso::DaemonBase
writeableBytes	net/Buffer.cpp	/^size_t Buffer::writeableBytes() const {$/;"	f	class:tigerso::Buffer
writeable_cb	net/Channel.h	/^    EventFunc writeable_cb = nullptr;$/;"	m	class:tigerso::Channel
~Acceptor	net/Acceptor.cpp	/^Acceptor::~Acceptor() {}$/;"	f	class:tigerso::Acceptor
~Acceptor	test/Acceptor.cpp	/^Acceptor::~Acceptor() {}$/;"	f	class:tigerso::Acceptor
~Buffer	net/Buffer.cpp	/^Buffer::~Buffer() {$/;"	f	class:tigerso::Buffer
~Condition	core/Condition.h	/^    ~Condition() {$/;"	f	class:tigerso::Condition
~ConfigParser	core/ConfigParser.h	/^    ~ConfigParser() {}$/;"	f	class:tigerso::ConfigParser
~Connection	net/Connection.cpp	/^Connection::~Connection() {}$/;"	f	class:tigerso::Connection
~Connection	test/Connection.cpp	/^Connection::~Connection() {}$/;"	f	class:tigerso::Connection
~Connection	test/TCPServerLoop.h	/^    ~Connection() { }$/;"	f	class:tigerso::Connection
~ConnectionFactory	net/ConnectionFactory.cpp	/^ConnectionFactory::~ConnectionFactory() {}$/;"	f	class:tigerso::ConnectionFactory
~ConnectionFactory	test/ConnectionFactory.cpp	/^ConnectionFactory::~ConnectionFactory() {}$/;"	f	class:tigerso::ConnectionFactory
~DNSCache	dns/DNSCache.cpp	/^DNSCache::~DNSCache() {}$/;"	f	class:tigerso::DNSCache
~DNSResolver	dns/DNSResolver.cpp	/^DNSResolver::~DNSResolver() {$/;"	f	class:tigerso::DNSResolver
~DaemonBase	core/DaemonBase.cpp	/^DaemonBase::~DaemonBase() {$/;"	f	class:tigerso::DaemonBase
~DaemonBase	test/DaemonBase.cpp	/^DaemonBase::~DaemonBase() {$/;"	f	class:tigerso::DaemonBase
~EventsLoop	net/EventsLoop.cpp	/^EventsLoop::~EventsLoop() {$/;"	f	class:tigerso::EventsLoop
~File	core/File.cpp	/^File::~File() {$/;"	f	class:tigerso::File
~File	test/File.cpp	/^File::~File() {$/;"	f	class:File
~File	test/HttpFile/File.cpp	/^File::~File() {$/;"	f	class:File
~File	test/sendfile/File.cpp	/^File::~File() {$/;"	f	class:File
~FileLock	core/FileLock.cpp	/^FileLock::~FileLock() {$/;"	f	class:tigerso::FileLock
~FileTypeDetector	util/FileTypeDetector.h	/^    ~FileTypeDetector() {$/;"	f	class:tigerso::FileTypeDetector
~FileTypeDetector	util/FileTypes/FileTypeDetector.h	/^    ~FileTypeDetector() {$/;"	f	class:tigerso::util::FileTypeDetector
~HttpMessage	http/HttpMessage.cpp	/^HttpMessage::~HttpMessage() {}$/;"	f	class:tigerso::HttpMessage
~HttpProxyConnection	http/HttpProxy.cpp	/^HttpProxyConnection::~HttpProxyConnection() {}$/;"	f	class:tigerso::HttpProxyConnection
~HttpProxyConnection	test/backup/http_proxy.cpp	/^    ~HttpProxyConnection() {$/;"	f	class:HttpProxyConnection
~HttpService	http/HttpService.h	/^    ~HttpService(){}$/;"	f	class:tigerso::HttpService
~HttpsContext	test/backup/SSLContex.h	/^    ~HttpsContext() {$/;"	f	class:HttpsContext
~HttpsContext	test/https_lib/SSLContext.cpp	/^    ~HttpsContext() {$/;"	f	class:SSLContext::HttpsContext
~LockGuard	core/SysUtil.h	/^    ~LockGuard() {$/;"	f	class:tigerso::LockGuard
~LockTryGuard	core/SysUtil.h	/^    ~LockTryGuard() {$/;"	f	class:tigerso::LockTryGuard
~Logging	core/Logging.h	/^    ~Logging() {}$/;"	f	class:tigerso::Logging
~RingBuffer	net/RingBuffer.cpp	/^RingBuffer::~RingBuffer() {$/;"	f	class:tigerso::RingBuffer
~RingBuffer	test/HttpFile/RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~RingBuffer	test/RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~RingBuffer	test/sendfile/RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~SSLContext	ssl/SSLContext.cpp	/^SSLContext::~SSLContext() {$/;"	f	class:tigerso::SSLContext
~SSLContextFactory	test/https_lib/Https.h	/^    ~SSLContextFactory() {$/;"	f	class:SSLContextFactory
~SharedMemory	core/SysUtil.h	/^    ~SharedMemory() {$/;"	f	class:tigerso::SharedMemory
~ShmMutex	core/SysUtil.cpp	/^ShmMutex::~ShmMutex()$/;"	f	class:tigerso::ShmMutex
~Singleton	core/BaseClass.h	/^    virtual ~Singleton() {}$/;"	f	class:tigerso::Singleton
~Socket	net/Socket.h	/^    ~Socket() { this->close(); }$/;"	f	class:tigerso::Socket
~TCPServerLoop	test/TCPServerLoop.h	/^    ~TCPServerLoop() {}$/;"	f
~Thread	core/Thread.cpp	/^Thread::~Thread() {$/;"	f	class:tigerso::Thread
~ThreadMutex	core/ThreadMutex.h	/^    ~ThreadMutex() {$/;"	f	class:tigerso::ThreadMutex
~TimeEvent	test/backup/TimedEvent.h	/^    ~TimeEvent() { destory(); }$/;"	f	class:TimedEvent
~TimeWheelEvent	net/TimeWheelEvent.cpp	/^TimeWheelEvent::~TimeWheelEvent() { destory(); }$/;"	f	class:tigerso::TimeWheelEvent
~UnassignGuard	core/ThreadMutex.h	/^        ~UnassignGuard() {$/;"	f	class:tigerso::ThreadMutex::UnassignGuard
~Upstream	net/Upstream.h	/^    ~Upstream() { destory(); }$/;"	f	class:tigerso::Upstream
~child	test/test_class.cpp	/^    ~child() {}$/;"	f	class:child
~mytest	test/backup/deleteself.cc	/^   ~mytest() {$/;"	f	class:mytest
~nocopyable	core/BaseClass.h	/^    virtual ~nocopyable(){}$/;"	f	class:tigerso::nocopyable
~parent	test/test_class.cpp	/^    virtual ~parent() {}$/;"	f	class:parent
~singleton	core/BaseClass.h	/^    virtual ~singleton(){ if ( pInstance != nullptr) { delete pInstance; } };$/;"	f	class:tigerso::singleton
