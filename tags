!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLDIRS	test/Makefile	/^ALLDIRS := $(shell ls -R $(WORKPATH) | grep '^\\\/.*$$' | grep -v "test" | awk '{gsub(":","");print}')$/;"	m
ALLLOG	core/Logging.h	/^	ALLLOG = 3$/;"	e	enum:tigerso::LOGLEVEL
ARRAY_SIZE	http/lib/http_parser.c	41;"	d	file:
Accept	net/SocketUtil.cpp	/^int SocketUtil::Accept(Socket& listen_mcsock, Socket& accept_mcsock) {$/;"	f	class:tigerso::SocketUtil
AsyncDNSResolver	test/test_ares.cpp	/^class AsyncDNSResolver {$/;"	c	file:
BAD_REQUEST	http/HttpMessage.cpp	/^const std::string HttpResponse::BAD_REQUEST = "HTTP\/1.1 400 Bad Request\\r\\nserver: tigerso\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::HttpResponse	file:
BAD_REQUEST	http/HttpMessage.h	/^    static const std::string BAD_REQUEST; $/;"	m	class:tigerso::HttpResponse
BIND_EVENTHANDLE	http/HttpProxy.h	33;"	d
BIND_EVENTHANDLE	test/backup/http_proxy.cpp	42;"	d	file:
BITS_COMPARE	dns/DNSResolver.h	55;"	d
BIT_AT	http/lib/http_parser.c	45;"	d	file:
BUFFER_GAP_LENGTH	net/Buffer.h	29;"	d
BUFFER_LEAST_LENGTH	net/Buffer.h	28;"	d
BUILDDIR	test/Makefile	/^BUILDDIR := $(OUTPUT)\/Build\/objs$/;"	m
Base64decode	http/lib/base64.c	/^int Base64decode(char *bufplain, const char *bufcoded)$/;"	f
Base64decode_len	http/lib/base64.c	/^int Base64decode_len(const char *bufcoded)$/;"	f
Base64encode	http/lib/base64.c	/^int Base64encode(char *encoded, const char *string, int len)$/;"	f
Base64encode_len	http/lib/base64.c	/^int Base64encode_len(int len)$/;"	f
Bind	net/SocketUtil.cpp	/^int SocketUtil::Bind(Socket& mcsock, const std::string& s_addr, const std::string& port, const int family) {$/;"	f	class:tigerso::SocketUtil
Buffer	net/Buffer.cpp	/^Buffer:: Buffer(const size_t size)$/;"	f	class:tigerso::Buffer
Buffer	net/Buffer.h	/^class Buffer: public nocopyable {$/;"	c	namespace:tigerso
BufferPtr	net/Socket.h	/^    BufferPtr(std::shared_ptr<Buffer>& buffer)$/;"	f	struct:tigerso::BufferPtr
BufferPtr	net/Socket.h	/^    BufferPtr(std::shared_ptr<Buffer>& bufferIn, std::shared_ptr<Buffer>& bufferOut)$/;"	f	struct:tigerso::BufferPtr
BufferPtr	net/Socket.h	/^struct BufferPtr {$/;"	s	namespace:tigerso
CACHE_FILE_NAME	dns/DNSCache.h	15;"	d
CALLBACK_DATA	http/lib/http_parser.c	128;"	d	file:
CALLBACK_DATA_	http/lib/http_parser.c	105;"	d	file:
CALLBACK_DATA_NOADVANCE	http/lib/http_parser.c	132;"	d	file:
CALLBACK_NOTIFY	http/lib/http_parser.c	99;"	d	file:
CALLBACK_NOTIFY_	http/lib/http_parser.c	80;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	http/lib/http_parser.c	102;"	d	file:
CC	test/Makefile	/^CC := g++$/;"	m
CHUNKED	http/lib/http_parser.c	169;"	d	file:
CLOSE	http/lib/http_parser.c	171;"	d	file:
COMMENT	core/ConfigParser.h	26;"	d
COMTB	core/ConfigParser.h	16;"	d
CONFIGFILE	core/tigerso.h	/^const std::string  CONFIGFILE  =  CONFIGPATH + "\/" + PROJECT  +".ini";$/;"	m	namespace:tigerso::core
CONFIGPATH	core/tigerso.h	/^const std::string  CONFIGPATH  =  WORKPATH + "\/etc";$/;"	m	namespace:tigerso::core
CONNECTION	http/lib/http_parser.c	165;"	d	file:
CONTENT_LENGTH	http/lib/http_parser.c	166;"	d	file:
COUNT_HEADER_SIZE	http/lib/http_parser.c	154;"	d	file:
CPPFLAGS	test/Makefile	/^CPPFLAGS := -fPIC -shared$/;"	m
CR	http/lib/http_parser.c	410;"	d	file:
CURRENT_STATE	http/lib/http_parser.c	59;"	d	file:
Channel	net/Channel.h	/^    Channel(EventsLoop& loop, Socket& sock)$/;"	f	class:tigerso::Channel
Channel	net/Channel.h	/^class Channel: public nocopyable {$/;"	c	namespace:tigerso
ChannelSet	net/TimeWheelEvent.h	/^    std::unordered_set<Channel*> ChannelSet;$/;"	m	struct:tigerso::TimeWheelEvent::_TimeNode_st
ChannelSet	test/TimedEvent.h	/^    std::set<Channel*> ChannelSet;$/;"	m	struct:TimeNode
ChunkState	http/HttpBodyFile.h	/^} ChunkState;$/;"	t	class:tigerso::HttpBodyFile	typeref:enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
ChunkState	test/HttpFile/HttpBodyFile.h	/^    } ChunkState;$/;"	t	class:HttpBodyFile	typeref:enum:HttpBodyFile::_chunk_send_state
Close	net/SocketUtil.cpp	/^int SocketUtil::Close(Socket& mcsock) {$/;"	f	class:tigerso::SocketUtil
Condition	core/Condition.h	/^    Condition(ThreadMutex& mutex)$/;"	f	class:tigerso::Condition
Condition	core/Condition.h	/^class Condition: public nocopyable {$/;"	c	namespace:tigerso
ConfigParser	core/ConfigParser.h	/^	ConfigParser() :isFileExisted(false), isRefreshed(false){}$/;"	f	class:tigerso::ConfigParser
ConfigParser	core/ConfigParser.h	/^class ConfigParser$/;"	c	namespace:tigerso
Connect	net/SocketUtil.cpp	/^int SocketUtil::Connect(Socket& mcsock, const std::string& s_addr, const std::string& port, const int type){$/;"	f	class:tigerso::SocketUtil
CreateListenSocket	net/SocketUtil.cpp	/^int SocketUtil::CreateListenSocket($/;"	f	class:tigerso::SocketUtil
CreateUDPConnect	net/SocketUtil.cpp	/^int SocketUtil::CreateUDPConnect($/;"	f	class:tigerso::SocketUtil
CurrentThread	core/CurrentThread.h	/^namespace CurrentThread {$/;"	n	namespace:tigerso
CurrentThread	core/Thread.cpp	/^namespace CurrentThread {$/;"	n	namespace:tigerso	file:
DBG_LOG	core/Logging.h	24;"	d
DBG_LOG	ssl/SSLContext.cpp	13;"	d	file:
DBG_LOG	test/HttpFile/sendcontent.cc	20;"	d	file:
DBG_LOG	test/HttpFile/sendcontent.cc	22;"	d	file:
DBG_LOG	test/HttpFile/sendfile.cc	20;"	d	file:
DBG_LOG	test/HttpFile/sendfile.cc	22;"	d	file:
DBG_LOG	test/backup/http_proxy.cpp	29;"	d	file:
DBG_LOG	test/sendfile/sendfile.cc	20;"	d	file:
DBG_LOG	test/sendfile/sendfile.cc	22;"	d	file:
DEBUG	core/Logging.h	/^	DEBUG = 2,$/;"	e	enum:tigerso::LOGLEVEL
DECIDE_EVENTCALLBACK	net/EventsLoop.cpp	10;"	d	file:
DEFAULT_CHANNEL_NUM	net/EventsLoop.h	/^static const int DEFAULT_CHANNEL_NUM = 128;$/;"	m	namespace:tigerso
DEFAULT_SHM_MUTEX_FILENAME	core/SysUtil.h	/^const string DEFAULT_SHM_MUTEX_FILENAME = "TIGERSOSHMMUTEX";$/;"	m	namespace:tigerso
DEPY	test/Makefile	/^DEPY := http_parser$/;"	m
DESC	http/HttpMessage.cpp	/^const std::string HttpMessage::DESC = "DESC";$/;"	m	class:tigerso::HttpMessage	file:
DESC	http/HttpMessage.h	/^    static const std::string DESC;$/;"	m	class:tigerso::HttpMessage
DNS2Shared	dns/DNSCache.cpp	/^int DNSCache::DNS2Shared(const char* host, const char* ip, int ttl) {$/;"	f	class:tigerso::DNSCache
DNSAddition	dns/DNSResolver.h	/^typedef struct DNSAnswer DNSAddition;$/;"	t	namespace:tigerso	typeref:struct:tigerso::DNSAnswer
DNSAnswer	dns/DNSResolver.h	/^struct DNSAnswer {$/;"	s	namespace:tigerso
DNSAuthority	dns/DNSResolver.h	/^typedef struct DNSAnswer DNSAuthority;$/;"	t	namespace:tigerso	typeref:struct:tigerso::DNSAnswer
DNSCache	dns/DNSCache.cpp	/^DNSCache::DNSCache():$/;"	f	class:tigerso::DNSCache
DNSCache	dns/DNSCache.h	/^class DNSCache {$/;"	c	namespace:tigerso
DNSCacheData	dns/DNSCache.h	/^struct DNSCacheData {$/;"	s	namespace:tigerso
DNSHeader	dns/DNSResolver.h	/^struct DNSHeader {$/;"	s	namespace:tigerso
DNSInstance	test/test_dns.cpp	/^DNSResolver DNSInstance;$/;"	v
DNSNode	dns/DNSCache.h	/^struct DNSNode {$/;"	s	namespace:tigerso
DNSQuery	dns/DNSResolver.h	/^struct DNSQuery {$/;"	s	namespace:tigerso
DNSResolver	dns/DNSResolver.cpp	/^DNSResolver::DNSResolver() {$/;"	f	class:tigerso::DNSResolver
DNSResolver	dns/DNSResolver.h	/^    DNSResolver(const DNSResolver&){}$/;"	f	class:tigerso::DNSResolver
DNSResolver	dns/DNSResolver.h	/^class DNSResolver {$/;"	c	namespace:tigerso
DNS_ADDITION_OPT	dns/DNSResolver.h	94;"	d
DNS_CALLBACK	dns/DNSResolver.h	/^typedef std::function<int(const char*, time_t)> DNS_CALLBACK;$/;"	t	namespace:tigerso
DNS_CLASS_INTERNET	dns/DNSResolver.h	70;"	d
DNS_DOMAIN_NAME_LIMIT	dns/DNSResolver.h	84;"	d
DNS_ERR	dns/DNSResolver.h	74;"	d
DNS_HEADER_FLAGS_AA	dns/DNSResolver.h	41;"	d
DNS_HEADER_FLAGS_AD	dns/DNSResolver.h	45;"	d
DNS_HEADER_FLAGS_OPCODE_IQUERY	dns/DNSResolver.h	39;"	d
DNS_HEADER_FLAGS_OPCODE_QUERY	dns/DNSResolver.h	38;"	d
DNS_HEADER_FLAGS_OPCODE_STATUS	dns/DNSResolver.h	40;"	d
DNS_HEADER_FLAGS_QR_QUERY	dns/DNSResolver.h	36;"	d
DNS_HEADER_FLAGS_QR_RESPONSE	dns/DNSResolver.h	37;"	d
DNS_HEADER_FLAGS_RA	dns/DNSResolver.h	44;"	d
DNS_HEADER_FLAGS_RCODE_FRMT_ERR	dns/DNSResolver.h	47;"	d
DNS_HEADER_FLAGS_RCODE_NAME_ERR	dns/DNSResolver.h	49;"	d
DNS_HEADER_FLAGS_RCODE_NONE_ERR	dns/DNSResolver.h	46;"	d
DNS_HEADER_FLAGS_RCODE_REFUSED	dns/DNSResolver.h	51;"	d
DNS_HEADER_FLAGS_RCODE_SEVR_ERR	dns/DNSResolver.h	48;"	d
DNS_HEADER_FLAGS_RCODE_SPRT_ERR	dns/DNSResolver.h	50;"	d
DNS_HEADER_FLAGS_RD	dns/DNSResolver.h	43;"	d
DNS_HEADER_FLAGS_TC	dns/DNSResolver.h	42;"	d
DNS_HEAD_EMPTY	dns/DNSResolver.h	30;"	d
DNS_ID_MISMATCH	dns/DNSResolver.h	77;"	d
DNS_INPUT_ERR	dns/DNSResolver.h	75;"	d
DNS_MESSAGE_LIMIT	dns/DNSResolver.h	83;"	d
DNS_NEED_MORE_DATA	dns/DNSResolver.h	87;"	d
DNS_NOANSWERS	dns/DNSResolver.h	78;"	d
DNS_OK	dns/DNSResolver.h	73;"	d
DNS_RECV_ERR	dns/DNSResolver.h	89;"	d
DNS_RESOLVE_ERR	dns/DNSResolver.h	76;"	d
DNS_RRNAME_OFFSETFLAG	dns/DNSResolver.h	71;"	d
DNS_RRNAME_POINTERSIZE	dns/DNSResolver.h	85;"	d
DNS_SEND_ERR	dns/DNSResolver.h	88;"	d
DNS_SERVER_ADDR	dns/DNSResolver.h	81;"	d
DNS_SERVER_ADDR	test/test_ares.cpp	8;"	d	file:
DNS_SERVER_PORT	dns/DNSResolver.h	82;"	d
DNS_SERVER_PORT	test/test_ares.cpp	9;"	d	file:
DNS_SOCKET_IO_COMPLETE	dns/DNSResolver.h	90;"	d
DNS_STANDARD_ANSWER_FLAGS	dns/DNSResolver.h	33;"	d
DNS_STANDARD_QUERY_FLAGS	dns/DNSResolver.h	32;"	d
DNS_TYPE_A	dns/DNSResolver.h	58;"	d
DNS_TYPE_AAAA	dns/DNSResolver.h	66;"	d
DNS_TYPE_ANY	dns/DNSResolver.h	68;"	d
DNS_TYPE_AXFR	dns/DNSResolver.h	67;"	d
DNS_TYPE_CNAME	dns/DNSResolver.h	60;"	d
DNS_TYPE_HINFO	dns/DNSResolver.h	64;"	d
DNS_TYPE_MX	dns/DNSResolver.h	65;"	d
DNS_TYPE_NS	dns/DNSResolver.h	59;"	d
DNS_TYPE_PTR	dns/DNSResolver.h	63;"	d
DNS_TYPE_SOA	dns/DNSResolver.h	61;"	d
DNS_TYPE_WKS	dns/DNSResolver.h	62;"	d
DaemonBase	test/Daemon.h	/^class DaemonBase {$/;"	c
ELEM_AT	http/lib/http_parser.c	51;"	d	file:
ERRLINE	core/ConfigParser.h	28;"	d
ERR_HANDLE	test/backup/http_proxy.cpp	25;"	d	file:
ERR_RETURN	core/Logging.h	26;"	d
EVENT_CALLBACK_BREAK	net/Channel.h	/^const int EVENT_CALLBACK_BREAK = 1;$/;"	m	namespace:tigerso
EVENT_CALLBACK_CONTINUE	net/Channel.h	/^const int EVENT_CALLBACK_CONTINUE = 0;$/;"	m	namespace:tigerso
EVENT_CALLBACK_DROPWAITED	net/Channel.h	/^const int EVENT_CALLBACK_DROPWAITED = 2;$/;"	m	namespace:tigerso
EventFunc	net/Channel.h	/^typedef std::function<int(Socket&)> EventFunc; $/;"	t	namespace:tigerso
EventsLoop	net/EventsLoop.h	/^    EventsLoop(const int channels = DEFAULT_CHANNEL_NUM) $/;"	f	class:tigerso::EventsLoop
EventsLoop	net/EventsLoop.h	/^class EventsLoop: public nocopyable {$/;"	c	namespace:tigerso
FILE_ACTION_OK	core/File.h	26;"	d
FILE_ACTION_OK	test/File.h	21;"	d
FILE_ACTION_OK	test/HttpFile/File.h	24;"	d
FILE_ACTION_OK	test/sendfile/File.h	21;"	d
FILE_ARGS_INVALID	core/File.h	31;"	d
FILE_ARGS_INVALID	test/File.h	26;"	d
FILE_ARGS_INVALID	test/HttpFile/File.h	29;"	d
FILE_ARGS_INVALID	test/sendfile/File.h	26;"	d
FILE_BIG_CONTENT	core/File.h	24;"	d
FILE_FD_INVALID	core/File.h	30;"	d
FILE_FD_INVALID	test/File.h	25;"	d
FILE_FD_INVALID	test/HttpFile/File.h	28;"	d
FILE_FD_INVALID	test/sendfile/File.h	25;"	d
FILE_NAME_MAX_LENGTH	core/File.h	25;"	d
FILE_NAME_MAX_LENGTH	test/File.h	20;"	d
FILE_NAME_MAX_LENGTH	test/HttpFile/File.h	23;"	d
FILE_NAME_MAX_LENGTH	test/sendfile/File.h	20;"	d
FILE_OPEN_ERROR	core/File.h	27;"	d
FILE_OPEN_ERROR	test/File.h	22;"	d
FILE_OPEN_ERROR	test/HttpFile/File.h	25;"	d
FILE_OPEN_ERROR	test/sendfile/File.h	22;"	d
FILE_READ_ACCESS_DENY	core/File.h	29;"	d
FILE_READ_ACCESS_DENY	test/File.h	24;"	d
FILE_READ_ACCESS_DENY	test/HttpFile/File.h	27;"	d
FILE_READ_ACCESS_DENY	test/sendfile/File.h	24;"	d
FILE_SENDFILE_DONE	core/File.h	35;"	d
FILE_SENDFILE_DONE	test/File.h	30;"	d
FILE_SENDFILE_DONE	test/HttpFile/File.h	33;"	d
FILE_SENDFILE_DONE	test/sendfile/File.h	30;"	d
FILE_SENDFILE_ERROR	core/File.h	33;"	d
FILE_SENDFILE_ERROR	test/File.h	28;"	d
FILE_SENDFILE_ERROR	test/HttpFile/File.h	31;"	d
FILE_SENDFILE_ERROR	test/sendfile/File.h	28;"	d
FILE_SENDFILE_RECALL	core/File.h	34;"	d
FILE_SENDFILE_RECALL	test/File.h	29;"	d
FILE_SENDFILE_RECALL	test/HttpFile/File.h	32;"	d
FILE_SENDFILE_RECALL	test/sendfile/File.h	29;"	d
FILE_WRITE_ACCESS_DENY	core/File.h	28;"	d
FILE_WRITE_ACCESS_DENY	test/File.h	23;"	d
FILE_WRITE_ACCESS_DENY	test/HttpFile/File.h	26;"	d
FILE_WRITE_ACCESS_DENY	test/sendfile/File.h	23;"	d
FLAGS_CONBIME	dns/DNSResolver.h	53;"	d
FLAGS_CONTAIN	dns/DNSResolver.h	54;"	d
FORBIDDEN	http/HttpMessage.cpp	/^const std::string HttpResponse::FORBIDDEN = "HTTP\/1.1 403 Forbidden\\r\\nserver: tigerso\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::HttpResponse	file:
FORBIDDEN	http/HttpMessage.h	/^    static const std::string FORBIDDEN;$/;"	m	class:tigerso::HttpResponse
F_CHUNKED	http/lib/http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	http/lib/http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	http/lib/http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_CONNECTION_UPGRADE	http/lib/http_parser.h	/^  , F_CONNECTION_UPGRADE    = 1 << 3$/;"	e	enum:flags
F_CONTENTLENGTH	http/lib/http_parser.h	/^  , F_CONTENTLENGTH         = 1 << 7$/;"	e	enum:flags
F_SKIPBODY	http/lib/http_parser.h	/^  , F_SKIPBODY              = 1 << 6$/;"	e	enum:flags
F_TRAILING	http/lib/http_parser.h	/^  , F_TRAILING              = 1 << 4$/;"	e	enum:flags
F_UPGRADE	http/lib/http_parser.h	/^  , F_UPGRADE               = 1 << 5$/;"	e	enum:flags
File	core/File.cpp	/^File::File() {}$/;"	f	class:tigerso::File
File	core/File.cpp	/^File::File(const char* filename) {$/;"	f	class:tigerso::File
File	core/File.h	/^class File {$/;"	c	namespace:tigerso
File	test/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	test/File.h	/^class File {$/;"	c
File	test/HttpFile/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	test/HttpFile/File.h	/^class File {$/;"	c
File	test/sendfile/File.cpp	/^File::File(const char* filename) {$/;"	f	class:File
File	test/sendfile/File.h	/^class File {$/;"	c
FileLock	core/FileLock.cpp	/^FileLock::FileLock(const std::string& filename, const std::string& content): filename_(filename), content_(content) {$/;"	f	class:tigerso::FileLock
FileLock	core/FileLock.h	/^class FileLock: public Lock {$/;"	c	namespace:tigerso
FileTypeDetector	util/FileTypeDetector.h	/^    FileTypeDetector() {}$/;"	f	class:tigerso::FileTypeDetector
FileTypeDetector	util/FileTypeDetector.h	/^class FileTypeDetector: public nocopyable {$/;"	c	namespace:tigerso
FileTypeDetector	util/FileTypes/FileTypeDetector.h	/^    FileTypeDetector() {}$/;"	f	class:tigerso::util::FileTypeDetector
FileTypeDetector	util/FileTypes/FileTypeDetector.h	/^class FileTypeDetector: public core::nocopyable {$/;"	c	namespace:tigerso::util
GLOBAL	core/tigerso.h	36;"	d
GLOBAL	test/https_lib/Https.h	6;"	d
GOBAL_DEFAULT_RSA_KEY_LENGTH	ssl/SSLHelper.h	29;"	d
GraceClose	net/SocketUtil.cpp	/^int SocketUtil::GraceClose(Socket& mcsock) {$/;"	f	class:tigerso::SocketUtil
HASH_MAXCONFLICT	dns/DNSCache.h	19;"	d
HASH_NODENUM	dns/DNSCache.h	18;"	d
HEX2CHAR	core/Dechex.h	17;"	d
HEX2CHAR	test/inter2hex.c	12;"	d	file:
HEXCHAR2DEC	core/Dechex.h	16;"	d
HEXCHAR2DEC	test/inter2hex.c	11;"	d	file:
HEX_DIV	core/Dechex.h	15;"	d
HEX_DIV	test/inter2hex.c	10;"	d	file:
HEX_MOD	core/Dechex.h	14;"	d
HEX_MOD	test/inter2hex.c	9;"	d	file:
HOST_MAXLENGTH	core/tigerso.h	38;"	d
HOST_MAXLENGTH	dns/DNSCache.h	20;"	d
HP_PARSE_BAD_REQUEST	http/HttpParser.h	36;"	d
HP_PARSE_BAD_RESPONSE	http/HttpParser.h	37;"	d
HP_PARSE_COMPLETE	http/HttpParser.h	38;"	d
HP_PARSE_ERROR	http/HttpParser.h	35;"	d
HP_PARSE_NEED_MOREDATA	http/HttpParser.h	39;"	d
HTTPCONNECTIONPTR	test/http_server.cpp	/^typedef std::shared_ptr<HttpConnection> HTTPCONNECTIONPTR;$/;"	t	file:
HTTPPROXYCONNECTIONPTR	http/HttpProxy.h	/^typedef std::shared_ptr<HttpProxyConnection> HTTPPROXYCONNECTIONPTR;$/;"	t	namespace:tigerso
HTTPPROXYCONNECTIONPTR	test/backup/http_proxy.cpp	/^typedef std::shared_ptr<HttpProxyConnection> HTTPPROXYCONNECTIONPTR;$/;"	t	file:
HTTPSErrorType	test/SSLContext.h	/^} HTTPSErrorType;$/;"	t	typeref:enum:__anon5
HTTPS_CERT_VERIFY_MAX_DEPTH	test/SSLContext.h	15;"	d
HTTPS_ERROR_ERR	test/SSLContext.h	/^    HTTPS_ERROR_ERR = -100,$/;"	e	enum:__anon5
HTTPS_ERROR_OK	test/SSLContext.h	/^    HTTPS_ERROR_OK = 0$/;"	e	enum:__anon5
HTTPS_IO_ERROR	ssl/SSLHelper.h	32;"	d
HTTPS_IO_ERROR	test/SSLContext.h	/^    HTTPS_IO_ERROR = -1,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_OK	test/SSLContext.h	/^    HTTPS_IO_OK,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_RECALL	ssl/SSLHelper.h	31;"	d
HTTPS_IO_RECALL	test/SSLContext.h	/^    HTTPS_IO_RECALL,$/;"	e	enum:HTTPS_IO_STATE
HTTPS_IO_STATE	test/SSLContext.h	/^typedef enum HTTPS_IO_STATE {$/;"	g
HTTPS_MODE_PROXY	test/SSLContext.h	/^    HTTPS_MODE_PROXY;$/;"	e	enum:__anon6
HTTPS_MODE_SERVICE	test/SSLContext.h	/^    HTTPS_MODE_SERVICE;$/;"	e	enum:__anon6
HTTPS_MODE_UNKNOWN	test/SSLContext.h	/^    HTTPS_MODE_UNKNOWN;$/;"	e	enum:__anon6
HTTPS_ROLE_CLIENT	test/SSLContext.h	/^    HTTPS_ROLE_CLIENT,$/;"	e	enum:_SSL_ROLE_
HTTPS_ROLE_SERVER	test/SSLContext.h	/^    HTTPS_ROLE_SERVER$/;"	e	enum:_SSL_ROLE_
HTTPS_ROLE_UNKNOWN	test/SSLContext.h	/^    HTTPS_ROLE_UNKNOWN = -1,$/;"	e	enum:_SSL_ROLE_
HTTP_BODY_FILE	http/HttpBodyFile.h	/^    HTTP_BODY_FILE$/;"	e	enum:tigerso::_HTTP_BODY_MODE_
HTTP_BODY_NULL	http/HttpBodyFile.h	/^    HTTP_BODY_NULL,$/;"	e	enum:tigerso::_HTTP_BODY_MODE_
HTTP_BODY_RINGBUFFER	http/HttpBodyFile.h	/^    HTTP_BODY_RINGBUFFER,$/;"	e	enum:tigerso::_HTTP_BODY_MODE_
HTTP_BOTH	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ERRNO_GEN	http/lib/http_parser.h	281;"	d
HTTP_ERRNO_GEN	http/lib/http_parser.h	285;"	d
HTTP_ERRNO_MAP	http/lib/http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	http/lib/http_parser.h	234;"	d
HTTP_FILE_CACHE_SIZE	http/HttpBodyFile.h	20;"	d
HTTP_INSPECTION_BLOCK	http/HttpMessage.h	/^const int HTTP_INSPECTION_BLOCK = -1;$/;"	m	namespace:tigerso
HTTP_INSPECTION_CONTINUE	http/HttpMessage.h	/^const int HTTP_INSPECTION_CONTINUE = 0;$/;"	m	namespace:tigerso
HTTP_INSPECTION_MODIFIED	http/HttpMessage.h	/^const int HTTP_INSPECTION_MODIFIED = 1;$/;"	m	namespace:tigerso
HTTP_MAX_HEADER_SIZE	http/lib/http_parser.h	64;"	d
HTTP_METHOD_MAP	http/lib/http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	http/lib/http_parser.h	164;"	d
HTTP_PARSER_ERRNO	http/lib/http_parser.h	289;"	d
HTTP_PARSER_STRICT	http/lib/http_parser.h	53;"	d
HTTP_PARSER_VERSION_MAJOR	http/lib/http_parser.h	28;"	d
HTTP_PARSER_VERSION_MINOR	http/lib/http_parser.h	29;"	d
HTTP_PARSER_VERSION_PATCH	http/lib/http_parser.h	30;"	d
HTTP_REQUEST	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ROLE_REQUEST	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_REQUEST = 0;$/;"	m	namespace:tigerso
HTTP_ROLE_RESPONSE	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_RESPONSE = 1;$/;"	m	namespace:tigerso
HTTP_ROLE_UINIT	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_UINIT = -1;$/;"	m	namespace:tigerso
HTTP_STATUS_MAP	http/lib/http_parser.h	/^  HTTP_STATUS_MAP(XX)$/;"	e	enum:http_status
HTTP_STATUS_MAP	http/lib/http_parser.h	94;"	d
HTTP_STRERROR_GEN	http/lib/http_parser.c	464;"	d	file:
HTTP_STRERROR_GEN	http/lib/http_parser.c	471;"	d	file:
HashTable	test/hashtable/HashTable.h	/^class HashTable {$/;"	c
HexCharSet	core/Dechex.h	/^static const char HexCharSet[] = {$/;"	m	namespace:tigerso
HexCharSet	test/inter2hex.c	/^char HexCharSet[] = {$/;"	v
HttpBodyFile	http/HttpBodyFile.cpp	/^HttpBodyFile::HttpBodyFile():_ringbuf(HTTP_FILE_CACHE_SIZE){}$/;"	f	class:tigerso::HttpBodyFile
HttpBodyFile	http/HttpBodyFile.h	/^class HttpBodyFile: public nocopyable {$/;"	c	namespace:tigerso
HttpBodyFile	test/HttpFile/HttpBodyFile.h	/^    HttpBodyFile(const char* filename):_ringbuf(4096), _file(filename) {}$/;"	f	class:HttpBodyFile
HttpBodyFile	test/HttpFile/HttpBodyFile.h	/^class HttpBodyFile {$/;"	c
HttpBodyFile	test/sendfile/HttpBodyFile.h	/^class HttpBodyFile {$/;"	c
HttpBodyMode	http/HttpBodyFile.h	/^} HttpBodyMode;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_HTTP_BODY_MODE_
HttpConnection	test/http_server.cpp	/^    HttpConnection(): sockptr(std::make_shared<Socket>()) {}$/;"	f	class:HttpConnection
HttpConnection	test/http_server.cpp	/^class HttpConnection {$/;"	c	file:
HttpHelper	http/HttpMessage.h	/^    HttpHelper(){}$/;"	f	class:tigerso::HttpHelper
HttpHelper	http/HttpMessage.h	/^class HttpHelper {$/;"	c	namespace:tigerso
HttpInSpection	http/HttpMessage.h	/^class HttpInSpection {$/;"	c	namespace:tigerso
HttpMessage	http/HttpMessage.h	/^class HttpMessage {$/;"	c	namespace:tigerso
HttpMode	test/SSLContext.h	/^} HttpMode;$/;"	t	typeref:enum:__anon6
HttpParser	http/HttpParser.h	/^    HttpParser(): buffer_(nullptr), length_(0), parsedn_(0), state_(PARSE_UNINIT), message_(nullptr) {}$/;"	f	class:tigerso::HttpParser
HttpParser	http/HttpParser.h	/^class HttpParser: public nocopyable {$/;"	c	namespace:tigerso
HttpProxyConnection	http/HttpProxy.cpp	/^HttpProxyConnection::HttpProxyConnection(): ID_(HttpProxyConnection::uuid()), $/;"	f	class:tigerso::HttpProxyConnection
HttpProxyConnection	http/HttpProxy.h	/^class HttpProxyConnection {$/;"	c	namespace:tigerso
HttpProxyConnection	test/backup/http_proxy.cpp	/^    HttpProxyConnection(): ID_(HttpProxyConnection::uuid()), $/;"	f	class:HttpProxyConnection
HttpProxyConnection	test/backup/http_proxy.cpp	/^class HttpProxyConnection {$/;"	c	file:
HttpProxyLoop	http/HttpProxy.cpp	/^HttpProxyLoop::HttpProxyLoop(const std::string& ipaddr, const std::string& port):$/;"	f	class:tigerso::HttpProxyLoop
HttpProxyLoop	http/HttpProxy.h	/^class HttpProxyLoop {   $/;"	c	namespace:tigerso
HttpProxyLoop	test/backup/http_proxy.cpp	/^    HttpProxyLoop(const std::string& ipaddr, const std::string& port):$/;"	f	class:HttpProxyLoop
HttpProxyLoop	test/backup/http_proxy.cpp	/^class HttpProxyLoop {   $/;"	c	file:
HttpRequest	http/HttpMessage.h	/^    HttpRequest() { role_ = HTTP_ROLE_REQUEST; }$/;"	f	class:tigerso::HttpRequest
HttpRequest	http/HttpMessage.h	/^class HttpRequest: public HttpMessage {$/;"	c	namespace:tigerso
HttpResponse	http/HttpMessage.h	/^    HttpResponse() { role_ = HTTP_ROLE_RESPONSE; }$/;"	f	class:tigerso::HttpResponse
HttpResponse	http/HttpMessage.h	/^class HttpResponse: public HttpMessage {$/;"	c	namespace:tigerso
HttpServer	test/http_server.cpp	/^class HttpServer {$/;"	c	file:
HttpTransaction	http/HttpProxy.h	/^struct HttpTransaction {$/;"	s	class:tigerso::HttpProxyConnection
HttpTransaction	test/backup/http_proxy.cpp	/^struct HttpTransaction {$/;"	s	class:HttpProxyConnection	file:
HttpsContext	test/SSLContex.h	/^    HttpsContext():  {}$/;"	f	class:HttpsContext
HttpsContext	test/SSLContex.h	/^class HttpsContext {$/;"	c
HttpsContext	test/https_lib/SSLContext.cpp	/^    HttpsContext():  {}$/;"	f	class:SSLContext::HttpsContext
HttpsContext	test/https_lib/SSLContext.cpp	/^class HttpsContext {$/;"	c	namespace:SSLContext	file:
HtttsRole	test/SSLContext.h	/^} HtttsRole;$/;"	t	typeref:enum:_SSL_ROLE_
IDTYPE	http/HttpProxy.h	/^typedef unsigned long IDTYPE;  $/;"	t	namespace:tigerso
IDTYPE	test/backup/http_proxy.cpp	/^typedef unsigned long IDTYPE;  $/;"	t	file:
ID_	dns/DNSResolver.h	/^    unsigned short ID_ = 0x00;$/;"	m	class:tigerso::DNSResolver
ID_	http/HttpProxy.h	/^    const IDTYPE  ID_;$/;"	m	class:tigerso::HttpProxyConnection
ID_	test/backup/http_proxy.cpp	/^    const IDTYPE  ID_;$/;"	m	class:HttpProxyConnection	file:
INCFLAGS	test/Makefile	/^INCFLAGS := -I $(WORKPATH)$/;"	m
INCS	test/Makefile	/^INCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.h))$/;"	m
INFO	core/Logging.h	/^	INFO = 1,$/;"	e	enum:tigerso::LOGLEVEL
INFO_LOG	core/Logging.h	25;"	d
INFO_LOG	ssl/SSLContext.cpp	14;"	d	file:
IPV4_ADDRSIZE	core/tigerso.h	37;"	d
IPV4_ADDRSIZE	dns/DNSCache.h	17;"	d
IPV4_ADDRSIZE	dns/DNSResolver.h	80;"	d
IPv4Addr	net/Upstream.h	/^    char IPv4Addr[IPV4_ADDRSIZE] = {0};$/;"	m	struct:tigerso::Upstream::UpstreamNode
IS_ALPHA	http/lib/http_parser.c	413;"	d	file:
IS_ALPHANUM	http/lib/http_parser.c	415;"	d	file:
IS_HEADER_CHAR	http/lib/http_parser.c	442;"	d	file:
IS_HEX	http/lib/http_parser.c	416;"	d	file:
IS_HOST_CHAR	http/lib/http_parser.c	429;"	d	file:
IS_HOST_CHAR	http/lib/http_parser.c	434;"	d	file:
IS_HTTPPARSER_INITED	http/HttpParser.h	34;"	d
IS_MARK	http/lib/http_parser.c	417;"	d	file:
IS_NUM	http/lib/http_parser.c	414;"	d	file:
IS_URL_CHAR	http/lib/http_parser.c	428;"	d	file:
IS_URL_CHAR	http/lib/http_parser.c	432;"	d	file:
IS_USERINFO_CHAR	http/lib/http_parser.c	420;"	d	file:
InitSocket	net/SocketUtil.cpp	/^int SocketUtil::InitSocket(const int domain, const int type, Socket& mcsock) {$/;"	f	class:tigerso::SocketUtil
Inspect	http/HttpMessage.cpp	/^int HttpInSpection::Inspect(const std::string& header,  const std::weak_ptr<HttpMessage>& wptr) {$/;"	f	class:tigerso::HttpInSpection
KEEP_ALIVE	http/lib/http_parser.c	170;"	d	file:
KEYB	core/ConfigParser.h	17;"	d
KEYVAL	core/ConfigParser.h	27;"	d
LF	http/lib/http_parser.c	411;"	d	file:
LIBFLAGS	test/Makefile	/^LIBFLAGS := -L$(LIBPATH) -l$(DEPY) $(PTHREAD_FLAG) $(SHM_FLAG)$/;"	m
LIKELY	http/lib/http_parser.c	71;"	d	file:
LIKELY	http/lib/http_parser.c	74;"	d	file:
LOCK_FAILURE	core/FileLock.h	10;"	d
LOCK_SUCCESS	core/FileLock.h	9;"	d
LOGLEVEL	core/Logging.h	/^enum LOGLEVEL{$/;"	g	namespace:tigerso
LOGNAME	core/tigerso.h	/^const std::string  LOGNAME     =  "httpd";$/;"	m	namespace:tigerso::core
LOGPATH	core/tigerso.h	/^const std::string  LOGPATH     =  WORKPATH + "\/log";$/;"	m	namespace:tigerso::core
LOOP_CALLBACK	http/HttpProxy.h	/^typedef std::function<int(HttpProxyConnection&)> LOOP_CALLBACK ;$/;"	t	class:tigerso::HttpProxyConnection
LOOP_CALLBACK	test/backup/http_proxy.cpp	/^typedef std::function<int(HttpProxyConnection&)> LOOP_CALLBACK ;$/;"	t	class:HttpProxyConnection	file:
LOWER	http/lib/http_parser.c	412;"	d	file:
Listen	net/SocketUtil.cpp	/^int SocketUtil::Listen(Socket& mcsock, const int backlog) {$/;"	f	class:tigerso::SocketUtil
Lock	core/SysUtil.h	/^class Lock: public nocopyable {$/;"	c	namespace:tigerso
LockGuard	core/SysUtil.h	/^   explicit LockGuard(Lock& Lock)$/;"	f	class:tigerso::LockGuard
LockGuard	core/SysUtil.h	/^class LockGuard {$/;"	c	namespace:tigerso
LockTryGuard	core/SysUtil.h	/^    explicit LockTryGuard(Lock& Lock)$/;"	f	class:tigerso::LockTryGuard
LockTryGuard	core/SysUtil.h	/^class LockTryGuard {$/;"	c	namespace:tigerso
Lock_obj	core/SysUtil.h	/^    Lock& Lock_obj;$/;"	m	class:tigerso::LockGuard
Lock_obj	core/SysUtil.h	/^    Lock& Lock_obj;$/;"	m	class:tigerso::LockTryGuard
Logging	core/Logging.h	/^	Logging():endFmt("<__FUNC__>@__FILE__"), level(NOLOG){}$/;"	f	class:tigerso::Logging
Logging	core/Logging.h	/^class Logging {$/;"	c	namespace:tigerso
MARK	http/lib/http_parser.c	136;"	d	file:
MAX_CHANNEL_NUM	net/EventsLoop.h	/^static const int MAX_CHANNEL_NUM = 512;$/;"	m	namespace:tigerso
MAX_UDP_PAYLOAD	dns/DNSResolver.h	93;"	d
MCBUFFER_DEBUG_	test/test_buffer.cpp	16;"	d	file:
MC_LOCK_PRIVATE	core/SysUtil.h	/^const int MC_LOCK_PRIVATE = 0;$/;"	m	namespace:tigerso
MC_LOCK_SHARE_PROCESS	core/SysUtil.h	/^const int MC_LOCK_SHARE_PROCESS = 1;$/;"	m	namespace:tigerso
MD5	ssl/SSLHelper.cpp	/^int SSLHelper::MD5(const char*  input, char* output, int len) {$/;"	f	class:tigerso::SSLHelper
MD5_KEYSIZE	dns/DNSCache.h	16;"	d
METHOD	http/HttpMessage.cpp	/^const std::string HttpMessage::METHOD = "METHOD";$/;"	m	class:tigerso::HttpMessage	file:
METHOD	http/HttpMessage.h	/^    static const std::string METHOD;$/;"	m	class:tigerso::HttpMessage
MIN	http/lib/http_parser.c	37;"	d	file:
MIN_SOCKET_FD	net/SocketUtil.h	33;"	d
NEW_MESSAGE	http/lib/http_parser.c	456;"	d	file:
NEW_MESSAGE	http/lib/http_parser.c	459;"	d	file:
NOLOG	core/Logging.h	/^	NOLOG = 0,$/;"	e	enum:tigerso::LOGLEVEL
NOT_FOUND	http/HttpMessage.cpp	/^const std::string HttpResponse::NOT_FOUND = "HTTP\/1.1 404 Not Found\\r\\nserver: tigerso\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::HttpResponse	file:
NOT_FOUND	http/HttpMessage.h	/^    static const std::string NOT_FOUND;$/;"	m	class:tigerso::HttpResponse
OBJS	test/Makefile	/^OBJS := $(foreach obj, $(OBJSLIST), $(BUILDDIR)\/$(obj))$/;"	m
OBJSLIST	test/Makefile	/^OBJSLIST := $(notdir $(OLDOBJS))$/;"	m
OK	http/HttpMessage.cpp	/^const std::string HttpResponse::OK = "HTTP\/1.1 200 OK\\r\\nserver: tigerso\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::HttpResponse	file:
OK	http/HttpMessage.h	/^    static const std::string OK;$/;"	m	class:tigerso::HttpResponse
OLDOBJS	test/Makefile	/^OLDOBJS := $(patsubst %.cpp, %.o, $(SRCS))$/;"	m
OPENSSL_INITIZED	ssl/SSLContext.cpp	/^static bool OPENSSL_INITIZED = false;$/;"	m	namespace:tigerso::_OPENSSL_	file:
OUTPUT	test/Makefile	/^OUTPUT := $(WORKPATH)\/output$/;"	m
PARSER_TO_MESSAGE	http/HttpParser.cpp	9;"	d	file:
PARSE_BODY_NEED_MORE_DATA	http/HttpParser.h	/^    PARSE_BODY_NEED_MORE_DATA,$/;"	e	enum:tigerso::__anon3
PARSE_COMPLETE	http/HttpParser.h	/^    PARSE_COMPLETE$/;"	e	enum:tigerso::__anon3
PARSE_ERR	http/HttpParser.h	/^    PARSE_ERR = 0,$/;"	e	enum:tigerso::__anon3
PARSE_HEADER_COMPLETE	http/HttpParser.h	/^    PARSE_HEADER_COMPLETE,$/;"	e	enum:tigerso::__anon3
PARSE_HEADER_NEED_MORE_DATA	http/HttpParser.h	/^    PARSE_HEADER_NEED_MORE_DATA,$/;"	e	enum:tigerso::__anon3
PARSE_INIT	http/HttpParser.h	/^    PARSE_INIT,$/;"	e	enum:tigerso::__anon3
PARSE_STATE	http/HttpParser.h	/^} PARSE_STATE; $/;"	t	namespace:tigerso	typeref:enum:tigerso::__anon3
PARSE_UNINIT	http/HttpParser.h	/^    PARSE_UNINIT = -1,$/;"	e	enum:tigerso::__anon3
PARSING_HEADER	http/lib/http_parser.c	360;"	d	file:
POINTER	test/HttpFile/RingBuffer.h	35;"	d
POINTER	test/RingBuffer.h	32;"	d
POINTER	test/sendfile/RingBuffer.h	28;"	d
PROJECT	core/tigerso.h	/^const std::string  PROJECT     =  "tigerso";$/;"	m	namespace:tigerso::core
PROJECT	test/Makefile	/^PROJECT := httpd$/;"	m
PROXY_CONNECTION	http/lib/http_parser.c	164;"	d	file:
PROXY_LOG	test/backup/http_proxy.cpp	43;"	d	file:
PTHREAD_FLAG	test/Makefile	/^PTHREAD_FLAG := -lpthread$/;"	m
PUSH2HEXBUF	core/Dechex.h	18;"	d
PUSH2HEXBUF	test/inter2hex.c	13;"	d	file:
PackSockAddr	net/SocketUtil.cpp	/^int SocketUtil::PackSockAddr(const std::string& s_addr, const std::string& port, const int family, sockaddr_in& sock_addr) {$/;"	f	class:tigerso::SocketUtil
ProxyConnection	test/test_http.cpp	/^    explicit ProxyConnection(SocketPtr& clientptr, SocketPtr& serverptr): sockfd_(clientptr->getSocket()) {$/;"	f	class:ProxyConnection
ProxyConnection	test/test_http.cpp	/^    explicit ProxyConnection(SocketPtr& sockptr): sockfd_(sockptr->getSocket()) {$/;"	f	class:ProxyConnection
ProxyConnection	test/test_http.cpp	/^class ProxyConnection {$/;"	c	file:
QQindexAd	test/HttpFile/index.html	/^	function QQindexAd(obj){$/;"	f
QQindexAdShut	test/HttpFile/index.html	/^	function QQindexAdShut(){$/;"	f
REEXECUTE	http/lib/http_parser.c	66;"	d	file:
RESPONSE_STATUS_MAP	http/HttpMessage.h	/^    static const std::map<int, std::string> RESPONSE_STATUS_MAP;$/;"	m	class:tigerso::HttpHelper
RETURN	http/lib/http_parser.c	61;"	d	file:
REVERSESTRING	core/Dechex.h	19;"	d
REVERSESTRING	test/inter2hex.c	14;"	d	file:
REVERSE_STRING	core/Dechex.cpp	/^void REVERSE_STRING(char* beg, char* end) {$/;"	f	namespace:tigerso
RINGBUFFER_DEFAULT_LENGTH	net/RingBuffer.h	37;"	d
RINGBUFFER_DEFAULT_LENGTH	test/HttpFile/RingBuffer.h	47;"	d
RINGBUFFER_DEFAULT_LENGTH	test/RingBuffer.h	44;"	d
RINGBUFFER_MAX_LENGTH	net/RingBuffer.h	35;"	d
RINGBUFFER_MAX_LENGTH	test/HttpFile/RingBuffer.h	45;"	d
RINGBUFFER_MAX_LENGTH	test/RingBuffer.h	42;"	d
RINGBUFFER_MAX_LENGTH	test/sendfile/RingBuffer.h	35;"	d
RINGBUFFER_MIN_LENGTH	net/RingBuffer.h	36;"	d
RINGBUFFER_MIN_LENGTH	test/HttpFile/RingBuffer.h	46;"	d
RINGBUFFER_MIN_LENGTH	test/RingBuffer.h	43;"	d
RINGBUFFER_MIN_LENGTH	test/sendfile/RingBuffer.h	36;"	d
RINGBUFFER_NO_DATA	net/RingBuffer.h	28;"	d
RINGBUFFER_NO_DATA	test/HttpFile/RingBuffer.h	24;"	d
RINGBUFFER_NO_DATA	test/RingBuffer.h	21;"	d
RINGBUFFER_NO_DATA	test/sendfile/RingBuffer.h	17;"	d
RINGBUFFER_NO_SPACE	net/RingBuffer.h	27;"	d
RINGBUFFER_NO_SPACE	test/HttpFile/RingBuffer.h	23;"	d
RINGBUFFER_NO_SPACE	test/RingBuffer.h	20;"	d
RINGBUFFER_NO_SPACE	test/sendfile/RingBuffer.h	16;"	d
Recv	net/SocketUtil.cpp	/^int SocketUtil::Recv(Socket& mcsock, void* buf, size_t len, size_t* recvn) {$/;"	f	class:tigerso::SocketUtil
Register	http/HttpMessage.cpp	/^void HttpInSpection::Register(const std::string& header, httpInspectCallback callback, http_role_t role) { $/;"	f	class:tigerso::HttpInSpection
RelocateFileDescriptor	net/SocketUtil.cpp	/^int SocketUtil::RelocateFileDescriptor(int oldfd, int leastfd) {$/;"	f	class:tigerso::SocketUtil
ResolveHost2IP	net/SocketUtil.cpp	/^int SocketUtil::ResolveHost2IP(const std::string& hostname, std::vector<std::string>& ip_vec ) {$/;"	f	class:tigerso::SocketUtil
ResolveSockAddr	net/SocketUtil.cpp	/^int SocketUtil::ResolveSockAddr(const sockaddr_in& sock_addr, std::string& s_addr, std::string& port) {$/;"	f	class:tigerso::SocketUtil
RingBuffer	net/RingBuffer.cpp	/^RingBuffer::RingBuffer(const size_t len) {$/;"	f	class:tigerso::RingBuffer
RingBuffer	net/RingBuffer.h	/^class RingBuffer {$/;"	c	namespace:tigerso
RingBuffer	test/HttpFile/RingBuffer.h	/^    RingBuffer(const size_t len = RINGBUFFER_DEFAULT_LENGTH) {$/;"	f	class:RingBuffer
RingBuffer	test/HttpFile/RingBuffer.h	/^class RingBuffer {$/;"	c
RingBuffer	test/RingBuffer.h	/^    RingBuffer(const size_t len = RINGBUFFER_DEFAULT_LENGTH) {$/;"	f	class:RingBuffer
RingBuffer	test/RingBuffer.h	/^class RingBuffer {$/;"	c
RingBuffer	test/sendfile/RingBuffer.h	/^    RingBuffer(const size_t& len) {$/;"	f	class:RingBuffer
RingBuffer	test/sendfile/RingBuffer.h	/^class RingBuffer {$/;"	c
SCTX_CERT_VERIFY_MAX_DEPTH	ssl/SSLContext.cpp	19;"	d	file:
SCTX_ERROR_ERR	ssl/SSLContext.h	/^    SCTX_ERROR_ERR = -1,$/;"	e	enum:tigerso::_SSL_ERROR_CODE
SCTX_ERROR_OK	ssl/SSLContext.h	/^    SCTX_ERROR_OK$/;"	e	enum:tigerso::_SSL_ERROR_CODE
SCTX_IO_ERROR	ssl/SSLContext.h	/^   SCTX_IO_ERROR = -1,$/;"	e	enum:tigerso::_SSL_IO_STATE
SCTX_IO_OK	ssl/SSLContext.h	/^   SCTX_IO_OK$/;"	e	enum:tigerso::_SSL_IO_STATE
SCTX_IO_RECALL	ssl/SSLContext.h	/^   SCTX_IO_RECALL,$/;"	e	enum:tigerso::_SSL_IO_STATE
SCTX_MODE_PROXY	ssl/SSLContext.h	/^    SCTX_MODE_PROXY,$/;"	e	enum:tigerso::_SSL_MODE_
SCTX_MODE_SERVICE	ssl/SSLContext.h	/^    SCTX_MODE_SERVICE,$/;"	e	enum:tigerso::_SSL_MODE_
SCTX_MODE_UNKNOWN	ssl/SSLContext.h	/^    SCTX_MODE_UNKNOWN$/;"	e	enum:tigerso::_SSL_MODE_
SCTX_ROLE_CLIENT	ssl/SSLContext.h	/^    SCTX_ROLE_CLIENT,$/;"	e	enum:tigerso::_SSL_ROLE_
SCTX_ROLE_SERVER	ssl/SSLContext.h	/^    SCTX_ROLE_SERVER$/;"	e	enum:tigerso::_SSL_ROLE_
SCTX_ROLE_UNKNOWN	ssl/SSLContext.h	/^    SCTX_ROLE_UNKNOWN = -1,$/;"	e	enum:tigerso::_SSL_ROLE_
SECTB	core/ConfigParser.h	14;"	d
SECTE	core/ConfigParser.h	15;"	d
SECTION	core/ConfigParser.h	25;"	d
SEND_DEBUG	test/HttpFile/sendcontent.cc	18;"	d	file:
SEND_DEBUG	test/HttpFile/sendfile.cc	18;"	d	file:
SEND_DEBUG	test/sendfile/sendfile.cc	18;"	d	file:
SET_ERRNO	http/lib/http_parser.c	54;"	d	file:
SHELL	test/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHM_FLAG	test/Makefile	/^SHM_FLAG := -lrt$/;"	m
SOCKETPTR	test/backup/http_proxy.cpp	/^typedef std::shared_ptr<Socket> SOCKETPTR;$/;"	t	file:
SOCKET_EVENT_AFTER	net/Socket.h	20;"	d
SOCKET_EVENT_ALL	net/Socket.h	24;"	d
SOCKET_EVENT_BEFORE	net/Socket.h	19;"	d
SOCKET_EVENT_ERROR	net/Socket.h	21;"	d
SOCKET_EVENT_NONE	net/Socket.h	16;"	d
SOCKET_EVENT_RDHUP	net/Socket.h	22;"	d
SOCKET_EVENT_READ	net/Socket.h	17;"	d
SOCKET_EVENT_TIMEOUT	net/Socket.h	23;"	d
SOCKET_EVENT_WRITE	net/Socket.h	18;"	d
SOCKET_IOSTATE_CLOSED	net/Buffer.h	/^const int SOCKET_IOSTATE_CLOSED   = -1;$/;"	m	namespace:tigerso
SOCKET_IOSTATE_CONTINUE	net/Buffer.h	/^const int SOCKET_IOSTATE_CONTINUE = 0;$/;"	m	namespace:tigerso
SOCKET_IOSTATE_ERROR	net/Buffer.h	/^const int SOCKET_IOSTATE_ERROR    = -2;$/;"	m	namespace:tigerso
SOCKET_ROLE_CLIENT	net/Socket.h	/^const socket_role_t SOCKET_ROLE_CLIENT =  0;$/;"	m	namespace:tigerso
SOCKET_ROLE_SERVER	net/Socket.h	/^const socket_role_t SOCKET_ROLE_SERVER =  1;$/;"	m	namespace:tigerso
SOCKET_ROLE_UINIT	net/Socket.h	/^const socket_role_t SOCKET_ROLE_UINIT  = -1;$/;"	m	namespace:tigerso
SOCKET_STAGE_ACCEPT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_ACCEPT  =  3;$/;"	m	namespace:tigerso
SOCKET_STAGE_BIND	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_BIND    =  1;$/;"	m	namespace:tigerso
SOCKET_STAGE_CLOSE	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_CLOSE   =  7;$/;"	m	namespace:tigerso
SOCKET_STAGE_CONNECT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_CONNECT =  4;$/;"	m	namespace:tigerso
SOCKET_STAGE_LISTEN	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_LISTEN  =  2;$/;"	m	namespace:tigerso
SOCKET_STAGE_RECV	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_RECV    =  5;$/;"	m	namespace:tigerso
SOCKET_STAGE_SEND	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_SEND    =  6;$/;"	m	namespace:tigerso
SOCKET_STAGE_SOCKET	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_SOCKET  =  0;$/;"	m	namespace:tigerso
SOCKET_STAGE_UINIT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_UINIT   = -1;$/;"	m	namespace:tigerso
SPLIT	core/Logging.h	16;"	d
SPLIT	core/Logging.h	19;"	d
SRCS	test/Makefile	/^SRCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
SSLContext	ssl/SSLContext.h	/^    SSLContext(){}$/;"	f	class:tigerso::SSLContext
SSLContext	ssl/SSLContext.h	/^class SSLContext {$/;"	c	namespace:tigerso
SSLContext	test/SSLContex.h	/^namespace SSLContext {$/;"	n
SSLContext	test/SSLContext.h	/^class SSLContext {$/;"	c
SSLContext	test/https_lib/SSLContext.cpp	/^namespace SSLContext {$/;"	n	file:
SSLContextFactory	test/https_lib/Https.h	/^class SSLContextFactory {$/;"	c
SSLErrno	net/Socket.h	/^    int SSLErrno() { return sctx.serrno; }$/;"	f	class:tigerso::Socket
SSLHelper	ssl/SSLHelper.h	/^class SSLHelper {$/;"	c	namespace:tigerso
SSLIOState	ssl/SSLContext.h	/^}SSLIOState;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_SSL_IO_STATE
SSLMode	ssl/SSLContext.h	/^} SSLMode;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_SSL_MODE_
SSLRole	ssl/SSLContext.h	/^} SSLRole;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_SSL_ROLE_
SSLStrerror	ssl/SSLContext.cpp	15;"	d	file:
SSLStrerror	test/SSLContext.h	14;"	d
SSLVersion	test/https_lib/Https.h	/^} SSLVersion;$/;"	t	typeref:enum:_SSL_version
SSLWantReadMore	net/Socket.h	/^    bool SSLWantReadMore() { return isSSL() && sctx.serrno == SSL_ERROR_WANT_READ; }$/;"	f	class:tigerso::Socket
SSLWantWriteMore	net/Socket.h	/^    bool SSLWantWriteMore() { return isSSL() && sctx.serrno == SSL_ERROR_WANT_WRITE; }$/;"	f	class:tigerso::Socket
SSL_VERSION_ALL	test/https_lib/Https.h	/^    SSL_VERSION_ALL,$/;"	e	enum:_SSL_version
SSL_VERSION_SSLV3	test/https_lib/Https.h	/^    SSL_VERSION_SSLV3,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS10	test/https_lib/Https.h	/^    SSL_VERSION_TLS10,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS11	test/https_lib/Https.h	/^    SSL_VERSION_TLS11,$/;"	e	enum:_SSL_version
SSL_VERSION_TLS12	test/https_lib/Https.h	/^    SSL_VERSION_TLS12,$/;"	e	enum:_SSL_version
SSL_VERSION_UNKNOW	test/https_lib/Https.h	/^    SSL_VERSION_UNKNOW$/;"	e	enum:_SSL_version
STATUSCODE	http/HttpMessage.cpp	/^const std::string HttpMessage::STATUSCODE = "STATUSCODE";$/;"	m	class:tigerso::HttpMessage	file:
STATUSCODE	http/HttpMessage.h	/^    static const std::string STATUSCODE;$/;"	m	class:tigerso::HttpMessage
STRICT_CHECK	http/lib/http_parser.c	449;"	d	file:
STRICT_CHECK	http/lib/http_parser.c	458;"	d	file:
STRICT_TOKEN	http/lib/http_parser.c	424;"	d	file:
ScanFileType	util/FileTypeDetector.h	/^struct ScanFileType {$/;"	s	namespace:tigerso
ScanFileType	util/FileTypes/FileTypeDetector.h	/^struct ScanFileType {$/;"	s	namespace:tigerso::util
Send	net/SocketUtil.cpp	/^int SocketUtil::Send(Socket& mcsock, const void* buf, size_t len, size_t* sendn) {$/;"	f	class:tigerso::SocketUtil
ServerCertVerifyCallback	ssl/SSLContext.h	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t	namespace:tigerso
ServerCertVerifyCallback	test/SSLContex.h	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t
ServerCertVerifyCallback	test/SSLContext.h	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t
ServerCertVerifyCallback	test/https_lib/SSLContext.cpp	/^typedef int(*ServerCertVerifyCallback)(int, X509_STORE_CTX*);$/;"	t	namespace:SSLContext	file:
SetAddrReuseable	net/SocketUtil.cpp	/^bool SocketUtil::SetAddrReuseable(Socket& mcsock, bool on) {$/;"	f	class:tigerso::SocketUtil
SetCloseOnExec	net/SocketUtil.cpp	/^bool SocketUtil::SetCloseOnExec(Socket& mcsock) {$/;"	f	class:tigerso::SocketUtil
SetKeepAlive	net/SocketUtil.cpp	/^bool SocketUtil::SetKeepAlive(Socket& mcsock, bool on) {$/;"	f	class:tigerso::SocketUtil
SetPortReuseable	net/SocketUtil.cpp	/^bool SocketUtil::SetPortReuseable(Socket& mcsock, bool on) {$/;"	f	class:tigerso::SocketUtil
SetTcpNoDelay	net/SocketUtil.cpp	/^bool SocketUtil::SetTcpNoDelay(Socket& mcsock, bool on) {$/;"	f	class:tigerso::SocketUtil
SharedMemory	core/SysUtil.h	/^    SharedMemory():$/;"	f	class:tigerso::SharedMemory
SharedMemory	core/SysUtil.h	/^    SharedMemory(const string& name, const size_t size, const int prot = MAP_SHARED):$/;"	f	class:tigerso::SharedMemory
SharedMemory	core/SysUtil.h	/^class SharedMemory: public nocopyable {$/;"	c	namespace:tigerso
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex()$/;"	f	class:tigerso::ShmMutex
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex(const ShmMutex& mutex)$/;"	f	class:tigerso::ShmMutex
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex(const string& shm_name)$/;"	f	class:tigerso::ShmMutex
ShmMutex	core/SysUtil.h	/^class ShmMutex: public Lock {$/;"	c	namespace:tigerso
Socket	net/Socket.h	/^    Socket(): bufPtr_(inBuffer_, outBuffer_) {$/;"	f	class:tigerso::Socket
Socket	net/Socket.h	/^class Socket: public nocopyable {$/;"	c	namespace:tigerso
SocketPtr	net/Socket.h	/^typedef std::shared_ptr<Socket> SocketPtr;$/;"	t	namespace:tigerso
SocketUtil	net/SocketUtil.h	/^class SocketUtil {$/;"	c	namespace:tigerso
SysUtil	core/SysUtil.h	/^class SysUtil {$/;"	c	namespace:tigerso
T	http/lib/http_parser.c	237;"	d	file:
T	http/lib/http_parser.c	239;"	d	file:
T	http/lib/http_parser.c	277;"	d	file:
TARGET	test/Makefile	/^TARGET := $(OUTPUT)\/$(PROJECT)$/;"	m
TEST_FILEACCESS	core/File.h	22;"	d
TEST_FILEACCESS	test/File.h	18;"	d
TEST_FILEACCESS	test/HttpFile/File.h	21;"	d
TEST_FILEACCESS	test/sendfile/File.h	18;"	d
TIGERSO_IO_CLOSE	core/tigerso.h	/^    TIGERSO_IO_CLOSE = -2,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_ERROR	core/tigerso.h	/^    TIGERSO_IO_ERROR = -1,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_OK	core/tigerso.h	/^    TIGERSO_IO_OK$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIGERSO_IO_RECALL	core/tigerso.h	/^    TIGERSO_IO_RECALL,$/;"	e	enum:tigerso::_TIGERSO_IO_STATE_
TIMERFD_FD_BASE	net/TimeWheelEvent.h	18;"	d
TIMERFD_READ_SIZE	net/TimeWheelEvent.h	17;"	d
TIMEWHEEL_INTERVAL_SECOND	net/TimeWheelEvent.h	19;"	d
TOKEN	http/lib/http_parser.c	427;"	d	file:
TOKEN	http/lib/http_parser.c	431;"	d	file:
TRANSFER_ENCODING	http/lib/http_parser.c	167;"	d	file:
TS_CORE_BASECLASS_H_	core/BaseClass.h	2;"	d
TS_CORE_CONDITION_H_	core/Condition.h	2;"	d
TS_CORE_CONFIGPARSER_H_	core/ConfigParser.h	2;"	d
TS_CORE_CURRENTTHREAD_H_	core/CurrentThread.h	2;"	d
TS_CORE_DECHEX_H_	core/Dechex.h	2;"	d
TS_CORE_FILELOCK_H_	core/FileLock.h	2;"	d
TS_CORE_FILE_H_	core/File.h	2;"	d
TS_CORE_FILE_H_	test/HttpFile/File.h	2;"	d
TS_CORE_LOGGING_H_	core/Logging.h	7;"	d
TS_CORE_PTHREAD_H_	core/Thread.h	2;"	d
TS_CORE_RINGBUFFER_H_	test/HttpFile/RingBuffer.h	2;"	d
TS_CORE_SYSUTIL_H_	core/SysUtil.h	2;"	d
TS_CORE_THREADMUTEX_H_	core/ThreadMutex.h	2;"	d
TS_CORE_THREADPOOL_H_	core/ThreadPool.h	2;"	d
TS_CORE_TIGERSO_H_	core/tigerso.h	2;"	d
TS_DNS_DNSRESOLVER_H_	dns/DNSResolver.h	2;"	d
TS_HTTP_HTTPBODYFILE_H_	http/HttpBodyFile.h	2;"	d
TS_HTTP_HTTPMESSAGE_H_	http/HttpMessage.h	2;"	d
TS_HTTP_HTTPPARSER_H_	http/HttpParser.h	2;"	d
TS_HTTP_HTTPPROXY_H_	http/HttpProxy.h	2;"	d
TS_NET_BUFFER_H_	net/Buffer.h	2;"	d
TS_NET_CHANNEL_H_	net/Channel.h	2;"	d
TS_NET_DNSCACHE_H_	dns/DNSCache.h	2;"	d
TS_NET_EVENTSLOOP_H_	net/EventsLoop.h	2;"	d
TS_NET_RINGBUFFER_H_	net/RingBuffer.h	2;"	d
TS_NET_SOCKETUTIL_H_	net/SocketUtil.h	2;"	d
TS_NET_SOCKET_H_	net/Socket.h	2;"	d
TS_NET_TIMEWHEELEVENT_H_	net/TimeWheelEvent.h	2;"	d
TS_SSL_SSLCONTEXT_H_	ssl/SSLContext.h	2;"	d
TS_SSL_SSLCONTEXT_H_	test/SSLContext.h	2;"	d
TS_SSL_SSLHELPER_H_	ssl/SSLHelper.h	2;"	d
TS_UTIL_FILETYPEDETECTOR_H_	util/FileTypeDetector.h	2;"	d
TS_UTIL_FILETYPEDETECTOR_H_	util/FileTypes/FileTypeDetector.h	2;"	d
Task	core/ThreadPool.h	/^    typedef Thread::ThreadFunc Task;$/;"	t	class:tigerso::ThreadPool
TcpConnection	test/test_http.cpp	/^class TcpConnection {$/;"	c	file:
TestConnect	net/SocketUtil.cpp	/^bool SocketUtil::TestConnect(Socket& sock) {$/;"	f	class:tigerso::SocketUtil
Thread	core/Thread.cpp	/^Thread::Thread(const ThreadFunc& func, const std::string& name)$/;"	f	class:tigerso::Thread
Thread	core/Thread.h	/^class Thread: public nocopyable {$/;"	c	namespace:tigerso
ThreadData	core/Thread.cpp	/^    ThreadData(const ThreadFunc& func,$/;"	f	class:tigerso::ThreadData
ThreadData	core/Thread.cpp	/^class ThreadData {$/;"	c	namespace:tigerso	file:
ThreadFunc	core/Thread.cpp	/^    typedef Thread::ThreadFunc ThreadFunc;$/;"	t	class:tigerso::ThreadData	file:
ThreadFunc	core/Thread.h	/^    typedef std::function<void()>  ThreadFunc;$/;"	t	class:tigerso::Thread
ThreadInit	core/Thread.cpp	/^    ThreadInit() {$/;"	f	class:tigerso::initmain__::ThreadInit
ThreadInit	core/Thread.cpp	/^class ThreadInit {$/;"	c	namespace:tigerso::initmain__	file:
ThreadMutex	core/ThreadMutex.h	/^    ThreadMutex()$/;"	f	class:tigerso::ThreadMutex
ThreadMutex	core/ThreadMutex.h	/^class ThreadMutex: public Lock {$/;"	c	namespace:tigerso
ThreadPool	core/ThreadPool.h	/^    explicit ThreadPool(const std::string& name = "ThreadPool")$/;"	f	class:tigerso::ThreadPool
ThreadPool	core/ThreadPool.h	/^class ThreadPool: public nocopyable {$/;"	c	namespace:tigerso
ThreadPtr	core/ThreadPool.h	/^    typedef std::shared_ptr<Thread> ThreadPtr;$/;"	t	class:tigerso::ThreadPool
TimeEvent	test/TimedEvent.h	/^    TimeEvent(const int nodenum = 4): _nodeNum(nodenum) {$/;"	f	class:TimedEvent
TimeNode	net/TimeWheelEvent.h	/^} TimeNode;$/;"	t	class:tigerso::TimeWheelEvent	typeref:struct:tigerso::TimeWheelEvent::_TimeNode_st
TimeNode	test/TimedEvent.h	/^struct TimeNode{$/;"	s
TimeWheelEvent	net/TimeWheelEvent.cpp	/^TimeWheelEvent::TimeWheelEvent(const int nodenum): _nodeNum(nodenum) {$/;"	f	class:tigerso::TimeWheelEvent
TimeWheelEvent	net/TimeWheelEvent.h	/^class TimeWheelEvent: public nocopyable {$/;"	c	namespace:tigerso
TimedEvent	test/TimedEvent.h	/^class TimedEvent {$/;"	c
TimerFd	net/TimeWheelEvent.h	20;"	d
UF_FRAGMENT	http/lib/http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	http/lib/http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	http/lib/http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	http/lib/http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	http/lib/http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	http/lib/http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	http/lib/http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	http/lib/http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
ULLONG_MAX	http/lib/http_parser.c	33;"	d	file:
UNLIKELY	http/lib/http_parser.c	72;"	d	file:
UNLIKELY	http/lib/http_parser.c	75;"	d	file:
UPDATE_STATE	http/lib/http_parser.c	60;"	d	file:
UPGRADE	http/lib/http_parser.c	168;"	d	file:
UPSTREAM_MAX_NUMBER	net/Upstream.h	22;"	d
UPSTREAM_WORK_ADAPTIVE	net/Upstream.h	/^    UPSTREAM_WORK_ADAPTIVE,$/;"	e	enum:tigerso::_UPSTREAM_WORK_MODE_
UPSTREAM_WORK_MODE	net/Upstream.h	/^} UPSTREAM_WORK_MODE;$/;"	t	namespace:tigerso	typeref:enum:tigerso::_UPSTREAM_WORK_MODE_
UPSTREAM_WORK_ROUBDROBIN	net/Upstream.h	/^    UPSTREAM_WORK_ROUBDROBIN,$/;"	e	enum:tigerso::_UPSTREAM_WORK_MODE_
UPSTREAM_WORK_SINGLE	net/Upstream.h	/^    UPSTREAM_WORK_SINGLE,$/;"	e	enum:tigerso::_UPSTREAM_WORK_MODE_
UPSTREAM_WORK_UNKNOWN	net/Upstream.h	/^    UPSTREAM_WORK_UNKNOWN$/;"	e	enum:tigerso::_UPSTREAM_WORK_MODE_
URL	http/HttpMessage.cpp	/^const std::string HttpMessage::URL = "URL";$/;"	m	class:tigerso::HttpMessage	file:
URL	http/HttpMessage.h	/^    static const std::string URL;$/;"	m	class:tigerso::HttpMessage
UUID_T	test/http_server.cpp	/^typedef unsigned int UUID_T; $/;"	t	file:
UnassignGuard	core/ThreadMutex.h	/^        UnassignGuard(ThreadMutex& mutex)$/;"	f	class:tigerso::ThreadMutex::UnassignGuard
UnassignGuard	core/ThreadMutex.h	/^    class UnassignGuard {$/;"	c	class:tigerso::ThreadMutex
Unregister	http/HttpMessage.cpp	/^void HttpInSpection::Unregister(const std::string& header, http_role_t role) {$/;"	f	class:tigerso::HttpInSpection
Upstream	net/Upstream.h	/^    Upstream() {}$/;"	f	class:tigerso::Upstream
Upstream	net/Upstream.h	/^class Upstream: public nocopyable {$/;"	c	namespace:tigerso
UpstreamNode	net/Upstream.h	/^struct UpstreamNode{$/;"	s	class:tigerso::Upstream
VERSION	core/tigerso.h	/^const std::string  VERSION     =  "1.0.0";$/;"	m	namespace:tigerso::core
VERSION	http/HttpMessage.cpp	/^const std::string HttpMessage::VERSION = "VERSION";$/;"	m	class:tigerso::HttpMessage	file:
VERSION	http/HttpMessage.h	/^    static const std::string VERSION;$/;"	m	class:tigerso::HttpMessage
ValidateAddr	net/SocketUtil.cpp	/^bool SocketUtil::ValidateAddr(const std::string& addr) {$/;"	f	class:tigerso::SocketUtil
ValidatePort	net/SocketUtil.cpp	/^bool SocketUtil::ValidatePort(const std::string& sport) {$/;"	f	class:tigerso::SocketUtil
WORKPATH	core/tigerso.h	/^const std::string  WORKPATH    =  "\/usr\/" + PROJECT;$/;"	m	namespace:tigerso::core
WORKPATH	test/Makefile	/^WORKPATH := $(shell cd .. && pwd)$/;"	m
XX	http/lib/http_parser.c	1013;"	d	file:
XX	http/lib/http_parser.c	1034;"	d	file:
XX	http/lib/http_parser.c	176;"	d	file:
XX	http/lib/http_parser.c	178;"	d	file:
XX	http/lib/http_parser.h	157;"	d
XX	http/lib/http_parser.h	159;"	d
XX	http/lib/http_parser.h	208;"	d
XX	http/lib/http_parser.h	210;"	d
_BASE64_H_	http/lib/base64.h	85;"	d
_CHUNKEDATADONE	http/HttpBodyFile.h	/^        _CHUNKEDATADONE,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKEDATAON	http/HttpBodyFile.h	/^        _CHUNKEDATAON,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKEOFDONE	http/HttpBodyFile.h	/^        _CHUNKEOFDONE,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKEOFON	http/HttpBodyFile.h	/^        _CHUNKEOFON,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKFILEDONE	http/HttpBodyFile.h	/^        _CHUNKFILEDONE,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKNULLDONE	http/HttpBodyFile.h	/^        _CHUNKNULLDONE$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKNULLON	http/HttpBodyFile.h	/^        _CHUNKNULLON,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKSIZEDONE	http/HttpBodyFile.h	/^        _CHUNKSIZEDONE,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKSIZEON	http/HttpBodyFile.h	/^        _CHUNKSIZEON,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNKUINIT	http/HttpBodyFile.h	/^        _CHUNKUINIT,$/;"	e	enum:tigerso::HttpBodyFile::_CHUNK_SEND_STATE
_CHUNK_SEND_STATE	http/HttpBodyFile.h	/^typedef  enum _CHUNK_SEND_STATE{$/;"	g	class:tigerso::HttpBodyFile
_HTTP_BODY_MODE_	http/HttpBodyFile.h	/^typedef enum _HTTP_BODY_MODE_ {$/;"	g	namespace:tigerso
_OPENSSL_	ssl/SSLContext.cpp	/^namespace _OPENSSL_ {$/;"	n	namespace:tigerso	file:
_SSL_ERROR_CODE	ssl/SSLContext.h	/^typedef enum _SSL_ERROR_CODE {$/;"	g	namespace:tigerso
_SSL_IO_STATE	ssl/SSLContext.h	/^typedef enum _SSL_IO_STATE {$/;"	g	namespace:tigerso
_SSL_MODE_	ssl/SSLContext.h	/^typedef enum _SSL_MODE_ {$/;"	g	namespace:tigerso
_SSL_ROLE_	ssl/SSLContext.h	/^typedef enum _SSL_ROLE_{$/;"	g	namespace:tigerso
_SSL_ROLE_	test/SSLContext.h	/^typedef enum _SSL_ROLE_{$/;"	g
_SSL_version	test/https_lib/Https.h	/^typedef enum _SSL_version {$/;"	g
_TIGERSO_IO_STATE_	core/tigerso.h	/^typedef enum _TIGERSO_IO_STATE_ {$/;"	g	namespace:tigerso
_TMP_CA_PEM_DIR	ssl/scripts/ca_converter.py	/^_TMP_CA_PEM_DIR=".\/tmp_capem\/"$/;"	v
_TS_HTTP_UPSTREAM_H_	net/Upstream.h	2;"	d
_TimeNode_st	net/TimeWheelEvent.h	/^    _TimeNode_st(){ id ++; }$/;"	f	struct:tigerso::TimeWheelEvent::_TimeNode_st
_TimeNode_st	net/TimeWheelEvent.h	/^typedef struct _TimeNode_st{$/;"	s	class:tigerso::TimeWheelEvent
_UPSTREAM_WORK_MODE_	net/Upstream.h	/^typedef enum _UPSTREAM_WORK_MODE_ {$/;"	g	namespace:tigerso
__del__	test/HttpFile/client.py	/^    def __del__(self):$/;"	m	class:client	file:
__init__	test/HttpFile/client.py	/^    def __init__(self, addr, port):$/;"	m	class:client
_baseID	test/http_server.cpp	/^    static UUID_T _baseID;$/;"	m	class:HttpConnection	file:
_baseID	test/http_server.cpp	/^UUID_T HttpConnection::_baseID = 0;$/;"	m	class:HttpConnection	file:
_buffer	net/RingBuffer.h	/^    char* _buffer;$/;"	m	class:tigerso::RingBuffer
_buffer	test/HttpFile/RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_buffer	test/RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_buffer	test/sendfile/RingBuffer.h	/^    char* _buffer;$/;"	m	class:RingBuffer
_capacity	net/RingBuffer.h	/^    size_t _capacity;$/;"	m	class:tigerso::RingBuffer
_chunkNulldone	test/HttpFile/HttpBodyFile.h	/^        _chunkNulldone$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkNullon	test/HttpFile/HttpBodyFile.h	/^        _chunkNullon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunk_send_state	test/HttpFile/HttpBodyFile.h	/^typedef  enum _chunk_send_state{$/;"	g	class:HttpBodyFile
_chunkedatadone	test/HttpFile/HttpBodyFile.h	/^        _chunkedatadone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkedataon	test/HttpFile/HttpBodyFile.h	/^        _chunkedataon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkeofdone	test/HttpFile/HttpBodyFile.h	/^        _chunkeofdone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkeofon	test/HttpFile/HttpBodyFile.h	/^        _chunkeofon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkfiledone	test/HttpFile/HttpBodyFile.h	/^        _chunkfiledone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunksize	http/HttpBodyFile.h	/^    int _chunksize = 4096;$/;"	m	class:tigerso::HttpBodyFile
_chunksize	test/HttpFile/HttpBodyFile.h	/^    int _chunksize = 4096;$/;"	m	class:HttpBodyFile
_chunksizedone	test/HttpFile/HttpBodyFile.h	/^        _chunksizedone,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunksizeon	test/HttpFile/HttpBodyFile.h	/^        _chunksizeon,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_chunkstate	http/HttpBodyFile.h	/^    ChunkState _chunkstate = _CHUNKUINIT;$/;"	m	class:tigerso::HttpBodyFile
_chunkstate	test/HttpFile/HttpBodyFile.h	/^    ChunkState _chunkstate = _chunkuinit;$/;"	m	class:HttpBodyFile
_chunkuinit	test/HttpFile/HttpBodyFile.h	/^        _chunkuinit,$/;"	e	enum:HttpBodyFile::_chunk_send_state
_clientSocket	http/HttpProxy.h	29;"	d
_clientSocket	test/backup/http_proxy.cpp	38;"	d	file:
_clientVerifyServerCertCallback	ssl/SSLContext.cpp	/^    int _clientVerifyServerCertCallback(int ok, X509_STORE_CTX* xstore) {$/;"	f	namespace:tigerso::_OPENSSL_
_clientVerifyServerCertCallback	test/SSLContex.h	/^    int _clientVerifyServerCertCallback(int ok, X509_STORE_CTX* xstore) {$/;"	f	namespace:SSLContext
_clientVerifyServerCertCallback	test/https_lib/SSLContext.cpp	/^    int _clientVerifyServerCertCallback(int ok, X509_STORE_CTX* xstore) {$/;"	f	namespace:SSLContext
_connections	test/http_server.cpp	/^    std::map<UUID_T, HTTPCONNECTIONPTR> _connections;$/;"	m	class:HttpServer	file:
_countConnections	test/http_server.cpp	/^    int _countConnections() { return _connections.size(); }$/;"	f	class:HttpServer	file:
_createListenMaster	test/http_server.cpp	/^    int _createListenMaster(const char* ipaddr, int port) {$/;"	f	class:HttpServer	file:
_current	net/TimeWheelEvent.h	/^    TimeNode* _current= nullptr;$/;"	m	class:tigerso::TimeWheelEvent
_current	net/Upstream.h	/^    UpstreamNode* _current = nullptr;$/;"	m	class:tigerso::Upstream
_current	test/TimedEvent.h	/^    TimeNode* _current= nullptr;$/;"	m	class:TimedEvent
_destoryOpenssl	ssl/SSLContext.cpp	/^    void _destoryOpenssl() {$/;"	f	namespace:tigerso::_OPENSSL_
_dnsSocket	http/HttpProxy.h	31;"	d
_dnsSocket	test/backup/http_proxy.cpp	40;"	d	file:
_eloop	test/http_server.cpp	/^    EventsLoop _eloop;$/;"	m	class:HttpServer	file:
_file	http/HttpBodyFile.h	/^    File _file;$/;"	m	class:tigerso::HttpBodyFile
_file	test/HttpFile/HttpBodyFile.h	/^    File _file;$/;"	m	class:HttpBodyFile
_file	test/sendfile/HttpBodyFile.h	/^    File _file;$/;"	m	class:HttpBodyFile
_head	net/TimeWheelEvent.h	/^    TimeNode* _head = nullptr;$/;"	m	class:tigerso::TimeWheelEvent
_head	test/TimedEvent.h	/^    TimeNode* _head = nullptr;$/;"	m	class:TimedEvent
_host	test/http_server.cpp	/^    const std::string _host;$/;"	m	class:HttpServer	file:
_initClientContext	ssl/SSLContext.cpp	/^    int _initClientContext(const char* trustCAPath, const char* crlPath) {$/;"	f	namespace:tigerso::_OPENSSL_
_initClientContext	test/SSLContex.h	/^    int _initClientContext(const char* trustCAPath, const char* crlPath) {$/;"	f	namespace:SSLContext
_initClientContext	test/https_lib/SSLContext.cpp	/^    int _initClientContext(const char* trustCAPath, const char* crlPath) {$/;"	f	namespace:SSLContext
_initOpenssl	ssl/SSLContext.cpp	/^    void _initOpenssl() {$/;"	f	namespace:tigerso::_OPENSSL_
_initServerContext	ssl/SSLContext.cpp	/^    int _initServerContext(const char* servercert, const char* privatekey) {$/;"	f	namespace:tigerso::_OPENSSL_
_initServerContext	test/SSLContex.h	/^    int _initServerContext(const char* servercert, const char* privatekey) {$/;"	f	namespace:SSLContext
_initServerContext	test/https_lib/SSLContext.cpp	/^    int _initServerContext(const char* servercert, const char* privatekey) {$/;"	f	namespace:SSLContext
_masterSock	test/http_server.cpp	/^    SocketPtr _masterSock;$/;"	m	class:HttpServer	file:
_mode	net/Upstream.h	/^    UPSTREAM_WORK_MODE _mode;$/;"	m	class:tigerso::Upstream
_newConnection	test/http_server.cpp	/^    HTTPCONNECTIONPTR _newConnection() {$/;"	f	class:HttpServer	file:
_nodeNum	net/TimeWheelEvent.h	/^    const int _nodeNum;$/;"	m	class:tigerso::TimeWheelEvent
_nodeNum	test/TimedEvent.h	/^    int _nodeNum = 2;$/;"	m	class:TimedEvent
_ownCert	ssl/SSLContext.h	/^    X509* _ownCert = nullptr;$/;"	m	class:tigerso::SSLContext
_ownCert	test/SSLContex.h	/^    X509* _ownCert = nullptr;$/;"	m	class:HttpsContext
_ownCert	test/SSLContext.h	/^    X509* _ownCert = nullptr;$/;"	m	class:SSLContext
_ownCert	test/https_lib/SSLContext.cpp	/^    X509* _ownCert = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_parser	test/http_server.cpp	/^    HttpParser        _parser;$/;"	m	class:HttpConnection	file:
_peerCert	ssl/SSLContext.h	/^    X509* _peerCert = nullptr;$/;"	m	class:tigerso::SSLContext
_peerCert	test/SSLContex.h	/^    X509* _peerCert = nullptr;$/;"	m	class:HttpsContext
_peerCert	test/SSLContext.h	/^    X509* _peerCert = nullptr;$/;"	m	class:SSLContext
_peerCert	test/https_lib/SSLContext.cpp	/^    X509* _peerCert = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_readoffset	http/HttpBodyFile.h	/^    off_t _readoffset = 0;$/;"	m	class:tigerso::HttpBodyFile
_readoffset	test/HttpFile/HttpBodyFile.h	/^    off_t _readoffset = 0;$/;"	m	class:HttpBodyFile
_readptr	net/RingBuffer.h	/^    char* _readptr;$/;"	m	class:tigerso::RingBuffer
_readptr	test/HttpFile/RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_readptr	test/RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_readptr	test/sendfile/RingBuffer.h	/^    char* _readptr;$/;"	m	class:RingBuffer
_request	test/http_server.cpp	/^    HttpRquest        _request;$/;"	m	class:HttpConnection	file:
_response	test/http_server.cpp	/^    HttpResponse      _response;$/;"	m	class:HttpConnection	file:
_ringbuf	http/HttpBodyFile.h	/^    RingBuffer _ringbuf; \/\/ Cache for file IO$/;"	m	class:tigerso::HttpBodyFile
_ringbuf	test/HttpFile/HttpBodyFile.h	/^    RingBuffer _ringbuf; \/\/ Cache for file$/;"	m	class:HttpBodyFile
_ringbuf	test/sendfile/HttpBodyFile.h	/^    RingBuffer _ringbuf;$/;"	m	class:HttpBodyFile
_role	ssl/SSLContext.h	/^    SSLRole _role = SCTX_ROLE_UNKNOWN;$/;"	m	class:tigerso::SSLContext
_role	test/SSLContex.h	/^    HttpsRole _role = HTTPS_ROLE_UNKNOWN;$/;"	m	class:HttpsContext
_role	test/SSLContext.h	/^    HttpsRole _role = SCTX_ROLE_UNKNOWN;$/;"	m	class:SSLContext
_role	test/https_lib/SSLContext.cpp	/^    HttpsRole _role = HTTPS_ROLE_UNKNOWN;$/;"	m	class:SSLContext::HttpsContext	file:
_root	net/Upstream.h	/^    UpstreamNode* _root = nullptr;$/;"	m	class:tigerso::Upstream
_sendContentDone	http/HttpBodyFile.h	/^    bool _sendContentDone = false;$/;"	m	class:tigerso::HttpBodyFile
_senddone	test/HttpFile/HttpBodyFile.h	/^    bool _senddone = false;$/;"	m	class:HttpBodyFile
_serverSocket	http/HttpProxy.h	30;"	d
_serverSocket	test/backup/http_proxy.cpp	39;"	d	file:
_size	test/HttpFile/RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_size	test/RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_size	test/sendfile/RingBuffer.h	/^    size_t _size;$/;"	m	class:RingBuffer
_ssl	ssl/SSLContext.h	/^    SSL* _ssl = nullptr;$/;"	m	class:tigerso::SSLContext
_ssl	test/SSLContex.h	/^    SSL* _ssl = nullptr;$/;"	m	class:HttpsContext
_ssl	test/SSLContext.h	/^    SSL* _ssl = nullptr;$/;"	m	class:SSLContext
_ssl	test/https_lib/SSLContext.cpp	/^    SSL* _ssl = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_sslctx	ssl/SSLContext.h	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:tigerso::SSLContext
_sslctx	test/SSLContex.h	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:HttpsContext
_sslctx	test/SSLContext.h	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:SSLContext
_sslctx	test/https_lib/SSLContext.cpp	/^    SSL_CTX* _sslctx = nullptr;$/;"	m	class:SSLContext::HttpsContext	file:
_timerfd	net/TimeWheelEvent.h	/^    TimerFd _timerfd;$/;"	m	class:tigerso::TimeWheelEvent
_timerfd	test/TimedEvent.h	/^    int _timerfd = -1;$/;"	m	class:TimedEvent
_uinitClientContext	ssl/SSLContext.cpp	/^    void _uinitClientContext() {$/;"	f	namespace:tigerso::_OPENSSL_
_uinitClientContext	test/SSLContex.h	/^    void _uinitClientContext() {$/;"	f	namespace:SSLContext
_uinitClientContext	test/https_lib/SSLContext.cpp	/^    void _uinitClientContext() {$/;"	f	namespace:SSLContext
_uinitServerContext	ssl/SSLContext.cpp	/^    void _uinitServerContext() {$/;"	f	namespace:tigerso::_OPENSSL_
_uinitServerContext	test/SSLContex.h	/^    void _uinitServerContext() {$/;"	f	namespace:SSLContext
_uinitServerContext	test/https_lib/SSLContext.cpp	/^    void _uinitServerContext() {$/;"	f	namespace:SSLContext
_updateUID	test/http_server.cpp	/^UUID_T HttpConnection::_updateUID() {$/;"	f	class:HttpConnection
_uuid	test/http_server.cpp	/^    UUID_T _uuid = 0;$/;"	m	class:HttpConnection	file:
_writeptr	net/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:tigerso::RingBuffer
_writeptr	test/HttpFile/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
_writeptr	test/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
_writeptr	test/sendfile/RingBuffer.h	/^    char* _writeptr;$/;"	m	class:RingBuffer
aa	test/test_thread.cpp	/^int aa = 0;$/;"	v
accept	ssl/SSLContext.cpp	/^int SSLContext::accept() {$/;"	f	class:tigerso::SSLContext
accept	test/SSLContex.h	/^    int accept() {$/;"	f	class:HttpsContext
accept	test/https_lib/SSLContext.cpp	/^    int accept() {$/;"	f	class:SSLContext::HttpsContext
acceptConnections	test/http_server.cpp	/^    int acceptConnections(Socket& master) {$/;"	f	class:HttpServer
acceptHttpClientConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::acceptHttpClientConnection(Socket& master) {$/;"	f	class:tigerso::HttpProxyLoop
acceptHttpClientConnection	test/backup/http_proxy.cpp	/^     int acceptHttpClientConnection(Socket& master) {$/;"	f	class:HttpProxyLoop
acceptMasterSocket	test/test_http.cpp	/^int acceptMasterSocket(SocketPtr& master) {$/;"	f
active	net/Upstream.h	/^    bool active = false;$/;"	m	struct:tigerso::Upstream::UpstreamNode
active	net/Upstream.h	/^    bool active(unsigned int loc) {$/;"	f	class:tigerso::Upstream
active	ssl/SSLContext.cpp	/^bool SSLContext::active() {$/;"	f	class:tigerso::SSLContext
active	test/SSLContex.h	/^    bool active() {$/;"	f	class:HttpsContext
active	test/https_lib/SSLContext.cpp	/^    bool active() {$/;"	f	class:SSLContext::HttpsContext
activeNode	net/Upstream.h	/^    bool activeNode(unsigned int loc, bool on) {$/;"	f	class:tigerso::Upstream
addChannel	net/EventsLoop.cpp	/^int EventsLoop::addChannel(Channel* cnptr) {$/;"	f	class:tigerso::EventsLoop
addData	net/Buffer.cpp	/^size_t Buffer::addData(const char* buf, size_t len) {$/;"	f	class:tigerso::Buffer
addData	net/Buffer.cpp	/^size_t Buffer::addData(const std::string& data) {$/;"	f	class:tigerso::Buffer
additions	dns/DNSResolver.h	/^    unsigned short additions;$/;"	m	struct:tigerso::DNSHeader
addr_	dns/DNSCache.h	/^    char addr_[IPV4_ADDRSIZE] = {0};$/;"	m	struct:tigerso::DNSNode
addr_	net/Socket.h	/^    std::string addr_;$/;"	m	class:tigerso::Socket
afterCallback	test/test_http.cpp	/^int afterCallback(SocketPtr& sockptr) {$/;"	f
afterFork	core/Thread.cpp	/^void afterFork() {$/;"	f	namespace:tigerso::initmain__
after_cb	net/Channel.h	/^    EventFunc after_cb = nullptr;$/;"	m	class:tigerso::Channel
align	net/Buffer.cpp	/^int Buffer::align() {$/;"	f	class:tigerso::Buffer
answer_name_	dns/DNSResolver.h	/^    std::string answer_name_;$/;"	m	class:tigerso::DNSResolver
answer_ttl_	dns/DNSResolver.h	/^    time_t answer_ttl_ = 0;$/;"	m	class:tigerso::DNSResolver
answers	dns/DNSResolver.h	/^    unsigned short answers;$/;"	m	struct:tigerso::DNSHeader
appendBody	http/HttpMessage.h	/^    virtual void appendBody(const char* buf, size_t len) { body_.writeIn(buf, len); }$/;"	f	class:tigerso::HttpMessage
appendHeader	http/HttpMessage.h	/^    virtual void appendHeader(std::string header, std::string value) {$/;"	f	class:tigerso::HttpMessage
appendWriteIn	core/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:tigerso::File
appendWriteIn	test/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
appendWriteIn	test/HttpFile/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
appendWriteIn	test/sendfile/File.cpp	/^ssize_t File::appendWriteIn(const char* buf, size_t len) {$/;"	f	class:File
aresPackDNSQuery	dns/DNSResolver.cpp	/^int DNSResolver::aresPackDNSQuery(const char* host, size_t len) {$/;"	f	class:tigerso::DNSResolver
aresResvDNSAnswer	dns/DNSResolver.cpp	/^int DNSResolver::aresResvDNSAnswer() {$/;"	f	class:tigerso::DNSResolver
array	dns/DNSCache.h	/^    DNSNode array[HASH_NODENUM];$/;"	m	struct:tigerso::DNSCacheData
assignHolder	core/ThreadMutex.h	/^    void assignHolder() {$/;"	f	class:tigerso::ThreadMutex
assigned_addr_	dns/DNSResolver.h	/^    std::string assigned_addr_ = "";$/;"	m	class:tigerso::DNSResolver
asyncQueryInit	dns/DNSResolver.cpp	/^int DNSResolver::asyncQueryInit(const std::string& host, Socket& udpsock){$/;"	f	class:tigerso::DNSResolver
asyncQueryStart	dns/DNSResolver.cpp	/^int DNSResolver::asyncQueryStart(EventsLoop& loop, Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
attachHttpMessage	net/Buffer.cpp	/^int Buffer::attachHttpMessage(HttpMessage* msg) {$/;"	f	class:tigerso::Buffer
authorities	dns/DNSResolver.h	/^    unsigned short authorities;$/;"	m	struct:tigerso::DNSHeader
base_	http/HttpProxy.cpp	/^IDTYPE HttpProxyConnection::base_ = 0;$/;"	m	class:tigerso::HttpProxyConnection	file:
base_	http/HttpProxy.h	/^    static IDTYPE base_;$/;"	m	class:tigerso::HttpProxyConnection
base_	test/backup/http_proxy.cpp	/^    static IDTYPE base_;$/;"	m	class:HttpProxyConnection	file:
base_	test/backup/http_proxy.cpp	/^IDTYPE HttpProxyConnection::base_ = 0;$/;"	m	class:HttpProxyConnection	file:
basis_64	http/lib/base64.c	/^static const char basis_64[] =$/;"	v	file:
beforeCallback	test/test_http.cpp	/^int beforeCallback(SocketPtr& sockptr) {$/;"	f
before_cb	net/Channel.h	/^    EventFunc before_cb = nullptr;$/;"	m	class:tigerso::Channel
bigfile_	http/HttpParser.h	/^    bool bigfile_ = false;$/;"	m	class:tigerso::HttpParser
bindSocket	ssl/SSLContext.cpp	/^int SSLContext::bindSocket(int sockfd) {$/;"	f	class:tigerso::SSLContext
bindSocket	test/SSLContex.h	/^    int bindSocket(int sockfd) {$/;"	f	class:HttpsContext
bindSocket	test/https_lib/SSLContext.cpp	/^    int bindSocket(int sockfd) {$/;"	f	class:SSLContext::HttpsContext
blockIO_	net/Socket.h	/^    bool blockIO_ = false;$/;"	m	class:tigerso::Socket
blocking	core/tigerso.h	59;"	d
blocking	test/File.h	15;"	d
blocking	test/HttpFile/File.h	18;"	d
blocking	test/sendfile/File.h	15;"	d
body_	http/HttpMessage.h	/^    HttpBodyFile body_;$/;"	m	class:tigerso::HttpMessage
bodyname_	http/HttpMessage.h	/^    std::string bodyname_;$/;"	m	class:tigerso::HttpMessage
bossZoneHandler	test/HttpFile/index.html	/^	function bossZoneHandler(){$/;"	f
buf	test/HttpFile/client.py	/^        buf = cli.recv()$/;"	v
bufPtr_	net/Socket.h	/^    BufferPtr bufPtr_;$/;"	m	class:tigerso::Socket
buffer	test/test_ringbuffer.cpp	/^char buffer[] = "I am testing RingBuffer cache!";$/;"	v
buffer2	test/test_ringbuffer.cpp	/^char buffer2[] = "padding to fulfill the cache! hahaha";$/;"	v
buffer_	http/HttpParser.h	/^    const char* buffer_;$/;"	m	class:tigerso::HttpParser
buffer_	net/Buffer.h	/^    char* buffer_;$/;"	m	class:tigerso::Buffer
bufsize_	net/Buffer.h	/^    size_t bufsize_;$/;"	m	class:tigerso::Buffer
c_ptr	test/test_mutex.cpp	/^share_count* c_ptr = nullptr;$/;"	v
cacheTid_	core/Thread.cpp	/^   __thread int cacheTid_ = 0;$/;"	m	namespace:tigerso::CurrentThread	file:
cachefile_	dns/DNSCache.cpp	/^std::string DNSCache::cachefile_ = CACHE_FILE_NAME;$/;"	m	class:tigerso::DNSCache	file:
cachefile_	dns/DNSCache.h	/^    static std::string cachefile_; $/;"	m	class:tigerso::DNSCache
cachehitnum	dns/DNSCache.h	/^    volatile size_t cachehitnum;$/;"	m	struct:tigerso::DNSCacheData
calcMd5	dns/DNSCache.cpp	/^static int calcMd5(const char* buf, unsigned char* key, int keylen) {$/;"	f	namespace:tigerso
callback_	dns/DNSResolver.h	/^    DNS_CALLBACK callback_ = nullptr;$/;"	m	class:tigerso::DNSResolver
channelNum_	net/EventsLoop.h	/^    const int channelNum_ = DEFAULT_CHANNEL_NUM;$/;"	m	class:tigerso::EventsLoop
channelptr	net/Socket.h	/^    Channel* channelptr = nullptr;$/;"	m	class:tigerso::Socket
checkImgErr	test/HttpFile/index.html	/^			function checkImgErr(n) {$/;"	f
child_start	test/test_mutex.cpp	/^int child_start() {$/;"	f
chunked	http/HttpBodyFile.h	/^    bool chunked = false; $/;"	m	class:tigerso::HttpBodyFile
chunked	test/HttpFile/HttpBodyFile.h	/^    bool chunked = false; $/;"	m	class:HttpBodyFile
chunked	test/sendfile/HttpBodyFile.h	/^    bool chunked = false; $/;"	m	class:HttpBodyFile
cleanNeedDeletedChannels	net/EventsLoop.cpp	/^int EventsLoop::cleanNeedDeletedChannels() {$/;"	f	class:tigerso::EventsLoop
cleanup_openssl	test/HttpsServer.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	test/https_client.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	test/https_lib/https_client.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	test/https_lib/https_server.cpp	/^void cleanup_openssl()$/;"	f
cleanup_openssl	test/https_server.cpp	/^void cleanup_openssl()$/;"	f
clear	http/HttpMessage.h	/^    virtual void clear() {$/;"	f	class:tigerso::HttpMessage
clear	http/HttpMessage.h	/^    void clear() {$/;"	f	class:tigerso::HttpRequest
clear	http/HttpMessage.h	/^    void clear() {$/;"	f	class:tigerso::HttpResponse
clear	http/HttpProxy.cpp	/^void HttpProxyLoop::clear() {$/;"	f	class:tigerso::HttpProxyLoop
clear	net/Buffer.cpp	/^size_t Buffer::clear() {$/;"	f	class:tigerso::Buffer
clear	net/RingBuffer.cpp	/^void RingBuffer::clear() {$/;"	f	class:tigerso::RingBuffer
clear	test/HttpFile/RingBuffer.h	/^    void clear() {$/;"	f	class:RingBuffer
clear	test/backup/http_proxy.cpp	/^    void clear() {$/;"	f	class:HttpProxyLoop	file:
clearCurrentTimeNode	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::clearCurrentTimeNode() {$/;"	f	class:tigerso::TimeWheelEvent
clearCurrentTimeNode	test/TimedEvent.h	/^    int clearCurrentTimeNode() {$/;"	f	class:TimedEvent
clear_oldPEM	ssl/scripts/build_castore.sh	/^clear_oldPEM () {$/;"	f
cli	test/HttpFile/client.py	/^    cli = client(ip, port)$/;"	v
client	test/HttpFile/client.py	/^class client:$/;"	c
client2close_	http/HttpProxy.h	/^    bool client2close_ = false;$/;"	m	class:tigerso::HttpProxyConnection
client2close_	test/backup/http_proxy.cpp	/^    bool client2close_ = false;$/;"	m	class:HttpProxyConnection	file:
clientCloseHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientCloseHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientCloseHandle	test/backup/http_proxy.cpp	/^  int clientCloseHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientContexts	test/https_lib/Https.h	/^    SSL_CTX* clientContexts[SSL_VERSION_UNKNOW];$/;"	m	class:SSLContextFactory
clientErrorHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientErrorHandle(Socket& client) {  return clientRDHUPHandle(client); }$/;"	f	class:tigerso::HttpProxyConnection
clientErrorHandle	test/backup/http_proxy.cpp	/^    int clientErrorHandle(Socket& client) {  return clientRDHUPHandle(client); }$/;"	f	class:HttpProxyConnection
clientFinalWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientFinalWriteHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientFinalWriteHandle	test/backup/http_proxy.cpp	/^    int clientFinalWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientFirstReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientFirstReadHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientFirstReadHandle	test/backup/http_proxy.cpp	/^    int clientFirstReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientOnlyWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientOnlyWriteHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientOnlyWriteHandle	test/backup/http_proxy.cpp	/^    int clientOnlyWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientRDHUPHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientRDHUPHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientRDHUPHandle	test/backup/http_proxy.cpp	/^    int clientRDHUPHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientReadHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientReadHandle	test/backup/http_proxy.cpp	/^    int clientReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientSafeClose	http/HttpProxy.cpp	/^int HttpProxyConnection::clientSafeClose(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientSafeClose	test/backup/http_proxy.cpp	/^   int clientSafeClose(Socket& client) {$/;"	f	class:HttpProxyConnection
clientTimeoutHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientTimeoutHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientTunnelReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientTunnelReadHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientTunnelReadHandle	test/backup/http_proxy.cpp	/^    int clientTunnelReadHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientTunnelWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientTunnelWriteHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientTunnelWriteHandle	test/backup/http_proxy.cpp	/^    int clientTunnelWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::clientWriteHandle(Socket& client) {$/;"	f	class:tigerso::HttpProxyConnection
clientWriteHandle	test/backup/http_proxy.cpp	/^    int clientWriteHandle(Socket& client) {$/;"	f	class:HttpProxyConnection
clientptr_	test/test_http.cpp	/^    SocketPtr clientptr_ = nullptr;$/;"	m	class:ProxyConnection	file:
clockErrorHandle	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::clockErrorHandle(TimerFd& tfd) {$/;"	f	class:tigerso::TimeWheelEvent
clockEventHandle	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::clockEventHandle(TimerFd& tfd) {$/;"	f	class:tigerso::TimeWheelEvent
clockJump	net/TimeWheelEvent.cpp	/^void TimeWheelEvent::clockJump() {$/;"	f	class:tigerso::TimeWheelEvent
clockJump	test/TimedEvent.h	/^    void clockJump() {$/;"	f	class:TimedEvent
close	core/File.h	/^    int close() { int ret = ::close(fd_); fd_ = -1; }$/;"	f	class:tigerso::File
close	net/Socket.cpp	/^int Socket::close() {$/;"	f	class:tigerso::Socket
close	ssl/SSLContext.cpp	/^int SSLContext::close() {$/;"	f	class:tigerso::SSLContext
close	test/SSLContex.h	/^    int close() {$/;"	f	class:HttpsContext
close	test/https_lib/SSLContext.cpp	/^    int close() {$/;"	f	class:SSLContext::HttpsContext
closeFile	http/HttpBodyFile.cpp	/^int HttpBodyFile::closeFile() {$/;"	f	class:tigerso::HttpBodyFile
closeProxy	test/test_http.cpp	/^    void closeProxy() {$/;"	f	class:ProxyConnection
closeProxyConnection	http/HttpProxy.cpp	/^void HttpProxyConnection::closeProxyConnection() {$/;"	f	class:tigerso::HttpProxyConnection
closeProxyConnection	test/backup/http_proxy.cpp	/^    void closeProxyConnection() {$/;"	f	class:HttpProxyConnection
cnt	test/HttpFile/client.py	/^                cnt = cnt + 1$/;"	v
cnt	test/HttpFile/client.py	/^    cnt = 0;$/;"	v
cnt	test/test_dns.cpp	/^static int cnt = 0;$/;"	v	file:
cond_	core/Condition.h	/^    pthread_cond_t cond_;$/;"	m	class:tigerso::Condition
config	test/HttpsServer.cpp	/^void config() {$/;"	f
configMap	core/ConfigParser.h	/^	std::map<std::string, std::map<std::string, std::string> > configMap;$/;"	m	class:tigerso::ConfigParser
configure_context	test/https_client.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	test/https_lib/https_client.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	test/https_lib/https_server.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
configure_context	test/https_server.cpp	/^void configure_context(SSL_CTX *ctx)$/;"	f
connect	ssl/SSLContext.cpp	/^int SSLContext::connect() {$/;"	f	class:tigerso::SSLContext
connect	test/HttpFile/client.py	/^    def connect(self):$/;"	m	class:client
connect	test/SSLContex.h	/^    int connect() {$/;"	f	class:HttpsContext
connect	test/https_lib/SSLContext.cpp	/^    int connect() {$/;"	f	class:SSLContext::HttpsContext
connections_	http/HttpProxy.h	/^    std::map<IDTYPE, HTTPPROXYCONNECTIONPTR> connections_; $/;"	m	class:tigerso::HttpProxyLoop
connections_	test/backup/http_proxy.cpp	/^    std::map<IDTYPE, HTTPPROXYCONNECTIONPTR> connections_; $/;"	m	class:HttpProxyLoop	file:
contains	net/Upstream.h	/^    UpstreamNode* contains(const char* ip, unsigned int port) {$/;"	f	class:tigerso::Upstream
containsInCurrentTimeNode	net/TimeWheelEvent.cpp	/^bool TimeWheelEvent::containsInCurrentTimeNode(Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
containsInCurrentTimeNode	test/TimedEvent.h	/^    bool containsInCurrentTimeNode(Channel* cnptr) {$/;"	f	class:TimedEvent
content_	core/FileLock.h	/^    std::string content_;$/;"	m	class:tigerso::FileLock
content_encoding	http/HttpBodyFile.h	/^    char content_encoding[1024] = {0};$/;"	m	class:tigerso::HttpBodyFile
content_encoding	test/HttpFile/HttpBodyFile.h	/^    char content_encoding[1024];$/;"	m	class:HttpBodyFile
content_length	http/lib/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser
content_type	http/HttpBodyFile.h	/^    char content_type [1024] = {0};$/;"	m	class:tigerso::HttpBodyFile
content_type	test/HttpFile/HttpBodyFile.h	/^    char content_type [1024];$/;"	m	class:HttpBodyFile
content_type	test/sendfile/HttpBodyFile.h	/^    char content_type [1024];$/;"	m	class:HttpBodyFile
continuousReadOut	core/File.cpp	/^ssize_t File::continuousReadOut(char* buf, size_t len) {$/;"	f	class:tigerso::File
cookie_	util/FileTypeDetector.h	/^    magic_t cookie_ = NULL;$/;"	m	class:tigerso::FileTypeDetector
cookie_	util/FileTypes/FileTypeDetector.h	/^    magic_t cookie_ = NULL;$/;"	m	class:tigerso::util::FileTypeDetector
core	core/tigerso.h	/^namespace core {$/;"	n	namespace:tigerso
count	test/test_mutex.cpp	/^    int count;$/;"	m	struct:share_count	file:
countHttpConnections	http/HttpProxy.cpp	/^int HttpProxyLoop::countHttpConnections() {$/;"	f	class:tigerso::HttpProxyLoop
countHttpConnections	test/backup/http_proxy.cpp	/^    int countHttpConnections() {$/;"	f	class:HttpProxyLoop
cparser_	http/HttpProxy.h	/^    HttpParser cparser_;$/;"	m	class:tigerso::HttpProxyConnection
cparser_	test/backup/http_proxy.cpp	/^    HttpParser cparser_;$/;"	m	class:HttpProxyConnection	file:
createEpollBase	net/EventsLoop.cpp	/^int EventsLoop::createEpollBase() {$/;"	f	class:tigerso::EventsLoop
createQuery	test/test_ares.cpp	/^    int createQuery(const char* host, unsigned char* buf, size_t len) {$/;"	f	class:AsyncDNSResolver	file:
create_context	test/https_client.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	test/https_lib/https_client.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	test/https_lib/https_server.cpp	/^SSL_CTX *create_context()$/;"	f
create_context	test/https_server.cpp	/^SSL_CTX *create_context()$/;"	f
create_process_shared_memory	core/SysUtil.cpp	/^void* SysUtil::create_process_shared_memory(const string& shm_name, size_t len)$/;"	f	class:tigerso::SysUtil
create_socket	test/HttpsServer.cpp	/^int create_socket(int port)$/;"	f
create_socket	test/https_client.cpp	/^int create_socket(Socket& server, const char* host)$/;"	f
create_socket	test/https_lib/https_client.cpp	/^int create_socket(Socket& server, const char* host)$/;"	f
create_socket	test/https_lib/https_server.cpp	/^int create_socket(int port)$/;"	f
create_socket	test/https_server.cpp	/^int create_socket(int port)$/;"	f
csockptr	http/HttpProxy.h	/^    const SocketPtr csockptr;$/;"	m	class:tigerso::HttpProxyConnection
csockptr	test/backup/http_proxy.cpp	/^    const SOCKETPTR csockptr;$/;"	m	class:HttpProxyConnection	file:
ctlChannel	net/EventsLoop.cpp	/^int EventsLoop::ctlChannel(Channel* cnptr, const int op) {$/;"	f	class:tigerso::EventsLoop
ctransaction_	http/HttpProxy.h	/^    HttpTransaction ctransaction_;$/;"	m	class:tigerso::HttpProxyConnection
ctransaction_	test/backup/http_proxy.cpp	/^    HttpTransaction ctransaction_;$/;"	m	class:HttpProxyConnection	file:
cur_	core/File.h	/^    off_t cur_;$/;"	m	class:tigerso::File
cur_	test/File.h	/^    off_t cur_;$/;"	m	class:File
cur_	test/HttpFile/File.h	/^    off_t cur_;$/;"	m	class:File
cur_	test/sendfile/File.h	/^    off_t cur_;$/;"	m	class:File
data	http/lib/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser
dbgLog	core/Logging.cpp	/^int Logging::dbgLog(const char* fmt, ...)$/;"	f	class:tigerso::Logging
dec2hex	core/Dechex.cpp	/^const char* dec2hex(unsigned int num) {$/;"	f	namespace:tigerso
dec2hex	test/inter2hex.c	/^const char* dec2hex(unsigned int num) {$/;"	f
decideLineType	core/ConfigParser.cpp	/^int ConfigParser::decideLineType(const std::string& line, std::string& content)$/;"	f	class:tigerso::ConfigParser
defaultResponse403Body	http/HttpMessage.cpp	/^static const std::string defaultResponse403Body = "<html><head><title>TIGERSO NOTIFICATION<\/title><\/head><body><p>You Are Forbidden To Access This Website!<\/p><\/body><\/html>";$/;"	m	namespace:tigerso	file:
defaultResponse503Body	http/HttpMessage.cpp	/^static const std::string defaultResponse503Body = "<html><head><title>TIGERSO NOTIFICATION<\/title><\/head><body><p> Service Unavailable!<\/p><\/body><\/html>";$/;"	m	namespace:tigerso	file:
defaultResponse504Body	http/HttpMessage.cpp	/^static const std::string defaultResponse504Body = "<html><head><title>TIGERSO NOTIFICATION<\/title><\/head><body><p>Gateway Timeout! Please Inspect Your Gateway.<\/p><\/body><\/html>";$/;"	m	namespace:tigerso	file:
defaultResponseDNSErrorBody	http/HttpMessage.cpp	/^static const std::string defaultResponseDNSErrorBody = "<html><head><title>TIGERSO NOTIFICATION<\/title><\/head><body><p>Gateway Timeout! Please Inspect Your Gateway.<\/p><\/body><\/html>";$/;"	m	namespace:tigerso	file:
deleteChannel	test/TimedEvent.h	/^    int deleteChannel(Channel* cnptr) {$/;"	f	class:TimedEvent
deleteChannelFromTimeNode	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::deleteChannelFromTimeNode(TimeNode* node, Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
deleteChannelFromTimeNode	test/TimedEvent.h	/^    int deleteChannelFromTimeNode(TimeNode* node, Channel* cnptr) {$/;"	f	class:TimedEvent
deleteConnection	test/http_server.cpp	/^    int deleteConnection(HTTPCONNECTIONPTR& hcptr) {$/;"	f	class:HttpServer	file:
deleteProxyConnection	test/test_http.cpp	/^bool deleteProxyConnection(SocketPtr& clientptr) {$/;"	f
deleteself	test/backup/deleteself.cc	/^   int  deleteself() {$/;"	f	class:mytest
desc_	http/HttpMessage.h	/^    std::string desc_;$/;"	m	class:tigerso::HttpResponse
description	http/lib/http_parser.c	/^  const char *description;$/;"	m	struct:__anon2	file:
destory	net/TimeWheelEvent.cpp	/^void TimeWheelEvent::destory() {$/;"	f	class:tigerso::TimeWheelEvent
destory	net/Upstream.h	/^    void destory() {$/;"	f	class:tigerso::Upstream
destory	test/TimedEvent.h	/^    void destory() {$/;"	f	class:TimedEvent
destory	test/https_lib/Https.h	/^    void destory() {$/;"	f	class:SSLContextFactory
destoryHttpProxyPool	test/backup/http_proxy.cpp	/^int destoryHttpProxyPool() {$/;"	f
destoryProxy	test/http_proxy.cpp	/^int destoryProxy() {$/;"	f
destroy	core/FileLock.cpp	/^int FileLock::destroy() {$/;"	f	class:tigerso::FileLock
destroy	core/SysUtil.cpp	/^int SharedMemory::destroy() {$/;"	f	class:tigerso::SharedMemory
destroy	core/SysUtil.cpp	/^int ShmMutex::destroy()$/;"	f	class:tigerso::ShmMutex
destroy	core/ThreadMutex.h	/^    int destroy() {$/;"	f	class:tigerso::ThreadMutex
destroy_process_shared_memory	core/SysUtil.cpp	/^int SysUtil::destroy_process_shared_memory(const string& shm_name, void* ptr, size_t len)$/;"	f	class:tigerso::SysUtil
detectBuffer	util/FileTypeDetector.h	/^    const char* detectBuffer(const char* buffer, size_t len) {$/;"	f	class:tigerso::FileTypeDetector
detectBuffer	util/FileTypes/FileTypeDetector.h	/^    const char* detectBuffer(const char* buffer, size_t len) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFd	util/FileTypeDetector.h	/^    const char* detectFd(const int fd) {$/;"	f	class:tigerso::FileTypeDetector
detectFd	util/FileTypes/FileTypeDetector.h	/^    const char* detectFd(const int fd) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFile	util/FileTypeDetector.h	/^    const char* detectFile(const char* filename) {$/;"	f	class:tigerso::FileTypeDetector
detectFile	util/FileTypeDetector.h	/^    const char* detectFile(const std::string& file) { return detectFile(file.c_str()); }$/;"	f	class:tigerso::FileTypeDetector
detectFile	util/FileTypes/FileTypeDetector.h	/^    const char* detectFile(const char* filename) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFile	util/FileTypes/FileTypeDetector.h	/^    const char* detectFile(const std::string& file) { return detectFile(file.c_str()); }$/;"	f	class:tigerso::util::FileTypeDetector
dhs_name	dns/DNSResolver.h	/^    unsigned char* dhs_name;$/;"	m	struct:tigerso::DNSAnswer
disableAllEvent	net/Channel.cpp	/^bool Channel::disableAllEvent() {$/;"	f	class:tigerso::Channel
disableEvent	net/Socket.cpp	/^bool Socket::disableEvent(unsigned short flags) {$/;"	f	class:tigerso::Socket
disableReadEvent	net/Channel.cpp	/^bool Channel::disableReadEvent() {$/;"	f	class:tigerso::Channel
disableWriteEvent	net/Channel.cpp	/^bool Channel::disableWriteEvent() {$/;"	f	class:tigerso::Channel
discardIDs_	http/HttpProxy.h	/^    std::set<IDTYPE> discardIDs_;$/;"	m	class:tigerso::HttpProxyLoop
discardIDs_	test/backup/http_proxy.cpp	/^    std::set<IDTYPE> discardIDs_;$/;"	m	class:HttpProxyLoop	file:
discardThisHttpProxyConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::discardThisHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:tigerso::HttpProxyLoop
discardThisHttpProxyConnection	test/backup/http_proxy.cpp	/^     int discardThisHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:HttpProxyLoop
dns_class	dns/DNSResolver.h	/^    unsigned short dns_class;$/;"	m	struct:tigerso::DNSAnswer
dns_class	dns/DNSResolver.h	/^    unsigned short dns_class;$/;"	m	struct:tigerso::DNSQuery
dns_data	dns/DNSResolver.h	/^    char* dns_data;$/;"	m	struct:tigerso::DNSAnswer
dns_name	dns/DNSResolver.h	/^    unsigned char* dns_name;$/;"	m	struct:tigerso::DNSQuery
dns_ttl	dns/DNSResolver.h	/^    unsigned short dns_ttl;$/;"	m	struct:tigerso::DNSAnswer
dns_type	dns/DNSResolver.h	/^    unsigned short dns_type;$/;"	m	struct:tigerso::DNSAnswer
dns_type	dns/DNSResolver.h	/^    unsigned short dns_type;$/;"	m	struct:tigerso::DNSQuery
dsockptr	http/HttpProxy.h	/^    const SocketPtr dsockptr;$/;"	m	class:tigerso::HttpProxyConnection
dsockptr	test/backup/http_proxy.cpp	/^    const SOCKETPTR dsockptr;$/;"	m	class:HttpProxyConnection	file:
edgeFlag	net/Channel.h	/^        bool edgeFlag;$/;"	m	struct:tigerso::Channel::__anon4
eloop	test/test_http.cpp	/^EventsLoop eloop;$/;"	v
eloop_	http/HttpProxy.h	/^    EventsLoop eloop_;$/;"	m	class:tigerso::HttpProxyLoop
eloop_	test/backup/http_proxy.cpp	/^    EventsLoop eloop_;$/;"	m	class:HttpProxyLoop	file:
elooptr_	http/HttpProxy.h	/^    EventsLoop* elooptr_ = nullptr;$/;"	m	class:tigerso::HttpProxyConnection
elooptr_	test/backup/http_proxy.cpp	/^    EventsLoop* elooptr_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
empty	net/Upstream.h	/^    int empty() { return nullptr == _root; }$/;"	f	class:tigerso::Upstream
empty	test/HttpFile/client.py	/^    empty = False;$/;"	v
enableEvent	net/Socket.cpp	/^bool Socket::enableEvent(unsigned short flags) {$/;"	f	class:tigerso::Socket
enableReadEvent	net/Channel.cpp	/^bool Channel::enableReadEvent() {$/;"	f	class:tigerso::Channel
enableWriteEvent	net/Channel.cpp	/^bool Channel::enableWriteEvent() {$/;"	f	class:tigerso::Channel
endFile	test/HttpFile/HttpBodyFile.h	/^    void endFile() {$/;"	f	class:HttpBodyFile
endFile	test/sendfile/HttpBodyFile.h	/^    void endFile() {$/;"	f	class:HttpBodyFile
endFmt	core/Logging.h	/^	const std::string endFmt;$/;"	m	class:tigerso::Logging
epevents_	net/EventsLoop.h	/^    epoll_event epevents_[MAX_CHANNEL_NUM];$/;"	m	class:tigerso::EventsLoop
epfd_	net/EventsLoop.h	/^    int epfd_ = -1;$/;"	m	class:tigerso::EventsLoop
eraseChannel	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::eraseChannel(Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
eraseHttpProxyConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::eraseHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:tigerso::HttpProxyLoop
eraseHttpProxyConnection	test/backup/http_proxy.cpp	/^    int eraseHttpProxyConnection(HttpProxyConnection& hpl) {$/;"	f	class:HttpProxyLoop	file:
erase_func_	http/HttpProxy.h	/^    LOOP_CALLBACK erase_func_ = nullptr;$/;"	m	class:tigerso::HttpProxyConnection
erase_func_	test/backup/http_proxy.cpp	/^    LOOP_CALLBACK erase_func_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
errorCallback	test/test_http.cpp	/^int errorCallback(SocketPtr& sockptr) {$/;"	f
errorHandle	dns/DNSResolver.cpp	/^int DNSResolver::errorHandle(Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
error_cb	net/Channel.h	/^    EventFunc error_cb = nullptr;$/;"	m	class:tigerso::Channel
events	net/Channel.h	/^    } events;$/;"	m	class:tigerso::Channel	typeref:struct:tigerso::Channel::__anon4
evf_t	net/Channel.h	/^typedef unsigned int evf_t;$/;"	t	namespace:tigerso
exist	net/Socket.cpp	/^bool Socket::exist() const {$/;"	f	class:tigerso::Socket
expriedAt_	dns/DNSCache.h	/^    time_t expriedAt_ = 0;$/;"	m	struct:tigerso::DNSNode
ext_list	util/FileTypeDetector.h	/^    const char* ext_list;$/;"	m	struct:tigerso::ScanFileType
ext_list	util/FileTypes/FileTypeDetector.h	/^    const char* ext_list;$/;"	m	struct:tigerso::util::ScanFileType
fd_	core/File.h	/^    int fd_;$/;"	m	class:tigerso::File
fd_	core/FileLock.h	/^    int fd_;$/;"	m	class:tigerso::FileLock
fd_	test/File.h	/^    int fd_;$/;"	m	class:File
fd_	test/HttpFile/File.h	/^    int fd_;$/;"	m	class:File
fd_	test/sendfile/File.h	/^    int fd_;$/;"	m	class:File
fetch	net/Upstream.h	/^    int fetch(const char* ip, unsigned int& port) {$/;"	f	class:tigerso::Upstream
fetchUrl	ssl/scripts/ca_converter.py	/^def fetchUrl(url):$/;"	f
field_data	http/lib/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon1
field_set	http/lib/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url
file	test/HttpFile/client.py	/^    file = open(filename, 'w')$/;"	v
filename	core/ConfigParser.h	/^	std::string filename;$/;"	m	class:tigerso::ConfigParser
filename	test/HttpFile/HttpBodyFile.h	/^    char filename[1024];$/;"	m	class:HttpBodyFile
filename	test/HttpFile/client.py	/^    filename = sys.argv[2]$/;"	v
filename	test/sendfile/HttpBodyFile.h	/^    char filename[1024];$/;"	m	class:HttpBodyFile
filename_	core/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH] = {0};$/;"	m	class:tigerso::File
filename_	core/FileLock.h	/^    std::string filename_;$/;"	m	class:tigerso::FileLock
filename_	test/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH];$/;"	m	class:File
filename_	test/HttpFile/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH] = {0};$/;"	m	class:File
filename_	test/sendfile/File.h	/^    char filename_[FILE_NAME_MAX_LENGTH];$/;"	m	class:File
filter	test/http_server.cpp	/^    int filter(HttpRequest& request) {$/;"	f	class:HttpConnection
finalize	http/HttpProxy.cpp	/^void HttpProxyConnection::finalize() {$/;"	f	class:tigerso::HttpProxyConnection
finalize	test/backup/http_proxy.cpp	/^    void finalize() {$/;"	f	class:HttpProxyConnection	file:
flags	dns/DNSResolver.h	/^    unsigned short flags;$/;"	m	struct:tigerso::DNSHeader
flags	http/lib/http_parser.h	/^  unsigned int flags : 8;        \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser
flags	http/lib/http_parser.h	/^enum flags$/;"	g
flushFile	http/HttpBodyFile.cpp	/^void HttpBodyFile::flushFile() {$/;"	f	class:tigerso::HttpBodyFile
forceCloseProxyConnection	http/HttpProxy.cpp	/^void HttpProxyConnection::forceCloseProxyConnection() {$/;"	f	class:tigerso::HttpProxyConnection
forceCloseProxyConnection	test/backup/http_proxy.cpp	/^    void forceCloseProxyConnection() {$/;"	f	class:HttpProxyConnection
func_	core/Thread.cpp	/^    ThreadFunc func_;$/;"	m	class:tigerso::ThreadData	file:
func_	core/Thread.h	/^    ThreadFunc func_;$/;"	m	class:tigerso::Thread
g_DNSCachePtr	dns/DNSResolver.cpp	/^DNSCache* DNSResolver::g_DNSCachePtr = DNSCache::getInstance(); $/;"	m	class:tigerso::DNSResolver	file:
g_DNSCachePtr	dns/DNSResolver.h	/^    static DNSCache* g_DNSCachePtr; $/;"	m	class:tigerso::DNSResolver
g_client_ssl_ctx	ssl/SSLContext.cpp	/^static SSL_CTX* g_client_ssl_ctx = NULL;$/;"	m	namespace:tigerso::_OPENSSL_	file:
g_client_ssl_ctx	test/SSLContex.h	/^    static SSL_CTX* g_client_ssl_ctx = NULL;$/;"	m	namespace:SSLContext
g_client_ssl_ctx	test/https_lib/SSLContext.cpp	/^    static SSL_CTX* g_client_ssl_ctx = NULL;$/;"	m	namespace:SSLContext	file:
g_config	ssl/SSLContext.cpp	/^ConfigParser* g_config = ConfigParser::getInstance(); $/;"	m	namespace:tigerso::_OPENSSL_	file:
g_config	test/HttpsServer.cpp	/^static ConfigParser* g_config = ConfigParser::getInstance();$/;"	v	file:
g_config	test/SSLContex.h	/^    ConfigParser* g_config = ConfigParser::getInstance(); $/;"	m	namespace:SSLContext
g_config	test/https_lib/SSLContext.cpp	/^    ConfigParser* g_config = ConfigParser::getInstance(); $/;"	m	namespace:SSLContext	file:
g_configini	test/http_proxy.cpp	/^tigerso::ConfigParser* g_configini = nullptr;$/;"	v
g_httpproxy	test/http_proxy.cpp	/^tigerso::HttpProxyLoop* g_httpproxy = nullptr;$/;"	v
g_httpproxypoolptr	test/backup/http_proxy.cpp	/^HttpProxyLoop* g_httpproxypoolptr = nullptr;$/;"	v
g_log	test/HttpsServer.cpp	/^static Logging* g_log = Logging::getInstance();$/;"	v	file:
g_logging	test/http_proxy.cpp	/^tigerso::Logging* g_logging = nullptr;$/;"	v
g_server_cert_verify_cb	ssl/SSLContext.cpp	/^static ServerCertVerifyCallback g_server_cert_verify_cb = NULL;$/;"	m	namespace:tigerso::_OPENSSL_	file:
g_server_cert_verify_cb	test/SSLContex.h	/^    static serverCertVerifyCallback g_server_cert_verify_cb = NULL;$/;"	m	namespace:SSLContext
g_server_cert_verify_cb	test/https_lib/SSLContext.cpp	/^    static serverCertVerifyCallback g_server_cert_verify_cb = NULL;$/;"	m	namespace:SSLContext	file:
g_server_ssl_ctx	ssl/SSLContext.cpp	/^static SSL_CTX* g_server_ssl_ctx = NULL;$/;"	m	namespace:tigerso::_OPENSSL_	file:
g_server_ssl_ctx	test/SSLContex.h	/^    static SSL_CTX* g_server_ssl_ctx = NULL;$/;"	m	namespace:SSLContext
g_server_ssl_ctx	test/https_lib/SSLContext.cpp	/^    static SSL_CTX* g_server_ssl_ctx = NULL;$/;"	m	namespace:SSLContext	file:
gain_gap	net/Buffer.h	/^    static const size_t gain_gap = BUFFER_GAP_LENGTH;$/;"	m	class:tigerso::Buffer
genRSA	ssl/SSLHelper.cpp	/^static RSA* genRSA(int key_length) {$/;"	f	namespace:tigerso
genSerialNumber	ssl/SSLHelper.cpp	/^static bool genSerialNumber(char* issuer, char* commonName, char* serial, char* newSerial, int len) {$/;"	f	namespace:tigerso
getAllKey	core/ConfigParser.cpp	/^void ConfigParser::getAllKey()$/;"	f	class:tigerso::ConfigParser
getAnswer	dns/DNSResolver.cpp	/^int DNSResolver::getAnswer(std::string& name, time_t& ttl) {$/;"	f	class:tigerso::DNSResolver
getBody	http/HttpMessage.h	/^    virtual HttpBodyFile* getBody() { return &body_; }$/;"	f	class:tigerso::HttpMessage
getBodyFileName	http/HttpMessage.h	/^    std::string& getBodyFileName() {$/;"	f	class:tigerso::HttpRequest
getBodyFileName	http/HttpMessage.h	/^    virtual std::string& getBodyFileName() { return bodyname_; }$/;"	f	class:tigerso::HttpMessage
getClientSSLCTX	ssl/SSLContext.cpp	/^   SSL_CTX* getClientSSLCTX() {$/;"	f	namespace:tigerso::_OPENSSL_
getClientSSLCTX	test/SSLContex.h	/^    SSL_CTX* getClientSSLCTX() {$/;"	f	namespace:SSLContext
getClientSSLCTX	test/https_lib/SSLContext.cpp	/^    SSL_CTX* getClientSSLCTX() {$/;"	f	namespace:SSLContext
getClientSocketPtr	test/test_http.cpp	/^SocketPtr getClientSocketPtr(SocketPtr& serverptr) {$/;"	f
getContentLength	http/HttpMessage.h	/^    virtual int getContentLength() {$/;"	f	class:tigerso::HttpMessage
getDesc	http/HttpMessage.h	/^    std::string getDesc() { return desc_; }$/;"	f	class:tigerso::HttpResponse
getDesc	http/HttpMessage.h	/^    virtual std::string getDesc(){ return ""; };$/;"	f	class:tigerso::HttpMessage
getEpollBase	net/EventsLoop.cpp	/^int EventsLoop::getEpollBase() const {$/;"	f	class:tigerso::EventsLoop
getFileLength	test/HttpFile/sendcontent.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileLength	test/HttpFile/sendfile.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileLength	test/sendfile/sendfile.cc	/^ssize_t getFileLength(int fd) {$/;"	f
getFileSize	core/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:tigerso::File
getFileSize	test/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getFileSize	test/HttpFile/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getFileSize	test/sendfile/File.cpp	/^ssize_t File::getFileSize() {$/;"	f	class:File
getFormatTime	core/SysUtil.cpp	/^string SysUtil::getFormatTime(const string& fmt){$/;"	f	class:tigerso::SysUtil
getHashkey	dns/DNSCache.cpp	/^hashkey_t DNSCache::getHashkey(const std::string& host, unsigned char* pkey, size_t len) {$/;"	f	class:tigerso::DNSCache
getHeader	http/HttpMessage.h	/^    std::string& getHeader() { $/;"	f	class:tigerso::HttpResponse
getHeader	http/HttpMessage.h	/^    std::string& getHeader() {$/;"	f	class:tigerso::HttpRequest
getHeader	http/HttpMessage.h	/^    virtual std::string& getHeader() { return headstr_; }$/;"	f	class:tigerso::HttpMessage
getHost	http/HttpMessage.h	/^    std::string getHost() {$/;"	f	class:tigerso::HttpRequest
getHostPort	http/HttpMessage.h	/^    std::string getHostPort() {$/;"	f	class:tigerso::HttpRequest
getID	http/HttpProxy.cpp	/^const IDTYPE& HttpProxyConnection::getID() { return ID_; }$/;"	f	class:tigerso::HttpProxyConnection
getID	test/backup/http_proxy.cpp	/^    const IDTYPE& getID() { return ID_; }$/;"	f	class:HttpProxyConnection
getID	test/test_bind.cpp	/^    int& getID() {return id;}$/;"	f	class:nocopy
getIPPort	test/HttpFile/client.py	/^def getIPPort(param):$/;"	f
getInBufferPtr	net/Socket.h	/^    std::shared_ptr<Buffer> getInBufferPtr() const { return bufPtr_.in_.lock(); }$/;"	f	class:tigerso::Socket
getInstance	core/ConfigParser.cpp	/^ConfigParser* ConfigParser::getInstance()$/;"	f	class:tigerso::ConfigParser
getInstance	core/Logging.cpp	/^Logging* Logging::getInstance()$/;"	f	class:tigerso::Logging
getInstance	dns/DNSCache.cpp	/^DNSCache* DNSCache::getInstance() {$/;"	f	class:tigerso::DNSCache
getKey	test/test_http.cpp	/^    int getKey() { return sockfd_; }$/;"	f	class:ProxyConnection
getLastParsedSize	http/HttpParser.h	/^    size_t getLastParsedSize() { return parsedn_; }$/;"	f	class:tigerso::HttpParser
getLicense	ssl/scripts/ca_converter.py	/^def getLicense(lines, num):$/;"	f
getLogFile	core/Logging.cpp	/^std::string Logging::getLogFile() const$/;"	f	class:tigerso::Logging
getMethod	http/HttpMessage.h	/^    std::string getMethod() { return method_; }$/;"	f	class:tigerso::HttpRequest
getMethod	http/HttpMessage.h	/^    virtual std::string getMethod(){ return ""; };$/;"	f	class:tigerso::HttpMessage
getNextHashkey	dns/DNSCache.cpp	/^hashkey_t DNSCache::getNextHashkey(const unsigned char* pkey, const size_t len, const offset_t cnt) {$/;"	f	class:tigerso::DNSCache
getOutBufferPtr	net/Socket.h	/^    std::shared_ptr<Buffer> getOutBufferPtr() const { return bufPtr_.out_.lock(); }$/;"	f	class:tigerso::Socket
getParseState	http/HttpParser.h	/^    inline PARSE_STATE getParseState() { return state_; }$/;"	f	class:tigerso::HttpParser
getProxyConnection	test/test_http.cpp	/^ProxyConnection& getProxyConnection(SocketPtr& clientptr) {$/;"	f
getReadIdx	net/Buffer.cpp	/^size_t Buffer::getReadIdx() const {$/;"	f	class:tigerso::Buffer
getReadPtr	net/Buffer.cpp	/^const char* Buffer::getReadPtr() const {$/;"	f	class:tigerso::Buffer
getReadableBytes	net/Buffer.cpp	/^ssize_t Buffer::getReadableBytes() const {$/;"	f	class:tigerso::Buffer
getResponseStatusDesc	http/HttpMessage.cpp	/^std::string HttpHelper::getResponseStatusDesc(const int code) {$/;"	f	class:tigerso::HttpHelper
getRole	http/HttpMessage.h	/^    virtual http_role_t getRole() { return role_; }$/;"	f	class:tigerso::HttpMessage
getRole	net/Socket.cpp	/^socket_role_t Socket::getRole() const {$/;"	f	class:tigerso::Socket
getServerSSLCTX	ssl/SSLContext.cpp	/^    SSL_CTX* getServerSSLCTX() {$/;"	f	namespace:tigerso::_OPENSSL_
getServerSSLCTX	test/SSLContex.h	/^    SSL_CTX* getServerSSLCTX() {$/;"	f	namespace:SSLContext
getServerSSLCTX	test/https_lib/SSLContext.cpp	/^    SSL_CTX* getServerSSLCTX() {$/;"	f	namespace:SSLContext
getServerSocketPtr	test/test_http.cpp	/^SocketPtr getServerSocketPtr(SocketPtr& clientptr) {$/;"	f
getShmPtr	dns/DNSCache.cpp	/^DNSCacheData* DNSCache::getShmPtr() {$/;"	f	class:tigerso::DNSCache
getSockAddr	net/Socket.cpp	/^int Socket::getSockAddr(sockaddr_in& inaddr) {$/;"	f	class:tigerso::Socket
getSocket	net/Socket.cpp	/^socket_t Socket::getSocket() const {$/;"	f	class:tigerso::Socket
getSocketPtr	net/Channel.cpp	/^Socket* Channel::getSocketPtr() const {$/;"	f	class:tigerso::Channel
getStage	net/Socket.cpp	/^socket_stage_t Socket::getStage() const {$/;"	f	class:tigerso::Socket
getStatuscode	http/HttpMessage.h	/^    int         getStatuscode() { return statuscode_; }$/;"	f	class:tigerso::HttpResponse
getStatuscode	http/HttpMessage.h	/^    virtual int         getStatuscode(){ return 0; };$/;"	f	class:tigerso::HttpMessage
getStickDNSNode	dns/DNSCache.cpp	/^int DNSCache::getStickDNSNode(const std::string& host, std::string& ip) {$/;"	f	class:tigerso::DNSCache
getStrAddr	net/Socket.cpp	/^std::string Socket::getStrAddr() const {$/;"	f	class:tigerso::Socket
getStrErr	http/HttpParser.h	/^    const char* getStrErr() { return http_errno_description(HTTP_PARSER_ERRNO(&parser_)); }$/;"	f	class:tigerso::HttpParser
getStrPort	net/Socket.cpp	/^std::string Socket::getStrPort() const {$/;"	f	class:tigerso::Socket
getThreadMutex	core/ThreadMutex.h	/^    pthread_mutex_t* getThreadMutex() {$/;"	f	class:tigerso::ThreadMutex
getTime	core/Logging.cpp	/^std::string Logging::getTime()$/;"	f	class:tigerso::Logging
getTimeoutCallback	net/Channel.cpp	/^EventFunc Channel::getTimeoutCallback() {$/;"	f	class:tigerso::Channel
getUid	test/http_server.cpp	/^    UUID_T getUid() { return _uuid; }$/;"	f	class:HttpConnection
getUrl	http/HttpMessage.h	/^    std::string getUrl() { return url_; }$/;"	f	class:tigerso::HttpRequest
getUrl	http/HttpMessage.h	/^    virtual std::string getUrl(){ return ""; };$/;"	f	class:tigerso::HttpMessage
getValueByHeader	http/HttpMessage.h	/^    virtual std::string getValueByHeader(const std::string& header) {$/;"	f	class:tigerso::HttpMessage
getValueByKey	core/ConfigParser.cpp	/^std::string ConfigParser::getValueByKey(const std::string& section, const std::string& key)$/;"	f	class:tigerso::ConfigParser
getVersion	http/HttpMessage.h	/^    virtual std::string getVersion() { return version_; };$/;"	f	class:tigerso::HttpMessage
getWriteIdx	net/Buffer.cpp	/^size_t Buffer::getWriteIdx() const {$/;"	f	class:tigerso::Buffer
get_shm_mutex	core/SysUtil.cpp	/^shm_mutex_t* ShmMutex::get_shm_mutex() const$/;"	f	class:tigerso::ShmMutex
get_shm_name	core/SysUtil.cpp	/^string ShmMutex::get_shm_name() const$/;"	f	class:tigerso::ShmMutex
get_shm_ptr	core/SysUtil.cpp	/^void* SharedMemory::get_shm_ptr() const {$/;"	f	class:tigerso::SharedMemory
get_work_path	core/SysUtil.cpp	/^string SysUtil::get_work_path()$/;"	f	class:tigerso::SysUtil
group	util/FileTypeDetector.h	/^    const char* group;$/;"	m	struct:tigerso::ScanFileType
group	util/FileTypes/FileTypeDetector.h	/^    const char* group;$/;"	m	struct:tigerso::util::ScanFileType
h_C	http/lib/http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	http/lib/http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	http/lib/http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	http/lib/http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	http/lib/http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	http/lib/http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_connection_upgrade	http/lib/http_parser.c	/^  , h_connection_upgrade$/;"	e	enum:header_states	file:
h_content_length	http/lib/http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_general	http/lib/http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	http/lib/http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	http/lib/http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	http/lib/http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_connection_token	http/lib/http_parser.c	/^  , h_matching_connection_token$/;"	e	enum:header_states	file:
h_matching_connection_token_start	http/lib/http_parser.c	/^  , h_matching_connection_token_start$/;"	e	enum:header_states	file:
h_matching_connection_upgrade	http/lib/http_parser.c	/^  , h_matching_connection_upgrade$/;"	e	enum:header_states	file:
h_matching_content_length	http/lib/http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	http/lib/http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	http/lib/http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	http/lib/http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	http/lib/http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	http/lib/http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	http/lib/http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	http/lib/http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
hash_caPEM	ssl/scripts/build_castore.sh	/^hash_caPEM() {$/;"	f
hashkey_t	dns/DNSCache.h	/^typedef unsigned short hashkey_t;$/;"	t	namespace:tigerso
headerCompleted	http/HttpParser.h	/^    bool headerCompleted() {  return (state_ >= PARSE_HEADER_COMPLETE? true : false); }$/;"	f	class:tigerso::HttpParser
header_field	http/HttpMessage.h	/^    std::string header_field;$/;"	m	class:tigerso::HttpMessage
header_state	http/lib/http_parser.h	/^  unsigned int header_state : 7; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser
header_states	http/lib/http_parser.c	/^enum header_states$/;"	g	file:
headers_	http/HttpMessage.h	/^    headers_t headers_;$/;"	m	class:tigerso::HttpMessage
headers_t	http/HttpMessage.h	/^typedef std::vector<std::pair<std::string,std::string>> headers_t;$/;"	t	namespace:tigerso
headstr_	http/HttpMessage.h	/^    std::string headstr_;$/;"	m	class:tigerso::HttpMessage
hex2dec	core/Dechex.cpp	/^unsigned int hex2dec(const char* hex) {$/;"	f	namespace:tigerso
hex2dec	test/inter2hex.c	/^unsigned int hex2dec(const char* hex) {$/;"	f
hexstrbuf	core/Dechex.cpp	/^static char hexstrbuf[9] = {0};$/;"	m	namespace:tigerso	file:
hexstrbuf	test/inter2hex.c	/^static char hexstrbuf[9] = {0};$/;"	v	file:
holder_	core/ThreadMutex.h	/^    pid_t holder_ = 0;$/;"	m	class:tigerso::ThreadMutex
host_	dns/DNSCache.h	/^    char host_[HOST_MAXLENGTH] = {0};$/;"	m	struct:tigerso::DNSNode
host_	http/HttpMessage.h	/^    std::string host_;$/;"	m	class:tigerso::HttpRequest
host_	test/test_http.cpp	/^    string host_;$/;"	m	class:ProxyConnection	file:
httpInspectCallback	http/HttpMessage.h	/^typedef int (*httpInspectCallback)(const std::weak_ptr<HttpMessage>&);$/;"	t	namespace:tigerso
http_body_is_final	http/lib/http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f
http_cb	http/lib/http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t
http_data_cb	http/lib/http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t
http_errno	http/lib/http_parser.h	/^  unsigned int http_errno : 7;$/;"	m	struct:http_parser
http_errno	http/lib/http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	http/lib/http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f
http_errno_name	http/lib/http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f
http_host_state	http/lib/http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	http/lib/http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser
http_message_needs_eof	http/lib/http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f
http_method	http/lib/http_parser.h	/^enum http_method$/;"	g
http_method_str	http/lib/http_parser.c	/^http_method_str (enum http_method m)$/;"	f
http_minor	http/lib/http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser
http_parse_host	http/lib/http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	file:
http_parse_host_char	http/lib/http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	file:
http_parser	http/lib/http_parser.h	/^struct http_parser {$/;"	s
http_parser	http/lib/http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser_execute	http/lib/http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f
http_parser_h	http/lib/http_parser.h	22;"	d
http_parser_init	http/lib/http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f
http_parser_is_chunked	http/lib/http_parser.c	/^http_parser_is_chunked(const struct http_parser *parser) {$/;"	f
http_parser_parse_url	http/lib/http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f
http_parser_pause	http/lib/http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f
http_parser_settings	http/lib/http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	http/lib/http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_settings_init	http/lib/http_parser.c	/^http_parser_settings_init(http_parser_settings *settings)$/;"	f
http_parser_type	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	http/lib/http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	http/lib/http_parser.h	/^enum http_parser_url_fields$/;"	g
http_parser_url_init	http/lib/http_parser.c	/^http_parser_url_init(struct http_parser_url *u) {$/;"	f
http_parser_version	http/lib/http_parser.c	/^http_parser_version(void) {$/;"	f
http_role_t	http/HttpMessage.h	/^typedef int http_role_t;$/;"	t	namespace:tigerso
http_should_keep_alive	http/lib/http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f
http_status	http/lib/http_parser.h	/^enum http_status$/;"	g
http_strerror_tab	http/lib/http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon2	file:
httpproxypool	test/test_http.cpp	/^vector<ProxyConnection> httpproxypool;$/;"	v
hupFlag	net/Channel.h	/^        bool hupFlag;$/;"	m	struct:tigerso::Channel::__anon4
id	dns/DNSResolver.h	/^    unsigned short id;$/;"	m	struct:tigerso::DNSHeader
id	net/TimeWheelEvent.h	/^    int id = 0;$/;"	m	struct:tigerso::TimeWheelEvent::_TimeNode_st
id	test/test_bind.cpp	/^  int id = 0;  $/;"	m	class:nocopy	file:
inBuffer_	net/Socket.h	/^    std::shared_ptr<Buffer> inBuffer_ = std::make_shared<Buffer>();$/;"	m	class:tigerso::Socket
in_	net/Socket.h	/^    std::weak_ptr<Buffer> in_;$/;"	m	struct:tigerso::BufferPtr
inactve	net/Upstream.h	/^    bool inactve(unsigned int loc) {$/;"	f	class:tigerso::Upstream
index	http/lib/http_parser.h	/^  unsigned int index : 7;        \/* index into current matcher *\/$/;"	m	struct:http_parser
info	test/backup/deleteself.cc	/^    int info() { cout << "haha, not see me" << endl;}$/;"	f	class:mytest
infoLog	core/Logging.cpp	/^int Logging::infoLog(const char* fmt, ...)$/;"	f	class:tigerso::Logging
init	core/FileLock.cpp	/^int FileLock::init() {$/;"	f	class:tigerso::FileLock
init	core/SysUtil.cpp	/^int SharedMemory::init() {$/;"	f	class:tigerso::SharedMemory
init	core/SysUtil.cpp	/^int ShmMutex::init()$/;"	f	class:tigerso::ShmMutex
init	core/Thread.cpp	/^ThreadInit init;$/;"	m	namespace:tigerso::initmain__	file:
init	core/ThreadMutex.h	/^    int init() {$/;"	f	class:tigerso::ThreadMutex
init	net/TimeWheelEvent.cpp	/^void TimeWheelEvent::init() {$/;"	f	class:tigerso::TimeWheelEvent
init	ssl/SSLContext.cpp	/^int SSLContext::init(SSLRole role) {$/;"	f	class:tigerso::SSLContext
init	test/SSLContex.h	/^    int init(int role) {$/;"	f	class:HttpsContext
init	test/TimedEvent.h	/^    void init() {$/;"	f	class:TimedEvent
init	test/https_lib/SSLContext.cpp	/^    int init(int role) {$/;"	f	class:SSLContext::HttpsContext
init	util/FileTypeDetector.h	/^    int init(int flags = MAGIC_MIME_TYPE) {$/;"	f	class:tigerso::FileTypeDetector
init	util/FileTypes/FileTypeDetector.h	/^    int init(int flags = MAGIC_MIME_TYPE) {$/;"	f	class:tigerso::util::FileTypeDetector
initHttpProxyPool	test/backup/http_proxy.cpp	/^int initHttpProxyPool(const char* ipaddr, const int port) {$/;"	f
initListenConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::initListenConnection() {$/;"	f	class:tigerso::HttpProxyLoop
initListenConnection	test/backup/http_proxy.cpp	/^    int initListenConnection() {$/;"	f	class:HttpProxyLoop
initParser	http/HttpParser.cpp	/^int HttpParser::initParser(HttpMessage& message) {$/;"	f	class:tigerso::HttpParser
initProxy	test/http_proxy.cpp	/^int initProxy() {$/;"	f
init_openssl	test/HttpsServer.cpp	/^void init_openssl()$/;"	f
init_openssl	test/https_client.cpp	/^void init_openssl()$/;"	f
init_openssl	test/https_lib/https_client.cpp	/^void init_openssl()$/;"	f
init_openssl	test/https_lib/https_server.cpp	/^void init_openssl()$/;"	f
init_openssl	test/https_server.cpp	/^void init_openssl()$/;"	f
initilize	test/https_lib/Https.h	/^    void initilize() {$/;"	f	class:SSLContextFactory
initmain__	core/Thread.cpp	/^namespace initmain__ {$/;"	n	namespace:tigerso	file:
insertHttpProxyConnectionPtr	http/HttpProxy.cpp	/^int HttpProxyLoop::insertHttpProxyConnectionPtr(HTTPPROXYCONNECTIONPTR& hcptr) {$/;"	f	class:tigerso::HttpProxyLoop
insertHttpProxyConnectionPtr	test/backup/http_proxy.cpp	/^    int insertHttpProxyConnectionPtr(HTTPPROXYCONNECTIONPTR& hcptr) {$/;"	f	class:HttpProxyLoop	file:
insertNode	net/Upstream.h	/^    UpstreamNode* insertNode(const char* ip, unsigned int port)  {$/;"	f	class:tigerso::Upstream
int16_t	http/lib/http_parser.h	/^typedef __int16 int16_t;$/;"	t
int32_t	http/lib/http_parser.h	/^typedef __int32 int32_t;$/;"	t
int64_t	http/lib/http_parser.h	/^typedef __int64 int64_t;$/;"	t
int8_t	http/lib/http_parser.h	/^typedef __int8 int8_t;$/;"	t
inter2HexString	http/HttpBodyFile.cpp	/^std::string HttpBodyFile::inter2HexString(int num) {$/;"	f	class:tigerso::HttpBodyFile
inter2HexString	test/HttpFile/HttpBodyFile.h	/^    std::string inter2HexString(int num) {$/;"	f	class:HttpBodyFile
ipaddr_	http/HttpProxy.h	/^    const std::string ipaddr_;$/;"	m	class:tigerso::HttpProxyLoop
ipaddr_	test/backup/http_proxy.cpp	/^    const std::string ipaddr_;$/;"	m	class:HttpProxyLoop	file:
isBigFile	http/HttpParser.h	/^    bool isBigFile() { return bigfile_; }$/;"	f	class:tigerso::HttpParser
isCertTrusted	ssl/scripts/ca_converter.py	/^def isCertTrusted(cert, trusts, explicitTrustOnly, trustServerAuth,$/;"	f
isClientAlive	http/HttpProxy.h	/^    bool isClientAlive() { return _clientSocket.exist(); }$/;"	f	class:tigerso::HttpProxyConnection
isClientAlive	test/backup/http_proxy.cpp	/^    bool isClientAlive() { return _clientSocket.exist(); }$/;"	f	class:HttpProxyConnection	file:
isEmpty	net/RingBuffer.cpp	/^bool RingBuffer::isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:tigerso::RingBuffer
isEmpty	test/HttpFile/RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isEmpty	test/RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isEmpty	test/sendfile/RingBuffer.h	/^    bool isEmpty() { return  (_readptr == _writeptr); }$/;"	f	class:RingBuffer
isFileExisted	core/ConfigParser.h	/^	bool isFileExisted;$/;"	m	class:tigerso::ConfigParser
isFull	core/ThreadPool.h	/^    bool isFull() const {$/;"	f	class:tigerso::ThreadPool
isFull	net/RingBuffer.cpp	/^bool RingBuffer::isFull() { return (space() == 0); }$/;"	f	class:tigerso::RingBuffer
isFull	test/HttpFile/RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isFull	test/RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isFull	test/sendfile/RingBuffer.h	/^    bool isFull() { return (space() == 0); }$/;"	f	class:RingBuffer
isListening	net/Socket.h	/^    bool isListening() { if(exist() && listening) {return true;} return false; }$/;"	f	class:tigerso::Socket
isLocked	core/SysUtil.h	/^    bool isLocked() const {$/;"	f	class:tigerso::LockTryGuard
isLocked	core/SysUtil.h	/^    bool isLocked() { return locked_ ; }$/;"	f	class:tigerso::ShmMutex
isLockedByCurrentThread	core/ThreadMutex.h	/^    bool isLockedByCurrentThread() const {$/;"	f	class:tigerso::ThreadMutex
isMainThread	core/CurrentThread.h	/^   inline bool isMainThread() { return CurrentThread::tid() == getpid(); }$/;"	f	namespace:tigerso::CurrentThread
isNIO	net/Socket.cpp	/^bool Socket::isNIO() const {$/;"	f	class:tigerso::Socket
isNodeUsed	dns/DNSCache.cpp	/^bool DNSCache::isNodeUsed(DNSNode& node) {$/;"	f	class:tigerso::DNSCache
isReadDone	core/File.h	/^    bool isReadDone() { return readdone_; }$/;"	f	class:tigerso::File
isRefreshed	core/ConfigParser.h	/^	bool isRefreshed;$/;"	m	class:tigerso::ConfigParser
isSSL	net/Socket.h	/^    bool isSSL() { return sctx.active(); }$/;"	f	class:tigerso::Socket
isSendDone	net/Buffer.h	/^    bool isSendDone() { $/;"	f	class:tigerso::Buffer
isServerAlive	http/HttpProxy.h	/^    bool isServerAlive() { return _serverSocket.exist(); }$/;"	f	class:tigerso::HttpProxyConnection
isServerAlive	test/backup/http_proxy.cpp	/^    bool isServerAlive() { return _serverSocket.exist(); }$/;"	f	class:HttpProxyConnection	file:
isSkipChannel	net/TimeWheelEvent.cpp	/^bool TimeWheelEvent::isSkipChannel(Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
isVaildResponseStatusCode	http/HttpMessage.cpp	/^bool HttpHelper::isVaildResponseStatusCode(const int code) {$/;"	f	class:tigerso::HttpHelper
join	core/Thread.cpp	/^int Thread::join() {$/;"	f	class:tigerso::Thread
joined_	core/Thread.h	/^    bool joined_ = false;$/;"	m	class:tigerso::Thread
keepFlag	net/Channel.h	/^        bool keepFlag;$/;"	m	struct:tigerso::Channel::__anon4
keepalive_	http/HttpProxy.h	/^    bool keepalive_ = true;$/;"	m	class:tigerso::HttpProxyConnection
keepalive_	test/backup/http_proxy.cpp	/^    bool keepalive_ = true;$/;"	m	class:HttpProxyConnection	file:
key_	dns/DNSCache.h	/^    unsigned char key_[MD5_KEYSIZE] = {0};$/;"	m	struct:tigerso::DNSNode
labelBigFile	http/HttpParser.h	/^    bool labelBigFile() { bigfile_ = true; }$/;"	f	class:tigerso::HttpParser
least_len	net/Buffer.h	/^    static const size_t least_len = BUFFER_LEAST_LENGTH;$/;"	m	class:tigerso::Buffer
len	http/lib/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon1
length_	http/HttpParser.h	/^    size_t length_;$/;"	m	class:tigerso::HttpParser
lenient_http_headers	http/lib/http_parser.h	/^  unsigned int lenient_http_headers : 1;$/;"	m	struct:http_parser
level	core/Logging.h	/^	int level;$/;"	m	class:tigerso::Logging
linkServer	test/test_http.cpp	/^    bool linkServer(SocketPtr& sockptr) {$/;"	f	class:ProxyConnection
linkServerSocketPtr	test/test_http.cpp	/^bool linkServerSocketPtr(SocketPtr& clientptr, SocketPtr& serverptr) {$/;"	f
listenHttpClientConnection	http/HttpProxy.cpp	/^int HttpProxyLoop::listenHttpClientConnection() {$/;"	f	class:tigerso::HttpProxyLoop
listenHttpClientConnection	test/backup/http_proxy.cpp	/^    int listenHttpClientConnection() {$/;"	f	class:HttpProxyLoop	file:
listen_sock	test/test_buffer.cpp	/^McSocket listen_sock;$/;"	v
listenfd	test/HttpFile/sendcontent.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listenfd	test/HttpFile/sendfile.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listenfd	test/sendfile/sendfile.cc	/^int listenfd = socket(AF_INET, SOCK_STREAM, 0);$/;"	v
listening	net/Socket.h	/^    bool listening = false;$/;"	m	class:tigerso::Socket
listeningOnLocal	test/HttpFile/sendcontent.cc	/^int listeningOnLocal() {$/;"	f
listeningOnLocal	test/HttpFile/sendfile.cc	/^int listeningOnLocal() {$/;"	f
listeningOnLocal	test/sendfile/sendfile.cc	/^int listeningOnLocal() {$/;"	f
loadConfig2Map	core/ConfigParser.cpp	/^int ConfigParser::loadConfig2Map()$/;"	f	class:tigerso::ConfigParser
loadPrivateKeyFromFile	ssl/SSLHelper.cpp	/^EVP_PKEY* loadPrivateKeyFromFile(const char* keyfile, const char* passwd) {$/;"	f	namespace:tigerso
loadX509FromFile	ssl/SSLHelper.cpp	/^X509* loadX509FromFile(const char* filename) {$/;"	f	namespace:tigerso
locate	net/Upstream.h	/^    UpstreamNode* locate(unsigned int loc) {$/;"	f	class:tigerso::Upstream
lock	core/FileLock.cpp	/^int FileLock::lock() {$/;"	f	class:tigerso::FileLock
lock	core/SysUtil.cpp	/^int ShmMutex::lock()$/;"	f	class:tigerso::ShmMutex
lock	core/ThreadMutex.h	/^    int lock() {$/;"	f	class:tigerso::ThreadMutex
lock_cmd	core/FileLock.cpp	/^int FileLock::lock_cmd(int cmd) {$/;"	f	class:tigerso::FileLock
locked	core/SysUtil.h	/^    bool locked;$/;"	m	class:tigerso::LockTryGuard
locked_	core/FileLock.h	/^    bool locked_ = false;$/;"	m	class:tigerso::FileLock
locked_	core/SysUtil.h	/^    bool locked_ = false;$/;"	m	class:tigerso::ShmMutex
locked_pid	core/SysUtil.h	/^    pid_t locked_pid;$/;"	m	class:tigerso::ShmMutex
log	test/tmp_dir/csdn.html	/^function log(n){try{console.log(n)}catch(t){}}function OpenWindow(n,t,i,r){var u=(screen.width-t)\/2-r,f=(screen.height-i)\/2-r,e=window.open(n,"_blank","width="+t+",height="+i+",toolbars=0,resizable=1,left="+u+",top="+f);e.focus()}function hide_links(){document.getElementById("mini_nav_more").style.display="none";document.getElementById("mini_nav_more_link_div").className="mini_nav_more_link_hide"}function show_links(){document.getElementById("mini_nav_more").style.display="block";document.getElementById("mini_nav_more_link_div").className="mini_nav_more_link"}function WarpClass(eID,tID,fID,ev){var eObj=document.getElementById(eID),tObj=document.getElementById(tID),fObj=document.getElementById(fID);eObj&&tObj&&(tObj.style.display&&tObj.style.display!="block"?(tObj.style.display="block",eObj.className="UnWarp",ev&&eval(ev),fObj&&(fObj.style.display="block")):(tObj.style.display="none",eObj.className="Warp",fObj&&(fObj.style.display="none")))}function PutInWz(){var n=480,t=360,i=(screen.width-n)\/2,r=(screen.height-t)\/2,u=document,f=document.getElementsByTagName("title")[0].innerHTML;window.open("http:\/\/wz.cnblogs.com\/create?t="+encodeURIComponent(f)+"&u="+encodeURIComponent(u.location.href)+"&c="+encodeURIComponent("")+"&i=0","_blank","width="+n+",height="+t+",toolbars=0,resizable=1,left="+i+",top="+r)}function AddToWz(n){var r=480,u=400,e=(screen.width-r)\/2,o=(screen.height-u)\/2,s=document,t=document.getElementsByTagName("title")[0].innerHTML,f=1,i;try{t=window.btoa(unescape(encodeURIComponent(t)))}catch(h){t=encodeURIComponent(t.replace(\/<\/g,"&lt;").replace(\/>\/g,"&gt;"));f=0}i="http:\/\/wz.cnblogs.com\/create?t="+t+"&u="+encodeURIComponent(s.location.href)+"&c="+encodeURIComponent("")+"&bid="+n+"&i=0";f==1&&(i+="&base64=1");window.open(i,"_blank","width="+r+",height="+u+",toolbars=0,resizable=1,left="+e+",top="+o)}function GetMeta(n){for(var i=document.getElementsByTagName("meta"),t=0;t<i.length;t++)if(i[t].name.toLowerCase()==n)return i[t].content;return""}function AjaxPost(n,t,i){$.ajax({url:n,data:t,type:"post",dataType:"json",contentType:"application\/json; charset=utf8",success:function(n){i(n.d)},error:function(){}})}function escapeHTML(n){var t=document.createElement("div"),i=document.createTextNode(n);return t.appendChild(i),t.innerHTML}function open_link(n){return window.open(n),!1}function login(n){var t=location.href,i=t.indexOf("#");return n&&i>0&&(t=t.substr(0,i)),t=t+"#"+n,location.href="https:\/\/passport.cnblogs"+getHostPostfix()+"\/login.aspx?ReturnUrl="+encodeURIComponent(t),!1}function logout(){return confirm("确认退出吗？")&&(location.href="https:\/\/passport.cnblogs"+getHostPostfix()+"\/logout.aspx?ReturnUrl="+location.href),!1}function register(){return location.href="https:\/\/passport.cnblogs"+getHostPostfix()+"\/register.aspx?ReturnUrl="+location.href,!1}function getHostPostfix(){var n=location.hostname;return n.substring(n.lastIndexOf("."),n.length)}function GetJobList(){try{$("#job_list").html("数据加载中...");$.ajax({url:"\/ws\/BlogAjaxService.asmx\/GetJobList",data:"{}",type:"post",dataType:"json",contentType:"application\/json; charset=utf8",success:function(n){$("#job_list").html(n.d)}})}catch(n){}}function shBushPathPrepare(){for(var t=arguments,i=[],n=0;n<t.length;n++)i.push(t[n].replace("@",location.protocol+"\/\/common.cnblogs.com\/script\/sh\/"));return i}function cb_CodeHighlight(){var n=!1,t=$("pre");(t.length&&$.each(t,function(){var t=$(this).attr("class");t&&t.indexOf("brush:")>=0&&(n=!0,t.indexOf("gutter:true;")>=0&&$(this).parent().addClass("sh-gutter"))}),n)&&(SyntaxHighlighter.autoloader.apply(null,shBushPathPrepare("applescript\\t\\t\\t    @shBrushAppleScript.js","actionscript3 as3\\t\\t@shBrushAS3.js","bash shell\\t\\t\\t\\t@shBrushBash.js","coldfusion cf\\t\\t\\t@shBrushColdFusion.js","cpp c\\t\\t\\t\\t\\t@shBrushCpp.js","c# c-sharp csharp\\t\\t@shBrushCSharp.js","css\\t\\t\\t\\t\\t    @shBrushCss.js","delphi pascal pas\\t\\t@shBrushDelphi.js","diff patch       \\t\\t@shBrushDiff.js","erl erlang\\t\\t\\t\\t@shBrushErlang.js","groovy\\t\\t\\t\\t\\t@shBrushGroovy.js","java\\t\\t\\t\\t\\t    @shBrushJava.js","jfx javafx\\t\\t\\t\\t@shBrushJavaFX.js","js jscript javascript\\t@shBrushJScript.js","perl pl Perl\\t\\t\\t\\t@shBrushPerl.js","php\\t\\t\\t\\t\\t    @shBrushPhp.js","text plain\\t\\t\\t\\t@shBrushPlain.js","py python\\t\\t\\t\\t@shBrushPython.js","ruby rails ror rb\\t\\t@shBrushRuby.js","sass scss\\t\\t\\t\\t@shBrushSass.js","scala\\t\\t\\t\\t\\t@shBrushScala.js","sql\\t\\t\\t\\t\\t    @shBrushSql.js","vb vbnet\\t\\t\\t\\t    @shBrushVb.js","xml xhtml xslt html\\t    @shBrushXml.js?id=20150508","objc obj-c               @shBrushObjectiveC.js","f# f-sharp fsharp        @shBrushFSharp.js","xpp dynamics-xpp         @shBrushDynamics.js","r s splus                @shBrushR.js","matlab                   @shBrushMatlab.js","swift                    @shBrushSwift.js","go golang                @shBrushGo.js","mathematica              @shBrushMathematica.js")),SyntaxHighlighter.config.strings.expandSource="+ View Code",SyntaxHighlighter.vars.discoveredBrushes=null,SyntaxHighlighter.defaults["auto-links"]=!1,SyntaxHighlighter.defaults["quick-code"]=!1,SyntaxHighlighter.all())}function cb_mathjax_render(n){if(cb_enable_mathjax){var t=document.getElementById(n);MathJax.Hub.Queue(["Typeset",MathJax.Hub,t])}}function votePost(n,t,i){if(!n){$("#digg_tips").html("推荐出错误！postId不正确");return}i||(i=!1);var r={blogApp:currentBlogApp,postId:n,voteType:t,isAbandoned:i};$("#digg_tips").css("color","red").html("提交中...");$.ajax({url:"\/mvc\/vote\/VoteBlogPost.aspx",type:"post",dataType:"json",contentType:"application\/json; charset=utf-8",data:JSON.stringify(r),success:function(n){if(n.IsSuccess){var i=$("#"+t.toLowerCase()+"_count");r.isAbandoned?$(i).html(parseInt($(i).html())-1):$(i).html(parseInt($(i).html())+1)}$("#digg_tips").html(n.Message)},error:function(n){n.status>0&&(n.status==500?$("#digg_tips").html("抱歉！发生了错误！麻烦反馈至contact@cnblogs.com"):$("#digg_tips").html(n.responseText))}})}function DiggIt(n,t,i){i==1&&votePost(n,"Digg",!1)}function voteComment(n,t,i){if(!n){$(i).css("color","red").html("推荐出错！commentId不正确");return}var r={commentId:n,voteType:t};return $(i).html($(i).html().replace(\/\\d+\/g,function(n){return parseInt(n)+1})),$.ajax({url:"\/mvc\/vote\/VoteComment.aspx",type:"post",dataType:"json",contentType:"application\/json; charset=utf-8",data:JSON.stringify(r),success:function(n){n.IsSuccess||(n.Message?n.Message.indexOf("System.")>=0?$(i).css("color","red").html("抱歉！发生了错误！麻烦反馈至contact@cnblogs.com"):$(i).css("color","red").html(n.Message):$(i).css("color","red").html("抱歉！发生了错误！麻烦反馈至contact@cnblogs.com"))},error:function(n){n.status>0&&(n.status==500?$(i).css("color","red").html("抱歉！发生了错误！麻烦反馈至contact@cnblogs.com"):$(i).css("color","red").html(n.responseText))}}),!1}function clt_enter(n){return n.ctrlKey&&n.keyCode==13?(PostComment(),!1):!0}function ShowCommentMsg(n){$("#tip_comment").html(n);$("#tip_comment2").html(n)}function CancelCommentEdit(){confirm("确认取消修改吗？")&&ResetCommentBox()}function ResetCommentBox(){$("#btn_comment_submit").val("提交");$("#comment_edit_id").html("");$("#span_comment_canceledit").css("display","none");$("#tbCommentBody").val("")}function UpdateComment(n){var t={};t.commentId=$("#comment_edit_id").html();t.parentId=$("#span_parent_id").html();t.content=$("#tbCommentBody").val();t.blogId=n;AjaxPost("\/ws\/CommentService.asmx\/UpdateComment",JSON.stringify(t),OnUpdateComment)}function OnUpdateComment(n){var r,t,i;n?(r=$("#comment_edit_id").html(),t=$("#tbCommentBody").val(),t=escapeHTML(t),t=t.replace(\/\\n\/g,"<br\/>"),t=t.replace(\/\\[quote\\]\/g,'<fieldset class="comment_quote"><legend>引用<\\\/legend>'),t=t.replace(\/\\[\\\/quote\\]\/g,"<\\\/fieldset>"),$("#comment_body_"+r).html(t+" <span style='color:red'>修改成功！<\\\/span>"),i=location.href,i.indexOf("#")>0&&(i=i.substring(0,i.indexOf("#"))),location.href=i+"#"+r,ResetCommentBox(),ShowCommentMsg("修改成功！")):alert("修改失败！")}function CommentNotify(n){var t=$("#span_comment_replyto").html();$.ajax({url:"\/ws\/CommentService.asmx\/SendCommentNotify",data:'{id:"'+t+'",commentId:'+n+"}",type:"post",dataType:"json",contentType:"application\/json; charset=utf8"})}function InsertCodeToEditor(n){$("#tbCommentBody").focus();$("#tbCommentBody").val($("#tbCommentBody").val()+n)}function RefreshPage(){return location.reload(),!1}function AddParamToUrl(n,t,i){var r=n.indexOf("?");return r>0&&(n=n.substring(0,r)),n+"?"+t+"="+i}function OpenImageUploadWindow(){var n=location.protocol+"\/\/upload.cnblogs"+location.hostname.substring(location.hostname.lastIndexOf("."))+"\/imageuploader\/upload?host=www.cnblogs.com&editor=0#tbCommentBody";document.domain="cnblogs."+location.hostname.substring(location.hostname.lastIndexOf(".")+1,location.hostname.length);OpenWindow(n,450,120,200)}function insertIndent(n){var t=$("#"+n).selection();t==""?$("#"+n).parseHtml("　　"):$("#"+n).parseHtml("　　"+t)}function insertUbbUrl(n){var i=prompt("显示链接的文本.\\n如果为空，那么将只显示超级链接地址",""),t;i!=null&&(t=prompt("http:\/\/ 超级链接","http:\/\/"),t!=""&&t!="http:\/\/"&&(i!=""?$("#"+n).parseHtml("[url="+t+"]"+i+"[\/url]"):$("#"+n).parseHtml("[url]"+t+"[\/url]")))}function insertUbbImg(n){var t=prompt("请先将图片上传到您的图库中，然后将图片地址拷下粘贴在此：","http:\/\/");t!=null&&$.trim(t)!=""&&t.toLowerCase()!="http:\/\/"&&$("#"+n).parseHtml("[img]"+t+"[\/img]")}function insertUploadImg(n){$("#tbCommentBody").parseHtml("[img]"+n+"[\/img]\\n");$("#tbCommentBody").focus()}function insertUbbCode(){var n=450,t=400,r=(screen.width-n)\/2,u=(screen.height-t)\/2,i;document.domain="cnblogs."+location.hostname.substring(location.hostname.lastIndexOf(".")+1,location.hostname.length);i=window.open("\/SyntaxHighlighter.htm","_blank","width="+n+",height="+t+",toolbars=0,resizable=1,left="+r+",top="+u);i.focus()}function cnblogs_code_collapse(n){n.children("div.cnblogs_code_open").css("display")!="none"?(n.children("div.cnblogs_code_open").css("display","none"),n.children("img.code_img_opened").css("display","none"),n.children("img.code_img_closed").css("display","inline")):(n.children("div.cnblogs_code_open").css("display","block"),n.children("img.code_img_opened").css("display","inline"),n.children("img.code_img_closed").css("display","none"))}function cnblogs_code_show(n){var t=$("#cnblogs_code_open_"+n);t.css("display")=="none"&&(t.parent().find("span.cnblogs_code_collapse").hide(),t.show(),$("#code_img_opened_"+n).show(),$("#code_img_closed_"+n).hide(),$(t).find("span.cnblogs_code_copy").length||showCopyCode(t))}function cnblogs_code_hide(n,t){if($("#cnblogs_code_open_"+n).css("display")!="none"){var i=$("#cnblogs_code_open_"+n);i.hide();$("#code_img_opened_"+n).hide();$("#code_img_closed_"+n).show();i.parent().find("span.cnblogs_code_collapse").show();t.stopPropagation?t.stopPropagation():window.event&&(window.event.cancelBubble=!0)}}function code_collapse_toggle(n){$(n).toggle();var t=n.id;IsCodeCollapseNode(t,"_Open_Image")?($("#"+t.replace("_Open_","_Closed_")).toggle(),$("#"+t.replace("_Open_Image","_Open_Text")).toggle(),$("#"+t.replace("_Open_Image","_Closed_Text")).toggle()):IsCodeCollapseNode(t,"_Closed_Image")&&($("#"+t.replace("_Closed_","_Open_")).toggle(),$("#"+t.replace("_Closed_Image","_Open_Text")).toggle(),$("#"+t.replace("_Closed_Image","_Closed_Text")).toggle())}function fix_code_collapse_img(n){if(IsCodeCollapseNode(n.id,"_Open_Image")){var t=n.id.replace("_Open_Image","_Closed_Image"),i=n.id.replace("_Open_Image","_Open_Text"),r=n.id.replace("_Open_Image","_Closed_Text");n.onclick=function(){$(this).hide();$("#"+t+"").show();$("#"+i+"").hide();$("#"+r+"").show()}}else if(IsCodeCollapseNode(n.id,"_Closed_Image")){var t=n.id.replace("_Closed_Image","_Open_Image"),i=n.id.replace("_Closed_Image","_Open_Text"),r=n.id.replace("_Closed_Image","_Closed_Text");n.onclick=function(){$(this).hide();$("#"+t+"").show();$("#"+i+"").show();$("#"+r+"").hide()}}}function IsCodeCollapseNode(n,t){return n.indexOf(t)>=0}function fix_code_collapse_span(n){var t;\/Codehighlighter1_\\d+_\\d+_Closed_Text\/ig.test(n.id)&&$(n).hide();t=\/Codehighlighter1_\\d+_\\d+_Open_Text\/ig;t.test(n.id)&&$(n).show()}function change_onclick(element,clickCode){if(clickCode){var newclick=eval("(function(){"+clickCode+"});");$(element).attr("onclick","").click(newclick)}}function showRemoveLineNumber(n){$(n).append('<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="removeLineNumber(this);return false;">消除行号<\\\/a><\\\/span>')}function showCopyCode(n){if($(n).height()>120){var t='<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="\/\/common.cnblogs.com\/images\/copycode.gif" alt="复制代码"\/><\\\/a><\\\/span>';$(n).prepend(t).append(t)}}function removeLineNumber(n){var t=$(n).parent().parent().parent(),i=$(t).html().replace(\/<span style=\\"color: #008080;?\\">\\s*(&nbsp;)?(\\d+)<\\\/span>\/gi,"");$(t).html(i)}function loadEncoderJs(){var n=document.createElement("script"),t;n.type="text\/javascript";n.src=location.protocol+"\/\/common.cnblogs.com\/script\/encoder.js";t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}function copyCnblogsCode(n){var i=getCnblogsCodeContainer(n),u=getCnblogsCodeText(i),t=document.createElement("textarea"),r;$(t).val(u);$(t).css("width",$(i).width());r=$(i).height()*.8;r>600&&(r=600);$(t).css("height",r);$(t).css("font-family","Courier New");$(t).css("font-size","12px");$(t).css("line-height","1.5");$(i).html(t);$(t).select();$("<div>按 Ctrl+C 复制代码<\\\/div>").insertBefore($(t));$("<div>按 Ctrl+C 复制代码<\\\/div>").insertAfter($(t))}function getCnblogsCodeContainer(n){var t=$(n).closest("pre");return t.length==0&&(t=$(n).closest("div.cnblogs_code")),t}function getCnblogsCodeText(n){var t="\\n"+$(n).html().replace(\/&nbsp;\/g," ").replace(\/<br\\s*\\\/?>\/ig,"\\n").replace(\/<[^>]*>\/g,"");return t=t.replace(\/\\n(\\s*\\d+\\s)\/ig,"\\n"),t=t.replace(\/\\r\\n\/g,"\\n"),t=t.replace(\/\\nView Code\/g,""),typeof Encoder!=undefined&&(t=Encoder.htmlDecode(t)),$.trim(t)}function showRunCode(n){var t=$(n).find("div.cnblogs_code_toolbar");t.length&&$(t).append('<span class="cnblogs_code_runjs"><a href="javascript:void(0);" onclick="runJsCode(this)">运行代码<\\\/a><\\\/span>')}function runJsCode(n){var i=getCnblogsCodeContainer(n),r=getCnblogsCodeText(i),t=window.open("","_blank","");t.document.open("text\/html","replace");t.opener=null;t.document.write(r);t.document.close()}function zzk_go(){var n=encodeURIComponent("blog:"+currentBlogApp+" "+document.getElementById("q").value);window.location="http:\/\/zzk.cnblogs.com\/s?w="+n}function zzk_go_enter(n){if(n.keyCode==13)return zzk_go(),!1}function google_go(){return location.href="http:\/\/www.google.com\/search?q="+encodeURIComponent("site:www.cnblogs.com\/"+currentBlogApp+"\/ "+document.getElementById("google_q").value),!1}function google_go_enter(n){if(n.keyCode==13)return google_go(),!1}function green_channel_success(n,t){$(n).replaceWith('<span style="color:red">'+t+"<\\\/span>")}function LoadPostInfoBlock(n,t,i,r){$.ajax({url:"\/mvc\/blog\/CategoriesTags.aspx",type:"get",contentType:"application\/json; charset=utf-8",data:{blogApp:i,blogId:n,postId:t},cache:!1,dataType:"json",timeout:1e4,success:function(n){n&&(n.Categories&&$("#BlogPostCategory").html(n.Categories),n.Tags&&$("#EntryTag").html(n.Tags))}});$.ajax({url:"\/mvc\/blog\/BlogPostInfo.aspx",type:"get",contentType:"application\/json; charset=utf-8",data:{blogId:n,postId:t,blogApp:i,blogUserGuid:r},cache:!1,dataType:"text",timeout:1e4,success:function(n){var t=$("#blog_post_info");$(t).html().length<20&&$(t).html(n)},error:function(){}})}function GetPrevNextPost(n,t,i,r){$.get("\/post\/prevnext",{postId:n,blogId:t,dateCreated:i,postType:r},function(n){n&&$("#post_next_prev").html(n)},"html")}function GetHistoryToday(n,t,i){$.ajax({url:"\/mvc\/blog\/HistoryToday.aspx",data:{blogId:n,blogApp:t,dateCreated:i},type:"get",dataType:"text",timeout:1e4,success:function(n){n&&$("#HistoryToday").html(n)}})}function tsina_a(){var n=screen,t=document,i=encodeURIComponent,r="http:\/\/v.t.sina.com.cn\/share\/share.php?",u=t.location.href,f=["url=",i(u),"&title=",i(t.title)].join("");window.open([r,f].join(""),"mb",["toolbar=0,status=0,resizable=1,width=620,height=450,left=",(n.width-620)\/2,",top=",(n.height-450)\/2].join(""))||(u.href=[r,f].join(""))}function ShareToTsina(){\/Firefox\/.test(navigator.userAgent)?setTimeout(tsina_a,0):tsina_a()}function outFromAggHome(){$.ajax({url:"\/mvc\/Blog\/RemoveFromSiteHome.aspx",data:JSON.stringify({blogApp:currentBlogApp,postId:cb_entryId}),type:"post",dataType:"json",contentType:"application\/json; charset=utf-8",success:function(n){n&&$("#site_editor_opt").html("<span style='color:red'>操作成功！<\\\/span>")}})}function loadNewsAndKb(){$.ajax({url:"\/mvc\/Blog\/UnderPostNews.aspx",type:"get",dataType:"text",success:function(n){$("#under_post_news").html(n)}});$.ajax({url:"\/mvc\/Blog\/UnderPostKb.aspx",type:"get",dataType:"text",success:function(n){$("#under_post_kb").html(n)}})}function loadOptUnderPost(){isLogined&&$.ajax({url:"\/mvc\/Blog\/OptUnderPost.aspx",type:"get",data:{postId:cb_entryId},dataType:"text",success:function(n){$("#opt_under_post").html(n)}})}function loadAdUnderPost(){}function loadBlogSignature(){$.ajax({url:"\/mvc\/blog\/signature.aspx",data:{blogId:cb_blogId,blogApp:cb_blogApp},type:"get",dataType:"text",success:function(n){n&&$("#MySignature").html(n).show()}})}function loadPageBeginHtml(){currentBlogApp&&$.ajax({url:"\/mvc\/blog\/PageBeginHtml.aspx",data:'{"blogApp":"'+currentBlogApp+'"}',type:"post",dataType:"text",contentType:"application\/json; charset=utf-8",success:function(n){n&&(n.indexOf("<script")>-1?$.getScript(location.protocol+"\/\/common.cnblogs.com\/script\/jquery.writeCapture-min.js",function(){$("#page_begin_html").writeCapture().html(n).show()}):$("#page_begin_html").html(n).show())}})}function loadPageEndHtml(){currentBlogApp&&$.ajax({url:"\/mvc\/blog\/PageEndHtml.aspx",data:'{"blogApp":"'+currentBlogApp+'"}',type:"post",dataType:"text",contentType:"application\/json; charset=utf-8",success:function(n){n&&(n.indexOf("<script")>-1?$.getScript(location.protocol+"\/\/common.cnblogs.com\/script\/jquery.writeCapture-min.js",function(){$("#page_end_html").writeCapture().html(n).show()}):$("#page_end_html").html(n).show())}})}function loadBlogNews(){$.ajax({url:"\/mvc\/blog\/news.aspx",data:{blogApp:currentBlogApp},type:"get",dataType:"text",success:function(n){n&&(n.indexOf("<script")<n.indexOf("<script>getFollowStatus")?$.getScript(location.protocol+"\/\/common.cnblogs.com\/script\/jquery.writeCapture-min.js",function(){$("#blog-news").writeCapture().html(n).show()}):n.indexOf("错误提示：发生了异常")<0&&$("#blog-news").html(n).show())}})}function loadBlogCalendar(n){$.ajax({url:"\/mvc\/blog\/calendar.aspx",data:{blogApp:currentBlogApp,dateStr:n},type:"get",dataType:"text",success:function(n){n&&($("#blog-calendar").html(n),$("#blog-calendar").show())}})}function loadBlogDefaultCalendar(){if($("#blog-calendar").length){var t="",i=$("#cb_post_title_url").attr("href"),n;(n=\/\\\/archive\\\/(\\d{4}\\\/\\d{2}\\\/\\d{2})\\\/\/g.exec(i))?t=n[1]:(n=\/\\\/archive\\\/(\\d{4}\\\/\\d{2}\\\/\\d{2})\\.\/g.exec(i))?t=n[1]:(n=\/\\\/archive\\\/(\\d{4}\\\/\\d{2}).\/g.exec(i))&&(t=n[1]);loadBlogCalendar(t)}}function loadBlogSideColumn(){$("#blog-sidecolumn").length&&$.ajax({url:"\/"+currentBlogApp+"\/mvc\/blog\/sidecolumn.aspx",data:{blogApp:currentBlogApp},type:"get",dataType:"text",success:function(n){n&&($("#blog-sidecolumn").html(n),loadBlogSideBlocks())}})}function loadBlogSideBlocks(){var n=[];document.getElementById("RecentCommentsBlock")&&n.push("ShowRecentComment");document.getElementById("TopViewPostsBlock")&&n.push("ShowTopViewPosts");document.getElementById("TopFeedbackPostsBlock")&&n.push("ShowTopFeedbackPosts");document.getElementById("TopDiggPostsBlock")&&n.push("ShowTopDiggPosts");$.ajax({url:"\/mvc\/Blog\/GetBlogSideBlocks.aspx",data:{blogApp:currentBlogApp,showFlag:n.join(",")},type:"get",dataType:"json",success:function(n){n&&(n.RecentComments?$("#RecentCommentsBlock").html(n.RecentComments):$("#recent_comments_wrap").hide(),n.TopViewPosts?$("#TopViewPostsBlock").html(n.TopViewPosts):$("#topview_posts_wrap").hide(),n.TopFeedbackPosts?$("#TopFeedbackPostsBlock").html(n.TopFeedbackPosts):$("#topfeedback_posts_wrap").hide(),n.TopDiggPosts?$("#TopDiggPostsBlock").html(n.TopDiggPosts):$("#topdigg_posts_wrap").hide())}})}function blogCommentManager(){var t=0;this.getCurrentPage=function(){return t};this.PageSize=function(){return pageSize};var n=function(n){setTimeout(function(){location.hash="#";location.hash=n},100)},r=function(){var n=window.location.hash,t,i;return n&&\/#(\\d+)\/g.test(n)?(t=$('#blog-comments-placeholder a.layer[href="'+n+'"]'),$(t).length?(i=$(t).offset(),window.scrollTo(i.left,i.top),!0):!1):!0},i=function(){if(!allowComments){$("#comment_form_container").html("（评论功能已被禁用）");return}var t={};t.postId=cb_entryId;t.blogApp=currentBlogApp;$("#comment_form_container").html('<span style="color:green">努力加载评论框中...<\\\/span>');$.ajax({url:"\/mvc\/Blog\/CommentForm.aspx",data:t,dataType:"html",cache:!1,type:"get",success:function(t){if(t){var i=$("#comment_form_container");i.html(t);$("#tbCommentBody").bind("keydown",function(n){commentManager.ctlEnterPost(n)});$("#btn_comment_submit").bind("click",function(){return commentManager.postComment(),!1});$("#tbCommentBody").focus(function(){$("#tbCommentBody").mention({typeaheadOpts:{under:!0}})});location.hash=="#commentform"&&n("#commentform")}},error:function(){$("#comment_form_container").html("<span style='color:red'>评论框加载失败，请与管理员联系(contact@cnblogs.com)。<\\\/span>")}})};this.postComment=function(){$("#btn_comment_submit").val()=="修改"&&$("#comment_edit_id").html!=""?commentManager.UpdateComment():commentManager.PostNewComment()};this.ctlEnterPost=function(n){return n.ctrlKey&&n.keyCode==13?(commentManager.postComment(),!1):!0};this.PostNewComment=function(){var t=$.trim($("#tbCommentBody").val()),n,i;if(!t){alert("请输入评论内容！");return}if(t.length>4e3){alert("评论内容过长，超过4000个字数限制！当前长度："+t.length);return}if(cb_entryId<=0){alert("postId不正确");return}ShowCommentMsg("评论提交中...");$("#btn_comment_submit").attr("disabled","disabled");n={};n.blogApp=currentBlogApp;n.postId=cb_entryId;n.body=t;i=$("#span_parentcomment_id").text();n.parentCommentId=\/(\\d)\/.test(i)?i:0;$.ajax({url:"\/mvc\/PostComment\/Add.aspx",data:JSON.stringify(n),type:"post",dataType:"json",contentType:"application\/json; charset=utf8",timeout:3e4,success:function(n){if(n)n.IsSuccess?(ShowCommentMsg("感谢您的回复:) 服务器端执行耗时"+n.Duration+"毫秒"),$("#tbCommentBody").val(""),$("#divCommentShow").html($("#divCommentShow").html()+n.Message),cb_mathjax_render("#divCommentShow")):ShowCommentMsg(n.Message),$("#btn_comment_submit").removeAttr("disabled");else ShowCommentMsg("抱歉！评论提交失败！请与管理员联系(contact@cnblogs.com)。"),$("#btn_comment_submit").removeAttr("disabled")},error:function(n,t){n.status==500?ShowCommentMsg("抱歉！发生了错误！麻烦反馈至contact@cnblogs.com"):n.status>0?ShowCommentMsg("抱歉！评论提交失败！错误信息："+n.responseText):ShowCommentMsg("抱歉！评论提交失败！出错原因："+t);$("#btn_comment_submit").removeAttr("disabled")}})};this.UpdateComment=function(){var n={};n.commentId=parseInt($("#comment_edit_id").html());n.body=$("#tbCommentBody").val();$.ajax({url:"\/mvc\/PostComment\/Update.aspx",data:JSON.stringify(n),type:"post",dataType:"json",contentType:"application\/json; charset=utf8",success:function(t){if(t)t.IsSuccess?(ShowCommentMsg("修改成功"),$("#comment_body_"+n.commentId).html(t.Message),commentManager.ResetCommentBox()):ShowCommentMsg(t.Message);else ShowCommentMsg("抱歉！评论修改失败！请与管理员联系(contact@cnblogs.com)。")},error:function(n){ShowCommentMsg("抱歉！评论修改失败！错误信息："+n.responseText)}})};this.Subscribe=function(){if(confirm("确认订阅吗？订阅后有新评论时会邮件通知您")){var n=cb_entryId,t=cb_blogId;$("#commentbox_opt_sub").html("提交中...");$("#commentbox_opt_sub").css("color","red");$("#commentbox_opt_sub").removeAttr("onclick");$.ajax({url:"\/mvc\/Subscribe\/SubscribeComment.aspx",data:'{"blogId":'+t+',"postId":'+n+"}",type:"post",dataType:"json",contentType:"application\/json; charset=utf8",success:function(n){n?$("#commentbox_opt_sub").html("订阅成功"):$("#commentbox_opt_sub").html("订阅失败")}})}};this.Unsubscribe=function(){var n=cb_entryId;$("#commentbox_opt_unsub").html("提交中...");$("#commentbox_opt_unsub").css("color","red");$("#commentbox_opt_unsub").removeAttr("onclick");$.ajax({url:"\/mvc\/Subscribe\/UnsubscribeComment.aspx",data:'{"postId":'+n+"}",type:"post",dataType:"json",contentType:"application\/json; charset=utf8",success:function(n){n?$("#commentbox_opt_unsub").html("取消订阅成功"):$("#commentbox_opt_unsub").html("取消订阅失败")}})};this.ResetCommentBox=function(){$("#btn_comment_submit").val("提交评论");$("#comment_edit_id").html("");$("#tbCommentBody").val("")};this.loadMailSubscribeOperation=function(){$("#commentbox_opt").append('<a href="">订阅回复<\\\/a>')};this.renderComments=function(r,u,f){var e,o,s;t=r;e=!1;o=0;typeof f!="undefined"&&(o=f,e=!0);!e&&r==0&&location.hash&&\/^#\\d+$\/g.test(location.hash)&&(e=!0,o=location.hash.substring(1));r>0&&(location.hash="#!comments");s={postId:cb_entryId,blogApp:currentBlogApp,pageIndex:r,anchorCommentId:o};$("#blog-comments-placeholder").html('<div style="color:green;margin:50px 0;font-weight:bold;">努力加载评论中...<\\\/div>');$("#comment_form_container").html("");$.ajax({url:"\/mvc\/blog\/GetComments.aspx",data:s,type:"get",dataType:"json",cache:!1,success:function(t){t?($("#post_comment_count").html(t.commentCount),t.commentCount>0?($("#blog-comments-placeholder").html(t.commentsHtml),e?n("#"+o):(location.hash=="#!comments"||location.hash=="#comments_pager_top")&&n("#!comments"),comment_maxId=$("#comment-maxId").html(),comment_maxDate=$("#comment-maxDate").html()):$("#blog-comments-placeholder").html("")):$("#blog-comments-placeholder").html("");i();cb_CodeHighlight();cb_mathjax_render("#blog-comments-placeholder")},error:function(n){n.status>0&&$("#blog-comments-placeholder").html("抱歉！发生了错误！麻烦反馈至contact@cnblogs.com")}})}}function SubscribeComment(){return $("#<%= lnkSubscribe.ClientID %>").html("<span style='color:red'>订阅操作中...<\\\/span>"),AjaxPost("\/ws\/CommentService.asmx\/SubscribeComment","{entryId:"+cb_entryId+",blogId:"+cb_blogId+"}",OnSubscribeSuccess),!1}function OnSubscribeSuccess(n){n?($("#<%= lnkSubscribe.ClientID %>").html("<span style='color:red'>订阅成功<\\\/span>"),$("#<%= lnkSubscribe.ClientID %>").removeAttr("href"),$("#<%= lnkSubscribe.ClientID %>").removeAttr("onclick")):$("#<%= lnkSubscribe.ClientID %>").html("<span style='color:red'>订阅失败<\\\/span>")}function CancelCommentSubscribe(){return $("#<%= lnkSubscribe.ClientID %>").html("<span style='color:red'>取消操作中...<\\\/span>"),AjaxPost("\/ws\/CommentService.asmx\/CancelCommentSubscribe","{entryId:"+cb_entryId+"}",OnCancelSubscribeSuccess),!1}function OnCancelSubscribeSuccess(n){n?($("#<%= lnkSubscribe.ClientID %>").html("<span style='color:red'>取消成功<\\\/span>"),$("#<%= lnkSubscribe.ClientID %>").removeAttr("href"),$("#<%= lnkSubscribe.ClientID %>").removeAttr("onclick")):$("#<%= lnkSubscribe.ClientID %>").html("<span style='color:red'>取消操作失败<\\\/span>")}function RefreshCommentList(){return $("#tip_comment").html(""),$("#span_refresh_tips").show(),$("#span_refresh_tips").html("正在刷新..."),$("#span_refresh_tips").css("color","red"),$("#lnk_RefreshComments").hide(),comment_maxDate||(comment_maxDate=$("#post-date").html()),loadNewComments(cb_entryId,comment_maxDate,comment_maxId),!1}function loadNewComments(n,t,i){var r={parentId:n,startDateStr:t,startId:i};$.ajax({url:"\/mvc\/comment\/NewComments.aspx",data:JSON.stringify(r),dataType:"text",success:function(n){if(n){var t=$("#divCommentShow div.comment_my_posted");$(t).length&&$(t).remove();$("#divCommentShow").html(n)}else $("#tip_comment").html("暂无新评论");$("#span_refresh_tips").hide();$("#lnk_RefreshComments").show()}})}function ReplyComment(n,t){var i=$("#a_comment_author_"+n).text();return $("#tbCommentBody").focus(),$("#tbCommentBody").val("@"+i+"\\n"+$("#tbCommentBody").val()),$("#span_parentcomment_id").html(n),$("#span_comment_replyto").html(t),!1}function QuoteComment(n,t){return $("#tip_comment").html("正在加载引用内容..."),$("#span_parentcomment_id").html(n),$("#span_comment_replyto").html(t),GetQuoteComment(n),!1}function GetQuoteComment(n){var i=$("#comment_body_"+n+" div.syntaxhighlighter"),t,r;$(i).length&&$(i).remove();t=$("#comment_body_"+n).html();t=t.replace(\/\\n\/g,"");t=t.replace(\/<br\\\/?>\/ig,"\\n");t=t.replace(\/<fieldset class=\\"comment_quote\\">((\\w|\\W)*?)<\\\/fieldset>\/ig,"[quote]$1[\/quote]");t=t.replace(\/<[^>]*>\/g,"");t.length>300&&(t=t.replace(\/<fieldset class=\\"comment_quote\\">((\\w|\\W)*?)<\\\/fieldset>\/ig,"[quote]$1[\/quote]"),t=t.substring(0,300)+"...");t.length>0&&(t="[quote]\\n"+t+"\\n[\/quote]\\n");r=$("#a_comment_author_"+n).text();$("#tbCommentBody").focus();$.getScript(location.protocol+"\/\/common.cnblogs.com\/script\/encoder.js",function(){t=Encoder.htmlDecode(t);$("#tbCommentBody").val($("#tbCommentBody").val()+"@"+r+"\\n"+t);$("#tip_comment").html("")})}function GetCommentBody(n){return ShowCommentMsg("评论内容加载中..."),$.ajax({url:"\/mvc\/comment\/GetCommentBody.aspx",type:"post",data:'{"commentId":'+n+"}",dataType:"text",success:function(t){t&&($("#comment_edit_id").html(n),$("#tbCommentBody").focus(),$("#tbCommentBody").val(t),$("#btn_comment_submit").val("修改"),$("#span_comment_canceledit").css("display","inline"));ShowCommentMsg("")}}),!1}function DelComment(n,t,i){return confirm("确认要删除该评论吗?")&&(currentDelElement=t,currentCommentID=n,$(currentDelElement).html("<span style='color:red'>正在删除...<\\\/span>"),$(currentDelElement).removeAttr("href"),$(currentDelElement).removeAttr("onclick"),$.ajax({url:"\/mvc\/comment\/DeleteComment.aspx",type:"post",data:JSON.stringify({commentId:currentCommentID,pageIndex:commentManager.getCurrentPage(),parentId:i}),contentType:"application\/json; charset=utf-8",dataType:"json",success:function(n){n?($("#comment_body_"+currentCommentID).html(""),document.getElementById("comment_anchor_"+currentCommentID)!=null&&(document.getElementById("comment_anchor_"+currentCommentID).parentNode.innerHTML=""),currentDelElement.parentNode!=null&&(currentDelElement.parentNode.innerHTML="<span style='color:red'>删除成功!<\\\/span>")):$(currentDelElement).html("删除失败！")}})),!1}function showImages(){}function showCodeBlock(n){var t=$(n).children(".cnblogs_code_hide").first();t.css("display")=="none"?(t.parent().find("span.cnblogs_code_collapse").hide(),t.show(),$(n).find(".code_img_opened").show(),$(n).find(".code_img_closed").hide(),$(t).find("span.cnblogs_code_copy").length||showCopyCode(t)):(t.parent().find("span.cnblogs_code_collapse").show(),t.hide(),$(n).find(".code_img_opened").hide(),$(n).find(".code_img_closed").show())}function fixPostBody(){cb_entryId>5928739&&$("div.cnblogs_code").each(function(){var t,n;this.onclick||(t=$(this).children(".cnblogs_code_hide"),t.length&&(n=this,$(this).find(".code_img_closed").unbind().bind("click",function(){showCodeBlock(n)}),$(this).find(".code_img_opened").unbind().bind("click",function(){showCodeBlock(n)})))});$("div.cnblogs_Highlighter pre").each(function(){$(this).html().indexOf("<span")>=0&&$(this).text($(this).text())});showImages("cnblogs_post_body")}function fixPostListBodyFormat(){}function canShowAdsense(){var n=$("#cb_post_title_url");if(n.length){var t=n.html(),i=["破解","序列号","crack","下载","激活","keygen","逆向工程","注册","汉化版","密钥"].filter(function(n){return t.indexOf(n)>-1});return i.length==0}return cb_entryId==1489405||cb_entryId==1873020||cb_entryId==3658314?!1:!0}function loadViewCount(n){$.ajax({url:"\/mvc\/blog\/ViewCountCommentCout.aspx",data:{postId:n},type:"get",contentType:"text",success:function(n){$("#post_view_count").html(n)}})}function incrementViewCount(n){n&&$.ajax({url:location.protocol+"\/\/counter.cnblogs.com\/blog\/post\/"+n,type:"get",dataType:"script",cache:!0})}function runJsCode(n){var i=document.getElementById(n),t=window.open("about:blank","runWindow");t.opener=null;t.document.open();t.document.write(i.value);t.document.close()}function getBlogPostBody(n){$.ajax({url:"\/postbody\/fulltext.aspx",data:JSON.stringify({blogapp:currentBlogApp,postId:n}),type:"post",contentType:"application\/json",dataType:"text",success:function(t){if(t){var i="#postlist_postbody_"+n;$(i).html(t);cb_CodeHighlight();cb_mathjax_render(i);fixPostListBodyFormat();n>3861237&&$.getScript(location.protocol+"\/\/common.cnblogs.com\/highlight\/9.1.0\/highlight.min.js?id=20160127",function(){hljs.initHighlightingOnLoad()})}else $("#postlist_postbody_"+n).html("")}})}function load_page_begin_html(){$.ajax({url:"\/mvc\/blog\/pagebeginhtml.aspx",type:"get",data:{blogApp:currentBlogApp},dataType:"text",success:function(n){n&&(n.indexOf("<script")>-1?$.getScript(location.protocol+"\/\/common.cnblogs.com\/script\/jquery.writeCapture-min.js",function(){$("#page_begin_html").writeCapture().html(n)}):$("#page_begin_html").html(n))}})}function google_analytics(n,t,i,r,u,f,e){n.GoogleAnalyticsObject=u;n[u]=n[u]||function(){(n[u].q=n[u].q||[]).push(arguments)};n[u].l=1*new Date;f=t.createElement(i);e=t.getElementsByTagName(i)[0];f.async=1;f.src=r;e.parentNode.insertBefore(f,e)}function google_ga(){try{google_analytics(window,document,"script","https:\/\/www.google-analytics.com\/analytics.js","ga");ga("create","UA-476124-1","auto");ga("send","pageview")}catch(n){}}function deliverAdT2(){$.ajax({url:location.protocol+"\/\/a1.cnblogs.com\/units\/text\/T2\/creative",type:"get",dataType:"html",cache:!1,success:function(n){var t,i,r;if(n){if(t=\/(<a [^>]+>[^{<]+)(\\{(.*?)\\})(<\\\/a><br\\\/>)\/g,i=t.exec(n),i&&i.length&&(r=$("#cb_post_title_url"),r.length)){var u=r.html(),f=i[3].split(","),e=f.filter(function(n){return new RegExp(n,"i").test(u)});n=e.length?n.replace(t,"$1$4"):n.replace(t,"")}$("#ad_t2").html(n)}}})}function deliverAdC1(){try{deliverDirectAdC1()}catch(n){deliverDirectAdC1()}}function deliverDirectAdC1(){$.ajax({url:location.protocol+"\/\/a1.cnblogs.com\/units\/image\/C1\/creative",type:"get",dataType:"html",success:function(n){$("#cnblogs_c1").html(n)}})}function deliverGoogleAdC1(){$("#cnblogs_c1").html('<script async src="\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js"><\\\/script>     <ins class="adsbygoogle"     style="display:inline-block;width:300px;height:250px"     data-ad-client="ca-pub-4210569241504288"     data-ad-slot="5457903683"><\\\/ins><script>(adsbygoogle = window.adsbygoogle || []).push({});<\\\/script>')}function deliverAdC2(){$.ajax({url:location.protocol+"\/\/a1.cnblogs.com\/units\/image\/C2\/creative",type:"get",dataType:"html",success:function(n){$("#cnblogs_c2").html(n)}})}function markdown_highlight(){$("#cnblogs_post_body pre code").each(function(n,t){hljs.highlightBlock(t)})}function shareOnWechat(){var i=document.location.href,n=420,t=330,r=(window.screen.availHeight-30-t)\/2,u=(window.screen.availWidth-10-n)\/2;window.open("\/\/common.cnblogs.com\/qrcode.html?url="+encodeURIComponent(i),"_blank","location=no,top="+r+",left="+u+", toolbar=no, directories=no, titlebar=no, status=no, menubar=no, scrollbars=no,status=no, resizable=no, copyhistory=no, width="+n+", height="+t+"")}function follow(n){loadLink(location.protocol+"\/\/common.cnblogs.com\/scripts\/artDialog\/ui-dialog.css",function(){loadScript(location.protocol+"\/\/common.cnblogs.com\/scripts\/artDialog\/dialog-min.js",function(){if(!isLogined){login();return}if(c_has_follwed){var t=dialog({content:"你已经关注过该博主！"});return t.show(),setTimeout(function(){t.close().remove()},2e3),!1}n||(n=cb_blogUserGuid);$("#author_profile_follow").html("<span class='color:red'>正在处理中...<\\\/span>");$.ajax({url:"\/mvc\/Follow\/FollowBlogger.aspx",data:'{"blogUserGuid":"'+n+'"}',dataType:"text",type:"post",contentType:"application\/json; charset=utf-8",success:function(t){t=="未登录"?login():(showFollowMsg(t),t=="关注成功"&&followByGroup(n,!0))},error:function(n){n.status>0&&showFollowMsg("抱歉！发生了错误！麻烦反馈至contact@cnblogs.com")}})})})}function followByGroup(n,t){loadScript(location.protocol+"\/\/common.cnblogs.com\/scripts\/artDialog\/dialog-plus-min.js",function(){var r=$("#author_profile_detail").children("a").first().text(),i=dialog({width:480,height:t?450:420,title:"关注成功，设置备注名称与分组",url:"https:\/\/home.cnblogs.com\/follow_group\/Index\/?enableSetRemark="+t,oniframeload:function(){var u=this.iframeNode.contentWindow;u.postMessage({name:r,currentUserId:n,remark:"",enableSetRemark:t},"https:\/\/home.cnblogs.com");window.addEventListener("message",function(n){if(n.data.IsSucceed!=undefined&&n.data.IsSucceed!=null&&n.data.IsSucceed){var t=dialog({content:"保存成功！"});t.show();setTimeout(function(){t.close().remove()},2e3)}i.close().remove()},!1)}});i.show()})}function showFollowMsg(n){$("#author_profile_follow").html('<span style="color:red">'+n+"<\\\/span>");$("#p_b_follow").html('<span style="color:red">'+n+"<\\\/span>");green_channel_success($("#green_channel_follow"),n)}function unfollow(n){loadLink(location.protocol+"\/\/common.cnblogs.com\/scripts\/artDialog\/ui-dialog.css",function(){loadScript(location.protocol+"\/\/common.cnblogs.com\/scripts\/artDialog\/dialog-min.js",function(){var t=dialog({title:"取消关注",content:"您确定要取消关注吗？",okValue:"不关注了",ok:function(){$("#author_profile_follow").html("<span style='color:red'>正在处理中...<\\\/span>");$.ajax({url:"\/mvc\/Follow\/RemoveFollow.aspx",data:'{"blogUserGuid":"'+n+'"}',dataType:"text",type:"post",contentType:"application\/json; charset=utf-8",success:function(n){n=="未登录"?login():showFollowMsg(n)},error:function(n){n.status>0&&showFollowMsg("抱歉！发生了错误！麻烦反馈至contact@cnblogs.com")}})},cancelValue:"再考虑一下",cancel:function(){}});t.show()})})}function getFollowStatus(n){$.ajax({url:"\/mvc\/Follow\/GetFollowStatus.aspx",data:{blogUserGuid:n},cache:!1,dataType:"text",type:"get",success:function(n){$("#p_b_follow").html(n)}})}function loadScript(n,t){if(document.getElementById(n)){t();return}var i=document.createElement("script");i.id=n;i.type="text\/javascript";i.readyState?i.onreadystatechange=function(){(i.readyState=="loaded"||i.readyState=="complete")&&(i.onreadystatechange=null,t())}:i.onload=function(){t()};i.src=n;document.getElementsByTagName("head")[0].appendChild(i)}function loadLink(n,t){if(document.getElementById(n)){t();return}var i=document.createElement("link");i.id=n;i.rel="stylesheet";i.readyState?i.onreadystatechange=function(){(i.readyState=="loaded"||i.readyState=="complete")&&(i.onreadystatechange=null,t())}:i.onload=function(){t()};i.href=n;document.getElementsByTagName("head")[0].appendChild(i)}var JSON,currentDelElement,currentCommentID,insertUBB;JSON||(JSON={}),function(){"use strict";function i(n){return n<10?"0"+n:n}function o(n){return e.lastIndex=0,e.test(n)?'"'+n.replace(e,function(n){var t=s[n];return typeof t=="string"?t:"\\\\u"+("0000"+n.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+n+'"'}function u(i,f){var s,l,h,a,v=n,c,e=f[i];e&&typeof e=="object"&&typeof e.toJSON=="function"&&(e=e.toJSON(i));typeof t=="function"&&(e=t.call(f,i,e));switch(typeof e){case"string":return o(e);case"number":return isFinite(e)?String(e):"null";case"boolean":case"null":return String(e);case"object":if(!e)return"null";if(n+=r,c=[],Object.prototype.toString.apply(e)==="[object Array]"){for(a=e.length,s=0;s<a;s+=1)c[s]=u(s,e)||"null";return h=c.length===0?"[]":n?"[\\n"+n+c.join(",\\n"+n)+"\\n"+v+"]":"["+c.join(",")+"]",n=v,h}if(t&&typeof t=="object")for(a=t.length,s=0;s<a;s+=1)typeof t[s]=="string"&&(l=t[s],h=u(l,e),h&&c.push(o(l)+(n?": ":":")+h));else for(l in e)Object.prototype.hasOwnProperty.call(e,l)&&(h=u(l,e),h&&c.push(o(l)+(n?": ":":")+h));return h=c.length===0?"{}":n?"{\\n"+n+c.join(",\\n"+n)+"\\n"+v+"}":"{"+c.join(",")+"}",n=v,h}}typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+i(this.getUTCMonth()+1)+"-"+i(this.getUTCDate())+"T"+i(this.getUTCHours())+":"+i(this.getUTCMinutes())+":"+i(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()});var f=\/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]\/g,e=\/[\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]\/g,n,r,s={"\\b":"\\\\b","\\t":"\\\\t","\\n":"\\\\n","\\f":"\\\\f","\\r":"\\\\r",'"':'\\\\"',"\\\\":"\\\\\\\\"},t;typeof JSON.stringify!="function"&&(JSON.stringify=function(i,f,e){var o;if(n="",r="",typeof e=="number")for(o=0;o<e;o+=1)r+=" ";else typeof e=="string"&&(r=e);if(t=f,f&&typeof f!="function"&&(typeof f!="object"||typeof f.length!="number"))throw new Error("JSON.stringify");return u("",{"":i})});typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(n,t){var r,u,i=n[t];if(i&&typeof i=="object")for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&(u=walk(i,r),u!==undefined?i[r]=u:delete i[r]);return reviver.call(n,t,i)}var j;if(text=String(text),f.lastIndex=0,f.test(text)&&(text=text.replace(f,function(n){return"\\\\u"+("0000"+n.charCodeAt(0).toString(16)).slice(-4)})),\/^[\\],:{}\\s]*$\/.test(text.replace(\/\\\\(?:["\\\\\\\/bfnrt]|u[0-9a-fA-F]{4})\/g,"@").replace(\/"[^"\\\\\\n\\r]*"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?\/g,"]").replace(\/(?:^|:|,)(?:\\s*\\[)+\/g,"")))return j=eval("("+text+")"),typeof reviver=="function"?walk({"":j},""):j;throw new SyntaxError("JSON.parse");})}();eval(function(n,t,i,r,u,f){if(u=function(n){return(n<t?"":u(parseInt(n\/t)))+((n=n%t)>35?String.fromCharCode(n+29):n.toString(36))},!"".replace(\/^\/,String)){while(i--)f[u(i)]=r[i]||u(i);r=[function(n){return f[n]}];u=function(){return"\\\\w+"};i=1}while(i--)r[i]&&(n=n.replace(new RegExp("\\\\b"+u(i)+"\\\\b","g"),r[i]));return n}('K M;I(M)1S 2U("2a\\'t 4k M 4K 2g 3l 4G 4H");(6(){6 r(f,e){I(!M.1R(f))1S 3m("3s 15 4R");K a=f.1w;f=M(f.1m,t(f)+(e||""));I(a)f.1w={1m:a.1m,19:a.19?a.19.1a(0):N};H f}6 t(f){H(f.1J?"g":"")+(f.4s?"i":"")+(f.4p?"m":"")+(f.4v?"x":"")+(f.3n?"y":"")}6 B(f,e,a,b){K c=u.L,d,h,g;v=R;5K{O(;c--;){g=u[c];I(a&g.3r&&(!g.2p||g.2p.W(b))){g.2q.12=e;I((h=g.2q.X(f))&&h.P===e){d={3k:g.2b.W(b,h,a),1C:h};1N}}}}5v(i){1S i}5q{v=11}H d}6 p(f,e,a){I(3b.Z.1i)H f.1i(e,a);O(a=a||0;a<f.L;a++)I(f[a]===e)H a;H-1}M=6(f,e){K a=[],b=M.1B,c=0,d,h;I(M.1R(f)){I(e!==1d)1S 3m("2a\\'t 5r 5I 5F 5B 5C 15 5E 5p");H r(f)}I(v)1S 2U("2a\\'t W 3l M 59 5m 5g 5x 5i");e=e||"";O(d={2N:11,19:[],2K:6(g){H e.1i(g)>-1},3d:6(g){e+=g}};c<f.L;)I(h=B(f,c,b,d)){a.U(h.3k);c+=h.1C[0].L||1}Y I(h=n.X.W(z[b],f.1a(c))){a.U(h[0]);c+=h[0].L}Y{h=f.3a(c);I(h==="[")b=M.2I;Y I(h==="]")b=M.1B;a.U(h);c++}a=15(a.1K(""),n.Q.W(e,w,""));a.1w={1m:f,19:d.2N?d.19:N};H a};M.3v="1.5.0";M.2I=1;M.1B=2;K C=\/\\\\$(?:(\\\\d\\\\d?|[$&`\\'])|{([$\\\\w]+)})\/g,w=\/[^5h]+|([\\\\s\\\\S])(?=[\\\\s\\\\S]*\\\\1)\/g,A=\/^(?:[?*+]|{\\\\d+(?:,\\\\d*)?})\\\\??\/,v=11,u=[],n={X:15.Z.X,1A:15.Z.1A,1C:1r.Z.1C,Q:1r.Z.Q,1e:1r.Z.1e},x=n.X.W(\/()??\/,"")[1]===1d,D=6(){K f=\/^\/g;n.1A.W(f,"");H!f.12}(),y=6(){K f=\/x\/g;n.Q.W("x",f,"");H!f.12}(),E=15.Z.3n!==1d,z={};z[M.2I]=\/^(?:\\\\\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\\\29-26-f]{2}|u[\\\\29-26-f]{4}|c[A-3o-z]|[\\\\s\\\\S]))\/;z[M.1B]=\/^(?:\\\\\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\\\d*|x[\\\\29-26-f]{2}|u[\\\\29-26-f]{4}|c[A-3o-z]|[\\\\s\\\\S])|\\\\(\\\\?[:=!]|[?*+]\\\\?|{\\\\d+(?:,\\\\d*)?}\\\\??)\/;M.1h=6(f,e,a,b){u.U({2q:r(f,"g"+(E?"y":"")),2b:e,3r:a||M.1B,2p:b||N})};M.2n=6(f,e){K a=f+"\/"+(e||"");H M.2n[a]||(M.2n[a]=M(f,e))};M.3c=6(f){H r(f,"g")};M.5l=6(f){H f.Q(\/[-[\\\\]{}()*+?.,\\\\\\\\^$|#\\\\s]\/g,"\\\\\\\\$&")};M.5e=6(f,e,a,b){e=r(e,"g"+(b&&E?"y":""));e.12=a=a||0;f=e.X(f);H b?f&&f.P===a?f:N:f};M.3q=6(){M.1h=6(){1S 2U("2a\\'t 55 1h 54 3q")}};M.1R=6(f){H 53.Z.1q.W(f)==="[2m 15]"};M.3p=6(f,e,a,b){O(K c=r(e,"g"),d=-1,h;h=c.X(f);){a.W(b,h,++d,f,c);c.12===h.P&&c.12++}I(e.1J)e.12=0};M.57=6(f,e){H 6 a(b,c){K d=e[c].1I?e[c]:{1I:e[c]},h=r(d.1I,"g"),g=[],i;O(i=0;i<b.L;i++)M.3p(b[i],h,6(k){g.U(d.3j?k[d.3j]||"":k[0])});H c===e.L-1||!g.L?g:a(g,c+1)}([f],0)};15.Z.1p=6(f,e){H J.X(e[0])};15.Z.W=6(f,e){H J.X(e)};15.Z.X=6(f){K e=n.X.1p(J,14),a;I(e){I(!x&&e.L>1&&p(e,"")>-1){a=15(J.1m,n.Q.W(t(J),"g",""));n.Q.W(f.1a(e.P),a,6(){O(K c=1;c<14.L-2;c++)I(14[c]===1d)e[c]=1d})}I(J.1w&&J.1w.19)O(K b=1;b<e.L;b++)I(a=J.1w.19[b-1])e[a]=e[b];!D&&J.1J&&!e[0].L&&J.12>e.P&&J.12--}H e};I(!D)15.Z.1A=6(f){(f=n.X.W(J,f))&&J.1J&&!f[0].L&&J.12>f.P&&J.12--;H!!f};1r.Z.1C=6(f){M.1R(f)||(f=15(f));I(f.1J){K e=n.1C.1p(J,14);f.12=0;H e}H f.X(J)};1r.Z.Q=6(f,e){K a=M.1R(f),b,c;I(a&&1j e.58()==="3f"&&e.1i("${")===-1&&y)H n.Q.1p(J,14);I(a){I(f.1w)b=f.1w.19}Y f+="";I(1j e==="6")c=n.Q.W(J,f,6(){I(b){14[0]=1f 1r(14[0]);O(K d=0;d<b.L;d++)I(b[d])14[0][b[d]]=14[d+1]}I(a&&f.1J)f.12=14[14.L-2]+14[0].L;H e.1p(N,14)});Y{c=J+"";c=n.Q.W(c,f,6(){K d=14;H n.Q.W(e,C,6(h,g,i){I(g)5b(g){24"$":H"$";24"&":H d[0];24"`":H d[d.L-1].1a(0,d[d.L-2]);24"\\'":H d[d.L-1].1a(d[d.L-2]+d[0].L);5a:i="";g=+g;I(!g)H h;O(;g>d.L-3;){i=1r.Z.1a.W(g,-1)+i;g=1Q.3i(g\/10)}H(g?d[g]||"":"$")+i}Y{g=+i;I(g<=d.L-3)H d[g];g=b?p(b,i):-1;H g>-1?d[g+1]:h}})})}I(a&&f.1J)f.12=0;H c};1r.Z.1e=6(f,e){I(!M.1R(f))H n.1e.1p(J,14);K a=J+"",b=[],c=0,d,h;I(e===1d||+e<0)e=5D;Y{e=1Q.3i(+e);I(!e)H[]}O(f=M.3c(f);d=f.X(a);){I(f.12>c){b.U(a.1a(c,d.P));d.L>1&&d.P<a.L&&3b.Z.U.1p(b,d.1a(1));h=d[0].L;c=f.12;I(b.L>=e)1N}f.12===d.P&&f.12++}I(c===a.L){I(!n.1A.W(f,"")||h)b.U("")}Y b.U(a.1a(c));H b.L>e?b.1a(0,e):b};M.1h(\/\\\\(\\\\?#[^)]*\\\\)\/,6(f){H n.1A.W(A,f.2S.1a(f.P+f[0].L))?"":"(?:)"});M.1h(\/\\\\((?!\\\\?)\/,6(){J.19.U(N);H"("});M.1h(\/\\\\(\\\\?<([$\\\\w]+)>\/,6(f){J.19.U(f[1]);J.2N=R;H"("});M.1h(\/\\\\\\\\k<([\\\\w$]+)>\/,6(f){K e=p(J.19,f[1]);H e>-1?"\\\\\\\\"+(e+1)+(3R(f.2S.3a(f.P+f[0].L))?"":"(?:)"):f[0]});M.1h(\/\\\\[\\\\^?]\/,6(f){H f[0]==="[]"?"\\\\\\\\b\\\\\\\\B":"[\\\\\\\\s\\\\\\\\S]"});M.1h(\/^\\\\(\\\\?([5A]+)\\\\)\/,6(f){J.3d(f[1]);H""});M.1h(\/(?:\\\\s+|#.*)+\/,6(f){H n.1A.W(A,f.2S.1a(f.P+f[0].L))?"":"(?:)"},M.1B,6(){H J.2K("x")});M.1h(\/\\\\.\/,6(){H"[\\\\\\\\s\\\\\\\\S]"},M.1B,6(){H J.2K("s")})})();1j 2e!="1d"&&(2e.M=M);K 1v=6(){6 r(a,b){a.1l.1i(b)!=-1||(a.1l+=" "+b)}6 t(a){H a.1i("3e")==0?a:"3e"+a}6 B(a){H e.1Y.2A[t(a)]}6 p(a,b,c){I(a==N)H N;K d=c!=R?a.3G:[a.2G],h={"#":"1c",".":"1l"}[b.1o(0,1)]||"3h",g,i;g=h!="3h"?b.1o(1):b.5u();I((a[h]||"").1i(g)!=-1)H a;O(a=0;d&&a<d.L&&i==N;a++)i=p(d[a],b,c);H i}6 C(a,b){K c={},d;O(d 2g a)c[d]=a[d];O(d 2g b)c[d]=b[d];H c}6 w(a,b,c,d){6 h(g){g=g||1P.5y;I(!g.1F){g.1F=g.52;g.3N=6(){J.5w=11}}c.W(d||1P,g)}a.3g?a.3g("4U"+b,h):a.4y(b,h,11)}6 A(a,b){K c=e.1Y.2j,d=N;I(c==N){c={};O(K h 2g e.1U){K g=e.1U[h];d=g.4x;I(d!=N){g.1V=h.4w();O(g=0;g<d.L;g++)c[d[g]]=h}}e.1Y.2j=c}d=e.1U[c[a]];d==N&&b!=11&&1P.1X(e.13.1x.1X+(e.13.1x.3E+a));H d}6 v(a,b){O(K c=a.1e("\\\\n"),d=0;d<c.L;d++)c[d]=b(c[d],d);H c.1K("\\\\n")}6 u(a,b){I(a==N||a.L==0||a=="\\\\n")H a;a=a.Q(\/<\\\/g,"&1y;");a=a.Q(\/ {2,}\/g,6(c){O(K d="",h=0;h<c.L-1;h++)d+=e.13.1W;H d+" "});I(b!=N)a=v(a,6(c){I(c.L==0)H"";K d="";c=c.Q(\/^(&2s;| )+\/,6(h){d=h;H""});I(c.L==0)H d;H d+\\'<17 1g="\\'+b+\\'">\\'+c+"<\\\/17>"});H a}6 n(a,b){a.1e("\\\\n");O(K c="",d=0;d<50;d++)c+="                    ";H a=v(a,6(h){I(h.1i("\\\\t")==-1)H h;O(K g=0;(g=h.1i("\\\\t"))!=-1;)h=h.1o(0,g)+c.1o(0,b-g%b)+h.1o(g+1,h.L);H h})}6 x(a){H a.Q(\/^\\\\s+|\\\\s+$\/g,"")}6 D(a,b){I(a.P<b.P)H-1;Y I(a.P>b.P)H 1;Y I(a.L<b.L)H-1;Y I(a.L>b.L)H 1;H 0}6 y(a,b){6 c(k){H k[0]}O(K d=N,h=[],g=b.2D?b.2D:c;(d=b.1I.X(a))!=N;){K i=g(d,b);I(1j i=="3f")i=[1f e.2L(i,d.P,b.23)];h=h.1O(i)}H h}6 E(a){K b=\/(.*)((&1G;|&1y;).*)\/;H a.Q(e.3A.3M,6(c){K d="",h=N;I(h=b.X(c)){c=h[1];d=h[2]}H\\'<a 2h="\\'+c+\\'">\\'+c+"<\\\/a>"+d})}6 z(){O(K a=1E.36("1k"),b=[],c=0;c<a.L;c++)a[c].3s=="20"&&b.U(a[c]);H b}6 f(a){a=a.1F;K b=p(a,".20",R);a=p(a,".3O",R);K c=1E.4i("3t");I(!(!a||!b||p(a,"3t"))){B(b.1c);r(b,"1m");O(K d=a.3G,h=[],g=0;g<d.L;g++)h.U(d[g].4z||d[g].4A);h=h.1K("\\\\r");c.39(1E.4D(h));a.39(c);c.2C();c.4C();w(c,"4u",6(){c.2G.4E(c);b.1l=b.1l.Q("1m","")})}}I(1j 3F!="1d"&&1j M=="1d")M=3F("M").M;K e={2v:{"1g-27":"","2i-1s":1,"2z-1s-2t":11,1M:N,1t:N,"42-45":R,"43-22":4,1u:R,16:R,"3V-17":R,2l:11,"41-40":R,2k:11,"1z-1k":11},13:{1W:"&2s;",2M:R,46:11,44:11,34:"4n",1x:{21:"4o 1m",2P:"?",1X:"1v\\\\n\\\\n",3E:"4r\\'t 4t 1D O: ",4g:"4m 4B\\'t 51 O 1z-1k 4F: ",37:\\'<!4T 1z 4S "-\/\/4V\/\/3H 4W 1.0 4Z\/\/4Y" "1Z:\/\/2y.3L.3K\/4X\/3I\/3H\/3I-4P.4J"><1z 4I="1Z:\/\/2y.3L.3K\/4L\/5L"><3J><4N 1Z-4M="5G-5M" 6K="2O\/1z; 6J=6I-8" \/><1t>6L 1v<\\\/1t><\\\/3J><3B 1L="25-6M:6Q,6P,6O,6N-6F;6y-2f:#6x;2f:#6w;25-22:6v;2O-3D:3C;"><T 1L="2O-3D:3C;3w-32:1.6z;"><T 1L="25-22:6A-6E;">1v<\\\/T><T 1L="25-22:.6C;3w-6B:6R;"><T>3v 3.0.76 (72 73 3x)<\\\/T><T><a 2h="1Z:\/\/3u.2w\/1v" 1F="38" 1L="2f:#3y">1Z:\/\/3u.2w\/1v<\\\/a><\\\/T><T>70 17 6U 71.<\\\/T><T>6T 6X-3x 6Y 6D.<\\\/T><\\\/T><T>6t 61 60 J 1k, 5Z <a 2h="6u:\/\/2y.62.2w\/63-66\/65?64=5X-5W&5P=5O" 1L="2f:#3y">5R<\\\/a> 5V <2R\/>5U 5T 5S!<\\\/T><\\\/T><\\\/3B><\\\/1z>\\'}},1Y:{2j:N,2A:{}},1U:{},3A:{6n:\/\\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\\/\/2c,6m:\/\\\\\/\\\\\/.*$\/2c,6l:\/#.*$\/2c,6k:\/"([^\\\\\\\\"\\\\n]|\\\\\\\\.)*"\/g,6o:\/\\'([^\\\\\\\\\\'\\\\n]|\\\\\\\\.)*\\'\/g,6p:1f M(\\'"([^\\\\\\\\\\\\\\\\"]|\\\\\\\\\\\\\\\\.)*"\\',"3z"),6s:1f M("\\'([^\\\\\\\\\\\\\\\\\\']|\\\\\\\\\\\\\\\\.)*\\'","3z"),6q:\/(&1y;|<)!--[\\\\s\\\\S]*?--(&1G;|>)\/2c,3M:\/\\\\w+:\\\\\/\\\\\/[\\\\w-.\\\\\/?%&=:@;]*\/g,6a:{18:\/(&1y;|<)\\\\?=?\/g,1b:\/\\\\?(&1G;|>)\/g},69:{18:\/(&1y;|<)%=?\/g,1b:\/%(&1G;|>)\/g},6d:{18:\/(&1y;|<)\\\\s*1k.*?(&1G;|>)\/2T,1b:\/(&1y;|<)\\\\\/\\\\s*1k\\\\s*(&1G;|>)\/2T}},16:{1H:6(a){6 b(i,k){H e.16.2o(i,k,e.13.1x[k])}O(K c=\\'<T 1g="16">\\',d=e.16.2x,h=d.2X,g=0;g<h.L;g++)c+=(d[h[g]].1H||b)(a,h[g]);c+="<\\\/T>";H c},2o:6(a,b,c){H\\'<2W><a 2h="#" 1g="6e 6h\\'+b+" "+b+\\'">\\'+c+"<\\\/a><\\\/2W>"},2b:6(a){K b=a.1F,c=b.1l||"";b=B(p(b,".20",R).1c);K d=6(h){H(h=15(h+"6f(\\\\\\\\w+)").X(c))?h[1]:N}("6g");b&&d&&e.16.2x[d].2B(b);a.3N()},2x:{2X:["21","2P"],21:{1H:6(a){I(a.V("2l")!=R)H"";K b=a.V("1t");H e.16.2o(a,"21",b?b:e.13.1x.21)},2B:6(a){a=1E.6j(t(a.1c));a.1l=a.1l.Q("47","")}},2P:{2B:6(){K a="68=0";a+=", 18="+(31.30-33)\/2+", 32="+(31.2Z-2Y)\/2+", 30=33, 2Z=2Y";a=a.Q(\/^,\/,"");a=1P.6Z("","38",a);a.2C();K b=a.1E;b.6W(e.13.1x.37);b.6V();a.2C()}}}},35:6(a,b){K c;I(b)c=[b];Y{c=1E.36(e.13.34);O(K d=[],h=0;h<c.L;h++)d.U(c[h]);c=d}c=c;d=[];I(e.13.2M)c=c.1O(z());I(c.L===0)H d;O(h=0;h<c.L;h++){O(K g=c[h],i=a,k=c[h].1l,j=3W 0,l={},m=1f M("^\\\\\\\\[(?<2V>(.*?))\\\\\\\\]$"),s=1f M("(?<27>[\\\\\\\\w-]+)\\\\\\\\s*:\\\\\\\\s*(?<1T>[\\\\\\\\w-%#]+|\\\\\\\\[.*?\\\\\\\\]|\\\\".*?\\\\"|\\'.*?\\')\\\\\\\\s*;?","g");(j=s.X(k))!=N;){K o=j.1T.Q(\/^[\\'"]|[\\'"]$\/g,"");I(o!=N&&m.1A(o)){o=m.X(o);o=o.2V.L>0?o.2V.1e(\/\\\\s*,\\\\s*\/):[]}l[j.27]=o}g={1F:g,1n:C(i,l)};g.1n.1D!=N&&d.U(g)}H d},1M:6(a,b){K c=J.35(a,b),d=N,h=e.13;I(c.L!==0)O(K g=0;g<c.L;g++){b=c[g];K i=b.1F,k=b.1n,j=k.1D,l;I(j!=N){I(k["1z-1k"]=="R"||e.2v["1z-1k"]==R){d=1f e.4l(j);j="4O"}Y I(d=A(j))d=1f d;Y 6H;l=i.3X;I(h.2M){l=l;K m=x(l),s=11;I(m.1i("<![6G[")==0){m=m.4h(9);s=R}K o=m.L;I(m.1i("]]\\\\>")==o-3){m=m.4h(0,o-3);s=R}l=s?m:l}I((i.1t||"")!="")k.1t=i.1t;k.1D=j;d.2Q(k);b=d.2F(l);I((i.1c||"")!="")b.1c=i.1c;i.2G.74(b,i)}}},2E:6(a){w(1P,"4k",6(){e.1M(a)})}};e.2E=e.2E;e.1M=e.1M;e.2L=6(a,b,c){J.1T=a;J.P=b;J.L=a.L;J.23=c;J.1V=N};e.2L.Z.1q=6(){H J.1T};e.4l=6(a){6 b(j,l){O(K m=0;m<j.L;m++)j[m].P+=l}K c=A(a),d,h=1f e.1U.5Y,g=J,i="2F 1H 2Q".1e(" ");I(c!=N){d=1f c;O(K k=0;k<i.L;k++)(6(){K j=i[k];g[j]=6(){H h[j].1p(h,14)}})();d.28==N?1P.1X(e.13.1x.1X+(e.13.1x.4g+a)):h.2J.U({1I:d.28.17,2D:6(j){O(K l=j.17,m=[],s=d.2J,o=j.P+j.18.L,F=d.28,q,G=0;G<s.L;G++){q=y(l,s[G]);b(q,o);m=m.1O(q)}I(F.18!=N&&j.18!=N){q=y(j.18,F.18);b(q,j.P);m=m.1O(q)}I(F.1b!=N&&j.1b!=N){q=y(j.1b,F.1b);b(q,j.P+j[0].5Q(j.1b));m=m.1O(q)}O(j=0;j<m.L;j++)m[j].1V=c.1V;H m}})}};e.4j=6(){};e.4j.Z={V:6(a,b){K c=J.1n[a];c=c==N?b:c;K d={"R":R,"11":11}[c];H d==N?c:d},3Y:6(a){H 1E.4i(a)},4c:6(a,b){K c=[];I(a!=N)O(K d=0;d<a.L;d++)I(1j a[d]=="2m")c=c.1O(y(b,a[d]));H J.4e(c.6b(D))},4e:6(a){O(K b=0;b<a.L;b++)I(a[b]!==N)O(K c=a[b],d=c.P+c.L,h=b+1;h<a.L&&a[b]!==N;h++){K g=a[h];I(g!==N)I(g.P>d)1N;Y I(g.P==c.P&&g.L>c.L)a[b]=N;Y I(g.P>=c.P&&g.P<d)a[h]=N}H a},4d:6(a){K b=[],c=2u(J.V("2i-1s"));v(a,6(d,h){b.U(h+c)});H b},3U:6(a){K b=J.V("1M",[]);I(1j b!="2m"&&b.U==N)b=[b];a:{a=a.1q();K c=3W 0;O(c=c=1Q.6c(c||0,0);c<b.L;c++)I(b[c]==a){b=c;1N a}b=-1}H b!=-1},2r:6(a,b,c){a=["1s","6i"+b,"P"+a,"6r"+(b%2==0?1:2).1q()];J.3U(b)&&a.U("67");b==0&&a.U("1N");H\\'<T 1g="\\'+a.1K(" ")+\\'">\\'+c+"<\\\/T>"},3Q:6(a,b){K c="",d=a.1e("\\\\n").L,h=2u(J.V("2i-1s")),g=J.V("2z-1s-2t");I(g==R)g=(h+d-1).1q().L;Y I(3R(g)==R)g=0;O(K i=0;i<d;i++){K k=b?b[i]:h+i,j;I(k==0)j=e.13.1W;Y{j=g;O(K l=k.1q();l.L<j;)l="0"+l;j=l}a=j;c+=J.2r(i,k,a)}H c},49:6(a,b){a=x(a);K c=a.1e("\\\\n");J.V("2z-1s-2t");K d=2u(J.V("2i-1s"));a="";O(K h=J.V("1D"),g=0;g<c.L;g++){K i=c[g],k=\/^(&2s;|\\\\s)+\/.X(i),j=N,l=b?b[g]:d+g;I(k!=N){j=k[0].1q();i=i.1o(j.L);j=j.Q(" ",e.13.1W)}i=x(i);I(i.L==0)i=e.13.1W;a+=J.2r(g,l,(j!=N?\\'<17 1g="\\'+h+\\' 5N">\\'+j+"<\\\/17>":"")+i)}H a},4f:6(a){H a?"<4a>"+a+"<\\\/4a>":""},4b:6(a,b){6 c(l){H(l=l?l.1V||g:g)?l+" ":""}O(K d=0,h="",g=J.V("1D",""),i=0;i<b.L;i++){K k=b[i],j;I(!(k===N||k.L===0)){j=c(k);h+=u(a.1o(d,k.P-d),j+"48")+u(k.1T,j+k.23);d=k.P+k.L+(k.75||0)}}h+=u(a.1o(d),c()+"48");H h},1H:6(a){K b="",c=["20"],d;I(J.V("2k")==R)J.1n.16=J.1n.1u=11;1l="20";J.V("2l")==R&&c.U("47");I((1u=J.V("1u"))==11)c.U("6S");c.U(J.V("1g-27"));c.U(J.V("1D"));a=a.Q(\/^[ ]*[\\\\n]+|[\\\\n]*[ ]*$\/g,"").Q(\/\\\\r\/g," ");b=J.V("43-22");I(J.V("42-45")==R)a=n(a,b);Y{O(K h="",g=0;g<b;g++)h+=" ";a=a.Q(\/\\\\t\/g,h)}a=a;a:{b=a=a;h=\/<2R\\\\s*\\\\\/?>|&1y;2R\\\\s*\\\\\/?&1G;\/2T;I(e.13.46==R)b=b.Q(h,"\\\\n");I(e.13.44==R)b=b.Q(h,"");b=b.1e("\\\\n");h=\/^\\\\s*\/;g=4Q;O(K i=0;i<b.L&&g>0;i++){K k=b[i];I(x(k).L!=0){k=h.X(k);I(k==N){a=a;1N a}g=1Q.4q(k[0].L,g)}}I(g>0)O(i=0;i<b.L;i++)b[i]=b[i].1o(g);a=b.1K("\\\\n")}I(1u)d=J.4d(a);b=J.4c(J.2J,a);b=J.4b(a,b);b=J.49(b,d);I(J.V("41-40"))b=E(b);1j 2H!="1d"&&2H.3S&&2H.3S.1C(\/5s\/)&&c.U("5t");H b=\\'<T 1c="\\'+t(J.1c)+\\'" 1g="\\'+c.1K(" ")+\\'">\\'+(J.V("16")?e.16.1H(J):"")+\\'<3Z 5z="0" 5H="0" 5J="0">\\'+J.4f(J.V("1t"))+"<3T><3P>"+(1u?\\'<2d 1g="1u">\\'+J.3Q(a)+"<\\\/2d>":"")+\\'<2d 1g="17"><T 1g="3O">\\'+b+"<\\\/T><\\\/2d><\\\/3P><\\\/3T><\\\/3Z><\\\/T>"},2F:6(a){I(a===N)a="";J.17=a;K b=J.3Y("T");b.3X=J.1H(a);J.V("16")&&w(p(b,".16"),"5c",e.16.2b);J.V("3V-17")&&w(p(b,".17"),"56",f);H b},2Q:6(a){J.1c=""+1Q.5d(1Q.5n()*5k).1q();e.1Y.2A[t(J.1c)]=J;J.1n=C(e.2v,a||{});I(J.V("2k")==R)J.1n.16=J.1n.1u=11},5j:6(a){a=a.Q(\/^\\\\s+|\\\\s+$\/g,"").Q(\/\\\\s+\/g,"|");H"\\\\\\\\b(?:"+a+")\\\\\\\\b"},5f:6(a){J.28={18:{1I:a.18,23:"1k"},1b:{1I:a.1b,23:"1k"},17:1f M("(?<18>"+a.18.1m+")(?<17>.*?)(?<1b>"+a.1b.1m+")","5o")}}};H e}();1j 2e!="1d"&&(2e.1v=1v);',62,441,"||||||function|||||||||||||||||||||||||||||||||||||return|if|this|var|length|XRegExp|null|for|index|replace|true||div|push|getParam|call|exec|else|prototype||false|lastIndex|config|arguments|RegExp|toolbar|code|left|captureNames|slice|right|id|undefined|split|new|class|addToken|indexOf|typeof|script|className|source|params|substr|apply|toString|String|line|title|gutter|SyntaxHighlighter|_xregexp|strings|lt|html|test|OUTSIDE_CLASS|match|brush|document|target|gt|getHtml|regex|global|join|style|highlight|break|concat|window|Math|isRegExp|throw|value|brushes|brushName|space|log|vars|http|syntaxhighlighter|expandSource|size|css|case|font|Fa|name|htmlScript|dA|can|handler|gm|td|exports|color|in|href|first|discoveredBrushes|light|collapse|object|cache|getButtonHtml|trigger|pattern|getLineHtml|nbsp|numbers|parseInt|defaults|com|items|www|pad|highlighters|execute|focus|func|all|getDiv|parentNode|navigator|INSIDE_CLASS|regexList|hasFlag|Match|useScriptTags|hasNamedCapture|text|help|init|br|input|gi|Error|values|span|list|250|height|width|screen|top|500|tagName|findElements|getElementsByTagName|aboutDialog|_blank|appendChild|charAt|Array|copyAsGlobal|setFlag|highlighter_|string|attachEvent|nodeName|floor|backref|output|the|TypeError|sticky|Za|iterate|freezeTokens|scope|type|textarea|alexgorbatchev|version|margin|2010|005896|gs|regexLib|body|center|align|noBrush|require|childNodes|DTD|xhtml1|head|org|w3|url|preventDefault|container|tr|getLineNumbersHtml|isNaN|userAgent|tbody|isLineHighlighted|quick|void|innerHTML|create|table|links|auto|smart|tab|stripBrs|tabs|bloggerMode|collapsed|plain|getCodeLinesHtml|caption|getMatchesHtml|findMatches|figureOutLineNumbers|removeNestedMatches|getTitleHtml|brushNotHtmlScript|substring|createElement|Highlighter|load|HtmlScript|Brush|pre|expand|multiline|min|Can|ignoreCase|find|blur|extended|toLowerCase|aliases|addEventListener|innerText|textContent|wasn|select|createTextNode|removeChild|option|same|frame|xmlns|dtd|twice|1999|equiv|meta|htmlscript|transitional|1E3|expected|PUBLIC|DOCTYPE|on|W3C|XHTML|TR|EN|Transitional||configured|srcElement|Object|after|run|dblclick|matchChain|valueOf|constructor|default|switch|click|round|execAt|forHtmlScript|token|gimy|functions|getKeywords|1E6|escape|within|random|sgi|another|finally|supply|MSIE|ie|toUpperCase|catch|returnValue|definition|event|border|imsx|constructing|one|Infinity|from|when|Content|cellpadding|flags|cellspacing|try|xhtml|Type|spaces|2930402|hosted_button_id|lastIndexOf|donate|active|development|keep|to|xclick|_s|Xml|please|like|you|paypal|cgi|cmd|webscr|bin|highlighted|scrollbars|aspScriptTags|phpScriptTags|sort|max|scriptScriptTags|toolbar_item|_|command|command_|number|getElementById|doubleQuotedString|singleLinePerlComments|singleLineCComments|multiLineCComments|singleQuotedString|multiLineDoubleQuotedString|xmlComments|alt|multiLineSingleQuotedString|If|https|1em|000|fff|background|5em|xx|bottom|75em|Gorbatchev|large|serif|CDATA|continue|utf|charset|content|About|family|sans|Helvetica|Arial|Geneva|3em|nogutter|Copyright|syntax|close|write|2004|Alex|open|JavaScript|highlighter|July|02|replaceChild|offset|83".split("|"),0,{}));eval(function(n,t,i,r,u,f){if(u=function(n){return(n<t?"":u(parseInt(n\/t)))+((n=n%t)>35?String.fromCharCode(n+29):n.toString(36))},!"".replace(\/^\/,String)){while(i--)f[u(i)]=r[i]||u(i);r=[function(n){return f[n]}];u=function(){return"\\\\w+"};i=1}while(i--)r[i]&&(n=n.replace(new RegExp("\\\\b"+u(i)+"\\\\b","g"),r[i]));return n}('(2(){1 h=5;h.I=2(){2 n(c,a){4(1 d=0;d<c.9;d++)i[c[d]]=a}2 o(c){1 a=r.H("J"),d=3;a.K=c;a.M="L\/t";a.G="t";a.u=a.v=2(){6(!d&&(!8.7||8.7=="F"||8.7=="z")){d=q;e[c]=q;a:{4(1 p y e)6(e[p]==3)B a;j&&5.C(k)}a.u=a.v=x;a.D.O(a)}};r.N.R(a)}1 f=Q,l=h.P(),i={},e={},j=3,k=x,b;5.T=2(c){k=c;j=q};4(b=0;b<f.9;b++){1 m=f[b].w?f[b]:f[b].S(\/\\\\s+\/),g=m.w();n(m,g)}4(b=0;b<l.9;b++)6(g=i[l[b].E.A]){e[g]=3;o(g)}}})();',56,56,"|var|function|false|for|SyntaxHighlighter|if|readyState|this|length|||||||||||||||||true|document||javascript|onload|onreadystatechange|pop|null|in|complete|brush|break|highlight|parentNode|params|loaded|language|createElement|autoloader|script|src|text|type|body|removeChild|findElements|arguments|appendChild|split|all".split("|"),0,{}));$.ajaxSetup({type:"post",dataType:"json",contentType:"application\/json; charset=utf-8"});var isSyntaxHighlighted=!1,c_has_follwed=!1,comment_maxId=0,comment_maxDate="";window.alert=function(n){try{console.log("alert: "+n)}catch(t){}return!0};$.fn.extend({selection:function(){var n="",u=this.get(0).document,t,i,r;return u?(t=u.selection.createRange(),t.text.length>0&&(n=t.text)):(this.get(0).selectionStart||this.get(0).selectionStart=="0")&&(i=this.get(0).selectionStart,r=this.get(0).selectionEnd,i!=r&&(n=this.get(0).value.substring(i,r))),$.trim(n)},parseHtml:function(n){var t=this.get(0).document;if(t)this.get(0).focus(),t.selection.createRange().collapse,this.get(0).document.selection.createRange().text=n;else if(this.get(0).selectionStart||this.get(0).selectionStart=="0"){var r=this.get(0).selectionStart,u=this.get(0).selectionEnd,i=this.get(0).value,f=i.substring(0,r),e=i.substring(u);this.get(0).value=f+n+e}}});insertUBB=function(n,t){var i=$("#"+n).selection(),r;t!="quote"||i||(window.getSelection?i=window.getSelection().toString():document.getSelection?i=document.getSelection().toString():document.selection&&(i=document.selection.createRange().text),$("#"+n).focus());i?(r=t,t.indexOf("=")>=0&&(r=t.substring(0,t.indexOf("="))),$("#"+n).parseHtml("["+t+"]"+i+"[\/"+r+"]")):$("#tip_comment").html("请选择文字")};$(function(){var n=$("#cnblogs_post_body div.cnblogs_code"),i=\/^\\s*1\/gi,t=\/<br\\s*\\\/?>\/gi;n.length&&(loadEncoderJs(),$.each(n,function(){if(i.test($(this).text())){var n=$(this).html();$.browser.msie&&n.indexOf("<pre>")>-1&&t.test(n)&&(n=n.replace(t,"\\r\\n"),$(this).html(n))}showCopyCode(this)}))});$(function(){google_ga()})121{"commentCount":0,"commentsHtml":""}<div class="itnews c_ad_block"><b>最新IT新闻<\/b>:<br \/> ·  <a href="https:\/\/news.cnblogs.com\/n\/586051\/" target="_blank">万达网科大裁员后将转型AI 朱战备或接班曲德君<\/a><br \/> ·  <a href="https:\/\/news.cnblogs.com\/n\/586050\/" target="_blank">扎克伯格周游美国的真实目的：不是准备竞选总统<\/a><br \/> ·  <a href="https:\/\/news.cnblogs.com\/n\/586049\/" target="_blank">谷歌将在印兴建实体店 以提振Pixel销量<\/a><br \/> ·  <a href="https:\/\/news.cnblogs.com\/n\/586048\/" target="_blank">新版Flyme曝光：mBack改为虚拟键<\/a><br \/> ·  <a href="https:\/\/news.cnblogs.com\/n\/586047\/" target="_blank">除了致歉 今早苹果还发了篇锂电池知识普及贴<\/a><br \/>&raquo; <a href="http:\/\/news.cnblogs.com\/" title="IT新闻" target="_blank">更多新闻...<\/a><\/div><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章<\/b>:<br \/><div id="kb_recent"> ·  <a href="http:\/\/kb.cnblogs.com\/page\/585502\/" target="_blank">步入云计算<\/a><br \/> ·  <a href="http:\/\/kb.cnblogs.com\/page\/531409\/" target="_blank">以操作系统的角度述说线程与进程<\/a><br \/> ·  <a href="http:\/\/kb.cnblogs.com\/page\/141729\/" target="_blank">软件测试转型之路<\/a><br \/> ·  <a href="http:\/\/kb.cnblogs.com\/page\/177402\/" target="_blank">门内门外看招聘<\/a><br \/> ·  <a href="http:\/\/kb.cnblogs.com\/page\/112506\/" target="_blank">大道至简，职场上做人做事做管理<\/a><br \/><\/div>&raquo; <a href="http:\/\/kb.cnblogs.com\/" target="_blank">更多知识库文章...<\/a><\/div>{"Tags":"","Categories":"分类: \\u003ca href=\\"http:\/\/www.cnblogs.com\/pandachen\/category\/623743.html\\" target=\\"_blank\\"\\u003eLinux-Application\\u003c\/a\\u003e"}<a href="http:\/\/www.cnblogs.com\/pandachen\/p\/5346685.html" class="p_n_p_prefix">« <\/a> 上一篇：<a href="http:\/\/www.cnblogs.com\/pandachen\/p\/5346685.html" title="发布于2016-04-01 23:40">dd的用法<\/a><br \/><a href="http:\/\/www.cnblogs.com\/pandachen\/p\/5373204.html" class="p_n_p_prefix">» <\/a> 下一篇：<a href="http:\/\/www.cnblogs.com\/pandachen\/p\/5373204.html" title="发布于2016-04-10 00:33">lftp的用法<\/a><br \/>/;"	f
logFile	core/Logging.h	/^	std::string logFile;$/;"	m	class:tigerso::Logging
logPath	core/Logging.h	/^	std::string logPath;$/;"	m	class:tigerso::Logging
log_ptr	test/test_mutex.cpp	/^Logging* log_ptr = nullptr;$/;"	v
loop	net/EventsLoop.cpp	/^int EventsLoop::loop() {$/;"	f	class:tigerso::EventsLoop
loop_	net/Channel.h	/^    EventsLoop& loop_;$/;"	m	class:tigerso::Channel
loop_	net/EventsLoop.h	/^    bool loop_ = false;$/;"	m	class:tigerso::EventsLoop
loopmutex_	core/ThreadPool.h	/^    mutable ThreadMutex loopmutex_;$/;"	m	class:tigerso::ThreadPool
main	ssl/scripts/ca_converter.py	/^def main(explicitTrustOnly = True, trustServerAuth = True,$/;"	f
main	test/HttpFile/sendcontent.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	test/HttpFile/sendfile.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	test/HttpsServer.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/backup/deleteself.cc	/^int main() {$/;"	f
main	test/backup/http_proxy.cpp	/^int main() {$/;"	f
main	test/http_proxy.cpp	/^int main() {$/;"	f
main	test/https_client.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/https_lib/https_client.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/https_lib/https_server.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/https_server.cpp	/^int main(int argc, char **argv)$/;"	f
main	test/inter2hex.c	/^int main(int argc, char* argv[]) {$/;"	f
main	test/sendfile/sendfile.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	test/test_bind.cpp	/^int main() {$/;"	f
main	test/test_buffer.cpp	/^int main(){$/;"	f
main	test/test_dns.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test/test_http.cpp	/^int main() {$/;"	f
main	test/test_mutex.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test/test_ringbuffer.cpp	/^int main() {$/;"	f
main	test/test_thread.cpp	/^int main() {$/;"	f
main	util/main.cc	/^int main(int argc, char* argv[]) {$/;"	f
makeHttpProxyConnection	http/HttpProxy.cpp	/^HTTPPROXYCONNECTIONPTR HttpProxyLoop::makeHttpProxyConnection() {$/;"	f	class:tigerso::HttpProxyLoop
makeHttpProxyConnection	test/backup/http_proxy.cpp	/^   HTTPPROXYCONNECTIONPTR makeHttpProxyConnection() {$/;"	f	class:HttpProxyLoop	file:
makeSpace	net/Buffer.cpp	/^int Buffer::makeSpace(const size_t len) {$/;"	f	class:tigerso::Buffer
make_dirtree	core/SysUtil.cpp	/^int SysUtil::make_dirtree(const string& dirname)$/;"	f	class:tigerso::SysUtil
markTrade	http/HttpMessage.h	/^    virtual void markTrade() {$/;"	f	class:tigerso::HttpMessage
masterAfterHandle	http/HttpProxy.cpp	/^int HttpProxyLoop::masterAfterHandle(Socket& master) {$/;"	f	class:tigerso::HttpProxyLoop
masterAfterHandle	test/backup/http_proxy.cpp	/^     int masterAfterHandle(Socket& master) {$/;"	f	class:HttpProxyLoop
masterErrorHandle	http/HttpProxy.cpp	/^int HttpProxyLoop::masterErrorHandle(Socket& master) {$/;"	f	class:tigerso::HttpProxyLoop
masterErrorHandle	test/backup/http_proxy.cpp	/^     int masterErrorHandle(Socket& master) {$/;"	f	class:HttpProxyLoop
memory2Shared	dns/DNSCache.cpp	/^int DNSCache::memory2Shared() {$/;"	f	class:tigerso::DNSCache
message_	http/HttpParser.h	/^    HttpMessage* message_;$/;"	m	class:tigerso::HttpParser
method	http/lib/http_parser.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	struct:http_parser
method_	http/HttpMessage.h	/^    std::string method_;$/;"	m	class:tigerso::HttpRequest
method_strings	http/lib/http_parser.c	/^static const char *method_strings[] =$/;"	v	file:
mime	util/FileTypeDetector.h	/^    const char* mime;$/;"	m	struct:tigerso::ScanFileType
mime	util/FileTypes/FileTypeDetector.h	/^    const char* mime;$/;"	m	struct:tigerso::util::ScanFileType
mime_type	http/HttpBodyFile.h	/^    char mime_type[1024] = {0};$/;"	m	class:tigerso::HttpBodyFile
mine_type	test/HttpFile/HttpBodyFile.h	/^    char mine_type[1024];$/;"	m	class:HttpBodyFile
mode	http/HttpBodyFile.cpp	/^HttpBodyMode HttpBodyFile::mode() {$/;"	f	class:tigerso::HttpBodyFile
msgptr_	net/Buffer.h	/^    HttpMessage* msgptr_ = nullptr;$/;"	m	class:tigerso::Buffer
msockptr_	http/HttpProxy.h	/^    const SocketPtr msockptr_;$/;"	m	class:tigerso::HttpProxyLoop
msockptr_	test/backup/http_proxy.cpp	/^    const SOCKETPTR msockptr_;$/;"	m	class:HttpProxyLoop	file:
mutex	core/SysUtil.h	/^    pthread_mutex_t mutex;$/;"	m	struct:tigerso::shm_mutex_t
mutex_	core/Condition.h	/^    ThreadMutex& mutex_;$/;"	m	class:tigerso::Condition
mutex_	core/ThreadMutex.h	/^    pthread_mutex_t  mutex_;$/;"	m	class:tigerso::ThreadMutex
mutex_	core/ThreadPool.h	/^    mutable ThreadMutex mutex_;$/;"	m	class:tigerso::ThreadPool
mutex_	dns/DNSCache.h	/^    ShmMutex  mutex_; \/\/process-shared mutex$/;"	m	class:tigerso::DNSCache
mutex_ptr	core/SysUtil.h	/^    shm_mutex_t* mutex_ptr;$/;"	m	class:tigerso::ShmMutex
mutexattr	core/SysUtil.h	/^    pthread_mutexattr_t mutexattr;$/;"	m	struct:tigerso::shm_mutex_t
mytest	test/backup/deleteself.cc	/^    mytest(){}$/;"	f	class:mytest
mytest	test/backup/deleteself.cc	/^class mytest {$/;"	c	file:
name	core/CurrentThread.h	/^   inline const char* name() { return threadName_; }$/;"	f	namespace:tigerso::CurrentThread
name	core/Thread.h	/^    const std::string& name() { return name_; }$/;"	f	class:tigerso::Thread
name	http/lib/http_parser.c	/^  const char *name;$/;"	m	struct:__anon2	file:
name	util/FileTypeDetector.h	/^    const char* name;$/;"	m	struct:tigerso::ScanFileType
name	util/FileTypes/FileTypeDetector.h	/^    const char* name;$/;"	m	struct:tigerso::util::ScanFileType
name_	core/Thread.cpp	/^    std::string name_;$/;"	m	class:tigerso::ThreadData	file:
name_	core/Thread.h	/^    std::string name_="";$/;"	m	class:tigerso::Thread
name_	core/ThreadPool.h	/^    std::string name_;$/;"	m	class:tigerso::ThreadPool
needDeletedChannelSet_	net/EventsLoop.h	/^    std::set<Channel*> needDeletedChannelSet_;$/;"	m	class:tigerso::EventsLoop
needMoreData	http/HttpParser.h	/^    bool needMoreData() { return state_ != PARSE_COMPLETE; }$/;"	f	class:tigerso::HttpParser
next	net/TimeWheelEvent.h	/^    _TimeNode_st* next = nullptr;$/;"	m	struct:tigerso::TimeWheelEvent::_TimeNode_st
next	net/Upstream.h	/^    UpstreamNode* next = nullptr;$/;"	m	struct:tigerso::Upstream::UpstreamNode
next	test/TimedEvent.h	/^    TimeNodeSet* next = nullptr;$/;"	m	struct:TimeNode
nocopy	test/test_bind.cpp	/^    nocopy(){}$/;"	f	class:nocopy
nocopy	test/test_bind.cpp	/^class nocopy {$/;"	c	file:
nocopy_func	test/test_bind.cpp	/^typedef std::function<int(nocopy&)> nocopy_func;$/;"	t	file:
nocopyable	core/BaseClass.h	/^    nocopyable(){}$/;"	f	class:tigerso::nocopyable
nocopyable	core/BaseClass.h	/^class nocopyable {$/;"	c	namespace:tigerso
nonBlocking	core/tigerso.h	58;"	d
nonBlocking	test/File.h	14;"	d
nonBlocking	test/HttpFile/File.h	17;"	d
nonBlocking	test/HttpFile/sendcontent.cc	16;"	d	file:
nonBlocking	test/HttpFile/sendfile.cc	16;"	d	file:
nonBlocking	test/sendfile/File.h	14;"	d
nonBlocking	test/sendfile/sendfile.cc	16;"	d	file:
normal_url_char	http/lib/http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	file:
notEmpty	core/ThreadPool.h	/^    bool notEmpty = false;$/;"	m	class:tigerso::ThreadPool
notEmpty_	core/ThreadPool.h	/^    Condition notEmpty_;$/;"	m	class:tigerso::ThreadPool
notFull	core/ThreadPool.h	/^    bool notFull = true;$/;"	m	class:tigerso::ThreadPool
notFull_	core/ThreadPool.h	/^    Condition notFull_;$/;"	m	class:tigerso::ThreadPool
notify	core/Condition.h	/^    void notify() {$/;"	f	class:tigerso::Condition
notifyAll	core/Condition.h	/^    void notifyAll() {$/;"	f	class:tigerso::Condition
nread	http/lib/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser
numCreated	core/Thread.h	/^    static int numCreated() { return numCreated_.load(); }$/;"	f	class:tigerso::Thread
numCreated_	core/Thread.h	/^    static std::atomic<int> numCreated_;$/;"	m	class:tigerso::Thread
off	http/lib/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon1
offset_t	dns/DNSCache.h	/^typedef unsigned int offset_t;$/;"	t	namespace:tigerso
offsets	net/Upstream.h	/^    time_t offsets[10] = {-1};$/;"	m	struct:tigerso::Upstream::UpstreamNode
on_body	http/HttpParser.cpp	/^int HttpParser::on_body(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_body	http/lib/http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings
on_chunk_complete	http/lib/http_parser.h	/^  http_cb      on_chunk_complete;$/;"	m	struct:http_parser_settings
on_chunk_header	http/lib/http_parser.h	/^  http_cb      on_chunk_header;$/;"	m	struct:http_parser_settings
on_header_field	http/HttpParser.cpp	/^int HttpParser::on_header_field(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_header_field	http/lib/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings
on_header_value	http/HttpParser.cpp	/^int HttpParser::on_header_value(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_header_value	http/lib/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings
on_headers_complete	http/HttpParser.cpp	/^int HttpParser::on_headers_complete(http_parser* parser) {$/;"	f	class:tigerso::HttpParser
on_headers_complete	http/lib/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings
on_message_begin	http/HttpParser.cpp	/^int HttpParser::on_message_begin(http_parser* parser) {$/;"	f	class:tigerso::HttpParser
on_message_begin	http/lib/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings
on_message_complete	http/HttpParser.cpp	/^int HttpParser::on_message_complete(http_parser* parser) {$/;"	f	class:tigerso::HttpParser
on_message_complete	http/lib/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings
on_status	http/HttpParser.cpp	/^int HttpParser::on_status(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_status	http/lib/http_parser.h	/^  http_data_cb on_status;$/;"	m	struct:http_parser_settings
on_url	http/HttpParser.cpp	/^int HttpParser::on_url(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::HttpParser
on_url	http/lib/http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings
operator <	net/Socket.cpp	/^bool Socket::operator<(const Socket& sock) const {$/;"	f	class:tigerso::Socket
operator =	core/SysUtil.cpp	/^ShmMutex ShmMutex::operator=(const ShmMutex& mutex)$/;"	f	class:tigerso::ShmMutex
operator =	dns/DNSResolver.h	/^    DNSResolver& operator=(const DNSResolver&){}$/;"	f	class:tigerso::DNSResolver
operator ==	net/Socket.cpp	/^bool Socket::operator==(const Socket& sock) const {$/;"	f	class:tigerso::Socket
operator ==	net/Socket.cpp	/^bool Socket::operator==(const socket_t& fd) const {$/;"	f	class:tigerso::Socket
operator >	net/Socket.cpp	/^bool Socket::operator>(const Socket& sock) const {$/;"	f	class:tigerso::Socket
operator int	net/Socket.h	/^    operator int() const { return sockfd_; }$/;"	f	class:tigerso::Socket
outBuffer_	net/Socket.h	/^    std::shared_ptr<Buffer> outBuffer_ = std::make_shared<Buffer>();$/;"	m	class:tigerso::Socket
out_	net/Socket.h	/^    std::weak_ptr<Buffer> out_;$/;"	m	struct:tigerso::BufferPtr
owner_	core/ThreadMutex.h	/^        ThreadMutex& owner_;$/;"	m	class:tigerso::ThreadMutex::UnassignGuard
pInstance	core/BaseClass.h	/^    static singleton* pInstance; $/;"	m	class:tigerso::singleton
pInstance	core/ConfigParser.cpp	/^ConfigParser* ConfigParser::pInstance = NULL;$/;"	m	class:tigerso::ConfigParser	file:
pInstance	core/ConfigParser.h	/^	static ConfigParser* pInstance;$/;"	m	class:tigerso::ConfigParser
pInstance	core/Logging.cpp	/^Logging* Logging::pInstance = NULL;$/;"	m	class:tigerso::Logging	file:
pInstance	core/Logging.h	/^	static Logging* pInstance;$/;"	m	class:tigerso::Logging
pInstance_	dns/DNSCache.cpp	/^DNSCache* DNSCache::pInstance_ = nullptr;$/;"	m	class:tigerso::DNSCache	file:
pInstance_	dns/DNSCache.h	/^    static DNSCache* pInstance_;$/;"	m	class:tigerso::DNSCache
packDNSQuery	dns/DNSResolver.cpp	/^int DNSResolver::packDNSQuery(const char* query_name, size_t len) {$/;"	f	class:tigerso::DNSResolver
parse	http/HttpParser.cpp	/^int HttpParser::parse(const char* buf,size_t len, HttpMessage& message) {$/;"	f	class:tigerso::HttpParser
parse	http/HttpParser.cpp	/^int HttpParser::parse(const std::string& buffer, HttpMessage& message) {$/;"	f	class:tigerso::HttpParser
parseMultlineOctal	ssl/scripts/ca_converter.py	/^def parseMultlineOctal(lines, num):$/;"	f
parseNSSFile	ssl/scripts/ca_converter.py	/^def parseNSSFile(explicitTrustOnly = True, trustServerAuth = True,$/;"	f
parse_url_char	http/lib/http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	file:
parsedn_	http/HttpParser.h	/^    size_t parsedn_;$/;"	m	class:tigerso::HttpParser
parser	test/test_http.cpp	/^HttpParser parser;$/;"	v
parser_	http/HttpParser.h	/^    http_parser parser_;$/;"	m	class:tigerso::HttpParser
pe	test/backup/deleteself.cc	/^    peer* pe;$/;"	m	class:mytest	file:
peer	test/backup/deleteself.cc	/^    peer() {}$/;"	f	class:peer
peer	test/backup/deleteself.cc	/^class peer {$/;"	c	file:
peerIPstr_	test/test_http.cpp	/^    string peerIPstr_;$/;"	m	class:TcpConnection	file:
perpareSSLContext	net/Socket.cpp	/^int Socket::perpareSSLContext() {$/;"	f	class:tigerso::Socket
pid	test/test_mutex.cpp	/^    pid_t pid;$/;"	m	struct:share_count	file:
port	http/lib/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url
port	net/Upstream.h	/^    unsigned int port = 0;  $/;"	m	struct:tigerso::Upstream::UpstreamNode
port_	http/HttpMessage.h	/^    std::string port_;$/;"	m	class:tigerso::HttpRequest
port_	http/HttpProxy.h	/^    const std::string port_;$/;"	m	class:tigerso::HttpProxyLoop
port_	net/Socket.h	/^    std::string port_;$/;"	m	class:tigerso::Socket
port_	test/backup/http_proxy.cpp	/^    std::string port_;$/;"	m	class:HttpProxyLoop	file:
port_	test/test_http.cpp	/^    string port_;$/;"	m	class:ProxyConnection	file:
port_	test/test_http.cpp	/^    string port_;$/;"	m	class:TcpConnection	file:
pr2six	http/lib/base64.c	/^static const unsigned char pr2six[256] =$/;"	v	file:
prefix_	net/Buffer.h	/^    const size_t prefix_;$/;"	m	class:tigerso::Buffer
prefreeBytes	net/Buffer.cpp	/^size_t Buffer::prefreeBytes() const {$/;"	f	class:tigerso::Buffer
pregap	net/Buffer.h	/^    static const size_t pregap = 8;$/;"	m	class:tigerso::Buffer
prepare200Response	http/HttpMessage.cpp	/^int HttpHelper::prepare200Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepare400Response	http/HttpMessage.cpp	/^int HttpHelper::prepare400Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepare403Response	http/HttpMessage.cpp	/^int HttpHelper::prepare403Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepare503Response	http/HttpMessage.cpp	/^int HttpHelper::prepare503Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepare504Response	http/HttpMessage.cpp	/^int HttpHelper::prepare504Response(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
prepareDNSErrorResponse	http/HttpMessage.cpp	/^int HttpHelper::prepareDNSErrorResponse(HttpResponse& response) {$/;"	f	class:tigerso::HttpHelper
primary_addr_	dns/DNSResolver.cpp	/^std::string DNSResolver::primary_addr_ = DNS_SERVER_ADDR;$/;"	m	class:tigerso::DNSResolver	file:
primary_addr_	dns/DNSResolver.h	/^    static std::string primary_addr_;$/;"	m	class:tigerso::DNSResolver
printInfo	net/Buffer.cpp	/^void Buffer::printInfo() const {$/;"	f	class:tigerso::Buffer
printInfo	test/test_buffer.cpp	/^void printInfo() {$/;"	f
print_class	test/test_bind.cpp	/^int print_class(nocopy_func func, nocopy& copy) {$/;"	f
print_share_count	test/test_mutex.cpp	/^void print_share_count() {$/;"	f
printchar	test/HttpFile/RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
printchar	test/RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
printchar	test/sendfile/RingBuffer.h	/^void printchar(char* buf, size_t len) {$/;"	f
printlist	net/TimeWheelEvent.cpp	/^void TimeWheelEvent::printlist() {$/;"	f	class:tigerso::TimeWheelEvent
ptlogin2_onClose	test/HttpFile/index.html	/^	function ptlogin2_onClose(){$/;"	f
ptlogin2_onResize	test/HttpFile/index.html	/^	function ptlogin2_onResize(width, height) {$/;"	f
queryDNSCache	dns/DNSResolver.cpp	/^int DNSResolver::queryDNSCache(const std::string& host, std::string& ipaddr) {$/;"	f	class:tigerso::DNSResolver
queryIP	dns/DNSCache.cpp	/^int DNSCache::queryIP(const char* host, char* ipaddr, size_t len) {$/;"	f	class:tigerso::DNSCache
queryIP	test/test_dns.cpp	/^int queryIP(const char* host) {$/;"	f
query_buf_	dns/DNSResolver.h	/^    unsigned char query_buf_ [DNS_MESSAGE_LIMIT] = {0};$/;"	m	class:tigerso::DNSResolver
query_name_	dns/DNSResolver.h	/^    std::string query_name_;$/;"	m	class:tigerso::DNSResolver
questions	dns/DNSResolver.h	/^    unsigned short questions;$/;"	m	struct:tigerso::DNSHeader
rdhup_cb	net/Channel.h	/^    EventFunc rdhup_cb = nullptr;$/;"	m	class:tigerso::Channel
readCallback	test/test_http.cpp	/^int readCallback(SocketPtr& sockptr) {$/;"	f
readFlag	net/Channel.h	/^        bool readFlag;$/;"	m	struct:tigerso::Channel::__anon4
readIdx_	net/Buffer.h	/^    size_t readIdx_;$/;"	m	class:tigerso::Buffer
readOut	core/File.cpp	/^ssize_t File::readOut(char* buf, size_t len, off_t& offset) {$/;"	f	class:tigerso::File
readOut	net/RingBuffer.cpp	/^int RingBuffer::readOut(char* buf, size_t len) {$/;"	f	class:tigerso::RingBuffer
readOut	net/RingBuffer.cpp	/^int RingBuffer::readOut(int fd) {$/;"	f	class:tigerso::RingBuffer
readOut	test/File.cpp	/^ssize_t File::readOut(char* buf, size_t len) {$/;"	f	class:File
readOut	test/HttpFile/File.cpp	/^ssize_t File::readOut(char* buf, size_t len, off_t& offset) {$/;"	f	class:File
readOut	test/HttpFile/RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut	test/HttpFile/RingBuffer.h	/^    int readOut(int fd) {$/;"	f	class:RingBuffer
readOut	test/RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut	test/RingBuffer.h	/^    int readOut(int fd) {$/;"	f	class:RingBuffer
readOut	test/sendfile/File.cpp	/^ssize_t File::readOut(char* buf, size_t len) {$/;"	f	class:File
readOut	test/sendfile/RingBuffer.h	/^    int readOut(char* buf, size_t len) {$/;"	f	class:RingBuffer
readOut2File	net/RingBuffer.cpp	/^int RingBuffer::readOut2File(File& file) {$/;"	f	class:tigerso::RingBuffer
readOut2File	test/HttpFile/RingBuffer.h	/^    int readOut2File(File& file) {$/;"	f	class:RingBuffer
readOut2File	test/RingBuffer.h	/^    int readOut2File(File& file) {$/;"	f	class:RingBuffer
readableBytes	net/Buffer.cpp	/^size_t Buffer::readableBytes() const {$/;"	f	class:tigerso::Buffer
readable_cb	net/Channel.h	/^    EventFunc readable_cb = nullptr;$/;"	m	class:tigerso::Channel
readdone_	core/File.h	/^    bool readdone_ = false;$/;"	m	class:tigerso::File
recv	ssl/SSLContext.cpp	/^int SSLContext::recv(void* buf, size_t len, size_t* readn) {$/;"	f	class:tigerso::SSLContext
recv	test/HttpFile/client.py	/^    def recv(self):$/;"	m	class:client
recv	test/SSLContex.h	/^    int recv(void* buf, size_t len, size_t* readn) {$/;"	f	class:HttpsContext
recv	test/https_lib/SSLContext.cpp	/^    int recv(void* buf, size_t len, size_t* readn) {$/;"	f	class:SSLContext::HttpsContext
recvAnswer	dns/DNSResolver.cpp	/^int DNSResolver::recvAnswer(Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
recvFromSocket	net/Buffer.cpp	/^int Buffer::recvFromSocket(Socket& mcsock) {$/;"	f	class:tigerso::Buffer
recvNIO	net/Socket.cpp	/^ssize_t Socket::recvNIO() {$/;"	f	class:tigerso::Socket
refer_num	core/SysUtil.h	/^    int refer_num;$/;"	m	struct:tigerso::shm_mutex_t
register2EventsLoop	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::register2EventsLoop(EventsLoop& loop) {$/;"	f	class:tigerso::TimeWheelEvent
registerChannel	net/EventsLoop.cpp	/^int EventsLoop::registerChannel(Socket& socket) {$/;"	f	class:tigerso::EventsLoop
registerFunctionsForHttpProxyConnection	http/HttpProxy.cpp	/^void HttpProxyLoop::registerFunctionsForHttpProxyConnection(HttpProxyConnection& hpc) {$/;"	f	class:tigerso::HttpProxyLoop
registerFunctionsForHttpProxyConnection	test/backup/http_proxy.cpp	/^    void registerFunctionsForHttpProxyConnection(HttpProxyConnection& hpc) {$/;"	f	class:HttpProxyLoop	file:
registerSocket	http/HttpProxy.cpp	/^int HttpProxyLoop::registerSocket(Socket& sock) {$/;"	f	class:tigerso::HttpProxyLoop
registerSocket	test/backup/http_proxy.cpp	/^    int registerSocket(Socket& sock) {$/;"	f	class:HttpProxyLoop
registerSocket	test/http_server.cpp	/^    int registerSocket(Socket& socket) {$/;"	f	class:HttpServer	file:
register_func_	http/HttpProxy.h	/^    EventFunc register_func_ = nullptr;$/;"	m	class:tigerso::HttpProxyConnection
register_func_	test/backup/http_proxy.cpp	/^    EventFunc register_func_ = nullptr;$/;"	m	class:HttpProxyConnection	file:
reload	core/ConfigParser.cpp	/^int ConfigParser::reload() {$/;"	f	class:tigerso::ConfigParser
remove	net/Channel.cpp	/^void Channel::remove() {$/;"	f	class:tigerso::Channel
removeChannel	net/EventsLoop.cpp	/^int EventsLoop::removeChannel(Channel* cnptr) {$/;"	f	class:tigerso::EventsLoop
removeData	net/Buffer.cpp	/^size_t Buffer::removeData(std::string& data, const size_t len) {$/;"	f	class:tigerso::Buffer
removeHeader	http/HttpMessage.h	/^    virtual void removeHeader(const std::string& header) {$/;"	f	class:tigerso::HttpMessage
removeRepeatHeader	http/HttpMessage.h	/^    virtual void removeRepeatHeader() {$/;"	f	class:tigerso::HttpMessage
remove_file	core/SysUtil.cpp	/^int SysUtil::remove_file(const string& file)$/;"	f	class:tigerso::SysUtil
request	http/HttpProxy.h	/^    HttpRequest request;$/;"	m	struct:tigerso::HttpProxyConnection::HttpTransaction
request	test/backup/http_proxy.cpp	/^    HttpRequest request;$/;"	m	struct:HttpProxyConnection::HttpTransaction	file:
requestCallbacks_	http/HttpMessage.h	/^    std::map<std::string, httpInspectCallback> requestCallbacks_;$/;"	m	class:tigerso::HttpInSpection
reset	core/File.h	/^    inline void reset() { ::close(fd_); fd_ = -1; size_ = 0; cur_ = 0; }$/;"	f	class:tigerso::File
reset	http/HttpBodyFile.cpp	/^void HttpBodyFile::reset() {$/;"	f	class:tigerso::HttpBodyFile
reset	http/HttpParser.cpp	/^void HttpParser::reset() {$/;"	f	class:tigerso::HttpParser
reset	net/Socket.cpp	/^void Socket::reset() {$/;"	f	class:tigerso::Socket
reset	test/File.h	/^    inline void reset() { fd_ = -1; size_ = 0; cur_ = 0; bzero(filename_, FILE_NAME_MAX_LENGTH); }$/;"	f	class:File
reset	test/HttpFile/File.h	/^    inline void reset() { ::close(fd_); fd_ = -1; size_ = 0; cur_ = 0; }$/;"	f	class:File
reset	test/HttpFile/HttpBodyFile.h	/^    void reset() {$/;"	f	class:HttpBodyFile
reset	test/RingBuffer.h	/^    void reset() {$/;"	f	class:RingBuffer
reset	test/sendfile/File.h	/^    inline void reset() { fd_ = -1; size_ = 0; cur_ = 0; bzero(filename_, FILE_NAME_MAX_LENGTH); }$/;"	f	class:File
reset	test/sendfile/RingBuffer.h	/^    void reset() {$/;"	f	class:RingBuffer
resetFlag	net/Channel.cpp	/^void Channel::resetFlag() {$/;"	f	class:tigerso::Channel
resolveRR	dns/DNSResolver.cpp	/^int DNSResolver::resolveRR(unsigned char* buf, size_t buf_len, unsigned char* curp, unsigned char* name, size_t name_len, unsigned short* type, unsigned short* rclass, time_t* ttl, unsigned char* rdata) {$/;"	f	class:tigerso::DNSResolver
resolveRRName	dns/DNSResolver.cpp	/^int DNSResolver::resolveRRName(unsigned char* buf, size_t buf_len, unsigned char* curp, unsigned char* pname, size_t name_len) {$/;"	f	class:tigerso::DNSResolver
resolver_	http/HttpProxy.h	/^    DNSResolver resolver_;$/;"	m	class:tigerso::HttpProxyConnection
resolver_	test/backup/http_proxy.cpp	/^    DNSResolver resolver_;$/;"	m	class:HttpProxyConnection	file:
response	http/HttpProxy.h	/^    HttpResponse response;$/;"	m	struct:tigerso::HttpProxyConnection::HttpTransaction
response	test/backup/http_proxy.cpp	/^    HttpResponse response;$/;"	m	struct:HttpProxyConnection::HttpTransaction	file:
response403html	http/HttpMessage.h	/^    static std::string response403html;$/;"	m	class:tigerso::HttpHelper
response503html	http/HttpMessage.h	/^    static std::string response503html;$/;"	m	class:tigerso::HttpHelper
responseCallbacks_	http/HttpMessage.h	/^    std::map<std::string, httpInspectCallback> responseCallbacks_;$/;"	m	class:tigerso::HttpInSpection
response_buf_	dns/DNSResolver.h	/^    unsigned char response_buf_[DNS_MESSAGE_LIMIT] = {0};$/;"	m	class:tigerso::DNSResolver
response_status_array	http/HttpMessage.cpp	/^static const status_pair_t response_status_array [] = {$/;"	m	namespace:tigerso	file:
resvDNSAnswer	dns/DNSResolver.cpp	/^int DNSResolver::resvDNSAnswer() {$/;"	f	class:tigerso::DNSResolver
role_	http/HttpMessage.h	/^    http_role_t role_ = HTTP_ROLE_UINIT;$/;"	m	class:tigerso::HttpMessage
role_	net/Socket.h	/^    socket_role_t role_ = SOCKET_ROLE_UINIT;$/;"	m	class:tigerso::Socket
roundRobin	net/Upstream.h	/^    int roundRobin(const char* ip, unsigned int& port) {$/;"	f	class:tigerso::Upstream
run	core/ThreadPool.h	/^    void run(const Task task) {$/;"	f	class:tigerso::ThreadPool
runInThread	core/Thread.cpp	/^    void runInThread() {$/;"	f	class:tigerso::ThreadData
runInThread	core/ThreadPool.h	/^    void runInThread() {$/;"	f	class:tigerso::ThreadPool
running_	core/ThreadPool.h	/^    std::atomic<bool> running_;$/;"	m	class:tigerso::ThreadPool
s_body_identity	http/lib/http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	http/lib/http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chunk_data	http/lib/http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	http/lib/http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	http/lib/http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	http/lib/http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	http/lib/http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	http/lib/http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	http/lib/http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	http/lib/http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_header_almost_done	http/lib/http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	http/lib/http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	http/lib/http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	http/lib/http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_discard_lws	http/lib/http_parser.c	/^  , s_header_value_discard_lws$/;"	e	enum:state	file:
s_header_value_discard_ws	http/lib/http_parser.c	/^  , s_header_value_discard_ws$/;"	e	enum:state	file:
s_header_value_discard_ws_almost_done	http/lib/http_parser.c	/^  , s_header_value_discard_ws_almost_done$/;"	e	enum:state	file:
s_header_value_lws	http/lib/http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	http/lib/http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	http/lib/http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	http/lib/http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	http/lib/http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	http/lib/http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	http/lib/http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	http/lib/http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	http/lib/http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	http/lib/http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	http/lib/http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	http/lib/http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone	http/lib/http_parser.c	/^  , s_http_host_v6_zone$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone_start	http/lib/http_parser.c	/^  , s_http_host_v6_zone_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	http/lib/http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	http/lib/http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_message_done	http/lib/http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_req_first_http_major	http/lib/http_parser.c	/^  , s_req_first_http_major$/;"	e	enum:state	file:
s_req_first_http_minor	http/lib/http_parser.c	/^  , s_req_first_http_minor$/;"	e	enum:state	file:
s_req_fragment	http/lib/http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	http/lib/http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	http/lib/http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	http/lib/http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	http/lib/http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	http/lib/http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_major	http/lib/http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	http/lib/http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	http/lib/http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	http/lib/http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	http/lib/http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	http/lib/http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	http/lib/http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	http/lib/http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	http/lib/http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	http/lib/http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	http/lib/http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	http/lib/http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	http/lib/http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	http/lib/http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	http/lib/http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	http/lib/http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	http/lib/http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	http/lib/http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	http/lib/http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_http_major	http/lib/http_parser.c	/^  , s_res_first_http_major$/;"	e	enum:state	file:
s_res_first_http_minor	http/lib/http_parser.c	/^  , s_res_first_http_minor$/;"	e	enum:state	file:
s_res_first_status_code	http/lib/http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_major	http/lib/http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	http/lib/http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	http/lib/http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	http/lib/http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	http/lib/http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	http/lib/http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_res_status_start	http/lib/http_parser.c	/^  , s_res_status_start$/;"	e	enum:state	file:
s_start_req	http/lib/http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	http/lib/http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	http/lib/http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
sctx	net/Socket.h	/^    SSLContext sctx;$/;"	m	class:tigerso::Socket
second_addr_	dns/DNSResolver.cpp	/^std::string DNSResolver::second_addr_ = "";$/;"	m	class:tigerso::DNSResolver	file:
second_addr_	dns/DNSResolver.h	/^    static std::string second_addr_;$/;"	m	class:tigerso::DNSResolver
sem	test/test_mutex.cpp	/^FileLock* sem = nullptr;$/;"	v
send	ssl/SSLContext.cpp	/^int SSLContext::send(const void* buf, size_t len, size_t* written) {$/;"	f	class:tigerso::SSLContext
send	test/HttpFile/client.py	/^    def send(self, message):$/;"	m	class:client
send	test/SSLContex.h	/^    int send(void* buf, size_t len, size_t* written) {$/;"	f	class:HttpsContext
send	test/https_lib/SSLContext.cpp	/^    int send(void* buf, size_t len, size_t* written) {$/;"	f	class:SSLContext::HttpsContext
send2Socket	core/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:tigerso::File
send2Socket	core/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn, off_t& offset, size_t count) {$/;"	f	class:tigerso::File
send2Socket	http/HttpBodyFile.cpp	/^int HttpBodyFile::send2Socket(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
send2Socket	net/RingBuffer.cpp	/^int RingBuffer::send2Socket(Socket& mcsock) {$/;"	f	class:tigerso::RingBuffer
send2Socket	net/RingBuffer.cpp	/^int RingBuffer::send2Socket(int sockfd) {$/;"	f	class:tigerso::RingBuffer
send2Socket	test/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
send2Socket	test/HttpFile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
send2Socket	test/HttpFile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn, off_t& offset, size_t count) {$/;"	f	class:File
send2Socket	test/HttpFile/RingBuffer.h	/^    int send2Socket(int sockfd) {$/;"	f	class:RingBuffer
send2Socket	test/RingBuffer.h	/^    int send2Socket(int sockfd) {$/;"	f	class:RingBuffer
send2Socket	test/sendfile/File.cpp	/^int File::send2Socket(int sockfd, size_t& sendn) {$/;"	f	class:File
sendChunk	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendChunk(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
sendChunk2Socket	test/HttpFile/HttpBodyFile.h	/^    int sendChunk2Socket(int sockfd) {$/;"	f	class:HttpBodyFile
sendContent	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendContent(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
sendContent2Socket	test/HttpFile/HttpBodyFile.h	/^    int sendContent2Socket(int sockfd) {$/;"	f	class:HttpBodyFile
sendFile	test/HttpFile/sendcontent.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
sendFile	test/HttpFile/sendfile.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
sendFile	test/sendfile/sendfile.cc	/^ssize_t sendFile(int out_fd, int in_fd, ssize_t len) {$/;"	f
sendFileChunk	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendFileChunk(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
sendFileChunk	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendFileChunk(int sockfd) {$/;"	f	class:tigerso::HttpBodyFile
sendFileContent	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendFileContent(Socket& mcsock) {$/;"	f	class:tigerso::HttpBodyFile
sendFileContent	http/HttpBodyFile.cpp	/^int HttpBodyFile::sendFileContent(int sockfd) {$/;"	f	class:tigerso::HttpBodyFile
sendNIO	net/Socket.cpp	/^ssize_t Socket::sendNIO() {$/;"	f	class:tigerso::Socket
sendQuery	dns/DNSResolver.cpp	/^int DNSResolver::sendQuery(Socket& udpsock) {$/;"	f	class:tigerso::DNSResolver
sendToSocket	net/Buffer.cpp	/^int Buffer::sendToSocket(Socket& mcsock) {$/;"	f	class:tigerso::Buffer
senddone_	net/Buffer.h	/^    bool senddone_ = false;$/;"	m	class:tigerso::Buffer
sendfile	http/HttpBodyFile.cpp	/^bool HttpBodyFile::sendfile = true;$/;"	m	class:tigerso::HttpBodyFile	file:
sendfile	http/HttpBodyFile.h	/^    static bool sendfile;$/;"	m	class:tigerso::HttpBodyFile
serrno	ssl/SSLContext.h	/^    int serrno = SSL_ERROR_NONE;$/;"	m	class:tigerso::SSLContext
server2close_	http/HttpProxy.h	/^    bool server2close_ = false;$/;"	m	class:tigerso::HttpProxyConnection
server2close_	test/backup/http_proxy.cpp	/^    bool server2close_ = false;$/;"	m	class:HttpProxyConnection	file:
serverCertfile	test/https_lib/Https.h	/^    std::string serverCertfile;$/;"	m	class:SSLContextFactory
serverCloseHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverCloseHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverCloseHandle	test/backup/http_proxy.cpp	/^  int serverCloseHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverConnectTo	http/HttpProxy.cpp	/^int HttpProxyConnection::serverConnectTo(const char* ip, time_t ttl) {$/;"	f	class:tigerso::HttpProxyConnection
serverConnectTo	test/backup/http_proxy.cpp	/^    int serverConnectTo(const char* ip, time_t ttl) {$/;"	f	class:HttpProxyConnection
serverContexts	test/https_lib/Https.h	/^    SSL_CTX* serverContexts[SSL_VERSION_UNKNOW];$/;"	m	class:SSLContextFactory
serverDecideSkipBody	http/HttpProxy.cpp	/^void HttpProxyConnection::serverDecideSkipBody() {$/;"	f	class:tigerso::HttpProxyConnection
serverDecideSkipBody	test/backup/http_proxy.cpp	/^    void serverDecideSkipBody() {$/;"	f	class:HttpProxyConnection	file:
serverErrorHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverErrorHandle(Socket& server) {  return serverRDHUPHandle(server); }$/;"	f	class:tigerso::HttpProxyConnection
serverErrorHandle	test/backup/http_proxy.cpp	/^    int serverErrorHandle(Socket& server) {  return serverRDHUPHandle(server); }$/;"	f	class:HttpProxyConnection
serverFirstWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverFirstWriteHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverFirstWriteHandle	test/backup/http_proxy.cpp	/^    int serverFirstWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverOnlyWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverOnlyWriteHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverOnlyWriteHandle	test/backup/http_proxy.cpp	/^    int serverOnlyWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverRDHUPHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverRDHUPHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverRDHUPHandle	test/backup/http_proxy.cpp	/^    int serverRDHUPHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverReadHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverReadHandle	test/backup/http_proxy.cpp	/^    int serverReadHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverSafeClose	http/HttpProxy.cpp	/^int HttpProxyConnection::serverSafeClose(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverSafeClose	test/backup/http_proxy.cpp	/^   int serverSafeClose(Socket& server) {$/;"	f	class:HttpProxyConnection
serverTimeoutHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverTimeoutHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverTunnelReadHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverTunnelReadHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverTunnelReadHandle	test/backup/http_proxy.cpp	/^    int serverTunnelReadHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverTunnelWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverTunnelWriteHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverTunnelWriteHandle	test/backup/http_proxy.cpp	/^    int serverTunnelWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
serverWriteHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::serverWriteHandle(Socket& server) {$/;"	f	class:tigerso::HttpProxyConnection
serverWriteHandle	test/backup/http_proxy.cpp	/^    int serverWriteHandle(Socket& server) {$/;"	f	class:HttpProxyConnection
server_addr_	dns/DNSResolver.h	/^    sockaddr_in server_addr_;$/;"	m	class:tigerso::DNSResolver
serverptr_	test/test_http.cpp	/^    SocketPtr serverptr_ = nullptr;$/;"	m	class:ProxyConnection	file:
setAfterCallback	net/Channel.cpp	/^EventFunc Channel::setAfterCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setBeforeCallback	net/Channel.cpp	/^EventFunc Channel::setBeforeCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setBlockingIO	core/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:tigerso::File
setBlockingIO	test/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setBlockingIO	test/HttpFile/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setBlockingIO	test/sendfile/File.h	/^    inline int setBlockingIO(int block) { if(validFd(fd_)) { return block != 1? nonBlocking(fd_): blocking(fd_); } return -1; }$/;"	f	class:File
setBody	http/HttpMessage.h	/^    virtual void setBody(const std::string& body) { body_.writeIn(body.c_str(), body.size()); }$/;"	f	class:tigerso::HttpMessage
setBodyFileName	http/HttpMessage.h	/^    virtual int setBodyFileName(const std::string& fn) {$/;"	f	class:tigerso::HttpMessage
setCallback	dns/DNSResolver.h	/^    int setCallback(DNS_CALLBACK cb) {callback_ = cb;}$/;"	f	class:tigerso::DNSResolver
setCloseExec	net/Socket.cpp	/^void Socket::setCloseExec(bool on) {$/;"	f	class:tigerso::Socket
setConfigPath	core/ConfigParser.cpp	/^void ConfigParser::setConfigPath(const std::string& file)$/;"	f	class:tigerso::ConfigParser
setDefaultName	core/Thread.cpp	/^void Thread::setDefaultName() {$/;"	f	class:tigerso::Thread
setDesc	http/HttpMessage.h	/^    virtual void setDesc(const std::string&){};$/;"	f	class:tigerso::HttpMessage
setDesc	http/HttpMessage.h	/^    void setDesc(const std::string& desc) { desc_ = desc; }$/;"	f	class:tigerso::HttpResponse
setEraseFunc	http/HttpProxy.cpp	/^void HttpProxyConnection::setEraseFunc(LOOP_CALLBACK cb) { erase_func_ = cb; }$/;"	f	class:tigerso::HttpProxyConnection
setEraseFunc	test/backup/http_proxy.cpp	/^    void setEraseFunc(LOOP_CALLBACK cb) { erase_func_ = cb; }$/;"	f	class:HttpProxyConnection
setErrorCallback	net/Channel.cpp	/^EventFunc Channel::setErrorCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setEvents	net/Channel.cpp	/^int Channel::setEvents(bool readable, bool writeable, bool edge, bool keep) {$/;"	f	class:tigerso::Channel
setEventsLoopPtr	http/HttpProxy.cpp	/^void HttpProxyConnection::setEventsLoopPtr(EventsLoop* loop) { elooptr_ = loop; }$/;"	f	class:tigerso::HttpProxyConnection
setEventsLoopPtr	test/backup/http_proxy.cpp	/^    void setEventsLoopPtr(EventsLoop* loop) {$/;"	f	class:HttpProxyConnection
setFile	http/HttpBodyFile.cpp	/^void HttpBodyFile::setFile(const char* filename) {$/;"	f	class:tigerso::HttpBodyFile
setFile	test/HttpFile/HttpBodyFile.h	/^    void setFile(const char* filename) {$/;"	f	class:HttpBodyFile
setFilename	core/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:tigerso::File
setFilename	test/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setFilename	test/HttpFile/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setFilename	test/sendfile/File.cpp	/^void File::setFilename(const char* filename) {$/;"	f	class:File
setInBufferPtr	net/Socket.h	/^    void setInBufferPtr(std::shared_ptr<Buffer> inptr) { bufPtr_.in_ = inptr; }$/;"	f	class:tigerso::Socket
setKeepAlive	net/Socket.cpp	/^void Socket::setKeepAlive(bool on) {$/;"	f	class:tigerso::Socket
setLevel	core/Logging.cpp	/^int Logging::setLevel(const std::string& le)$/;"	f	class:tigerso::Logging
setLogFile	core/Logging.cpp	/^int Logging::setLogFile(const std::string& file)$/;"	f	class:tigerso::Logging
setLogPath	core/Logging.cpp	/^int Logging::setLogPath(const std::string& path)$/;"	f	class:tigerso::Logging
setMethod	http/HttpMessage.h	/^    virtual void setMethod(const std::string& method){};$/;"	f	class:tigerso::HttpMessage
setMethod	http/HttpMessage.h	/^    void setMethod(const std::string& method) { method_ = method; }$/;"	f	class:tigerso::HttpRequest
setNIO	net/Socket.cpp	/^void Socket::setNIO(bool unblock) {$/;"	f	class:tigerso::Socket
setOutBufferPtr	net/Socket.h	/^    void setOutBufferPtr(std::shared_ptr<Buffer> outptr) { bufPtr_.out_ = outptr; }$/;"	f	class:tigerso::Socket
setParseState	http/HttpParser.h	/^    void setParseState(PARSE_STATE state) { state_ = state; }$/;"	f	class:tigerso::HttpParser
setPrimaryAddr	dns/DNSResolver.h	/^    static void setPrimaryAddr(const std::string& paddr) { primary_addr_ = paddr; }$/;"	f	class:tigerso::DNSResolver
setRdhupCallback	net/Channel.cpp	/^EventFunc Channel::setRdhupCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setReadCallback	net/Channel.cpp	/^EventFunc Channel::setReadCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setRole	net/Socket.cpp	/^void Socket::setRole(const socket_role_t& role) {$/;"	f	class:tigerso::Socket
setSecondAddr	dns/DNSResolver.h	/^    static void setSecondAddr(const std::string& saddr) { second_addr_ = saddr; }$/;"	f	class:tigerso::DNSResolver
setSkipBody	http/HttpParser.h	/^    void setSkipBody(bool skip) { skipbody_ = skip; }$/;"	f	class:tigerso::HttpParser
setSocket	net/Socket.cpp	/^void Socket::setSocket(const socket_t& sockfd) {$/;"	f	class:tigerso::Socket
setSocketRegisterFunc	http/HttpProxy.cpp	/^void HttpProxyConnection::setSocketRegisterFunc(EventFunc f) {register_func_ = f;}$/;"	f	class:tigerso::HttpProxyConnection
setSocketRegisterFunc	test/backup/http_proxy.cpp	/^    void setSocketRegisterFunc(EventFunc f) {register_func_ = f;}$/;"	f	class:HttpProxyConnection
setStage	net/Socket.cpp	/^void Socket::setStage(const socket_stage_t& stage) {$/;"	f	class:tigerso::Socket
setStatuscode	http/HttpMessage.h	/^    virtual void setStatuscode(int){};$/;"	f	class:tigerso::HttpMessage
setStatuscode	http/HttpMessage.h	/^    void setStatuscode(int code) { $/;"	f	class:tigerso::HttpResponse
setStickDNSNode	dns/DNSCache.cpp	/^int DNSCache::setStickDNSNode(std::string& host, std::string& ip) {$/;"	f	class:tigerso::DNSCache
setStrAddr	net/Socket.cpp	/^void Socket::setStrAddr(const std::string& addr) {$/;"	f	class:tigerso::Socket
setStrPort	net/Socket.cpp	/^void Socket::setStrPort(const std::string& port) {$/;"	f	class:tigerso::Socket
setTcpNoDelay	net/Socket.cpp	/^void Socket::setTcpNoDelay(bool on) {$/;"	f	class:tigerso::Socket
setTimeout	net/EventsLoop.cpp	/^void EventsLoop::setTimeout(const int time) {$/;"	f	class:tigerso::EventsLoop
setTimeoutCallback	net/Channel.cpp	/^EventFunc Channel::setTimeoutCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
setUrl	http/HttpMessage.h	/^    virtual void setUrl(const std::string& Url){};$/;"	f	class:tigerso::HttpMessage
setUrl	http/HttpMessage.h	/^    void setUrl(const std::string& url) { url_ = url; }$/;"	f	class:tigerso::HttpRequest
setValueByHeader	http/HttpMessage.h	/^    virtual void setValueByHeader(const std::string& header, const std::string& value) {$/;"	f	class:tigerso::HttpMessage
setVersion	http/HttpMessage.h	/^    virtual void setVersion(const std::string& verison) { version_ = verison; }$/;"	f	class:tigerso::HttpMessage
setWriteCallback	net/Channel.cpp	/^EventFunc Channel::setWriteCallback(EventFunc func) {$/;"	f	class:tigerso::Channel
set_signal_handler	core/SysUtil.cpp	/^signal_func* SysUtil::set_signal_handler(int signo, signal_func* func) {$/;"	f	class:tigerso::SysUtil
settings_	http/HttpParser.h	/^    http_parser_settings settings_;$/;"	m	class:tigerso::HttpParser
setupCertKey	ssl/SSLContext.cpp	/^int SSLContext::setupCertKey(X509* cert, EVP_PKEY* pkey) {$/;"	f	class:tigerso::SSLContext
setupCertKey	test/SSLContex.h	/^    int setupCertKey(X509* cert, EVP_PKEY* pkey) {$/;"	f	class:HttpsContext
setupCertKey	test/https_lib/SSLContext.cpp	/^    int setupCertKey(X509* cert, EVP_PKEY* pkey) {$/;"	f	class:SSLContext::HttpsContext
share_count	test/test_mutex.cpp	/^    share_count():count(0), pid(-1) {}$/;"	f	struct:share_count
share_count	test/test_mutex.cpp	/^struct share_count {$/;"	s	file:
shmCache_	dns/DNSCache.h	/^    std::map<std::string, std::pair<std::string, time_t>> shmCache_;$/;"	m	class:tigerso::DNSCache
shm_	dns/DNSCache.h	/^    SharedMemory shm_;$/;"	m	class:tigerso::DNSCache
shm_len	core/SysUtil.h	/^    size_t shm_len;$/;"	m	class:tigerso::SharedMemory
shm_mutex_t	core/SysUtil.h	/^struct shm_mutex_t {$/;"	s	namespace:tigerso
shm_name	core/SysUtil.h	/^    char shm_name[1024];$/;"	m	struct:tigerso::shm_mutex_t
shm_name	core/SysUtil.h	/^    string shm_name;$/;"	m	class:tigerso::SharedMemory
shm_name	core/SysUtil.h	/^    string shm_name;$/;"	m	class:tigerso::ShmMutex
shm_pid	core/SysUtil.h	/^    pid_t shm_pid;$/;"	m	class:tigerso::SharedMemory
shm_pid	core/SysUtil.h	/^    pid_t shm_pid;$/;"	m	class:tigerso::ShmMutex
shm_prot	core/SysUtil.h	/^    int shm_prot;$/;"	m	class:tigerso::SharedMemory
shm_ptr	core/SysUtil.h	/^    void* shm_ptr;$/;"	m	class:tigerso::SharedMemory
showComplete	test/HttpFile/sendcontent.cc	25;"	d	file:
showComplete	test/HttpFile/sendfile.cc	25;"	d	file:
showComplete	test/sendfile/sendfile.cc	25;"	d	file:
showIPAddress	test/test_dns.cpp	/^int showIPAddress(const char* ipaddr, time_t rttl) {$/;"	f
showProcess	test/HttpFile/sendcontent.cc	/^void showProcess(long now, long total) {$/;"	f
showProcess	test/HttpFile/sendfile.cc	/^void showProcess(long now, long total) {$/;"	f
showProcess	test/sendfile/sendfile.cc	/^void showProcess(long now, long total) {$/;"	f
signCert	ssl/SSLHelper.cpp	/^bool SSLHelper::signCert(X509* ca_cert, EVP_PKEY* ca_pkey, int key_length, X509* org_cert, X509** cert, EVP_PKEY** pkey) { $/;"	f	class:tigerso::SSLHelper
signal_func	core/SysUtil.h	/^typedef void (signal_func)(int);$/;"	t	namespace:tigerso
singleton	core/BaseClass.h	/^class singleton {$/;"	c	namespace:tigerso
size	http/HttpBodyFile.cpp	/^size_t HttpBodyFile::size() { return _file.getFileSize() + _ringbuf.size(); }$/;"	f	class:tigerso::HttpBodyFile
size	net/RingBuffer.cpp	/^size_t RingBuffer::size() { return (_capacity - space() - 1); }$/;"	f	class:tigerso::RingBuffer
size	net/Upstream.h	/^    int size() {$/;"	f	class:tigerso::Upstream
size	test/HttpFile/HttpBodyFile.h	/^    size_t size() { return _file.getFileSize() + _ringbuf.size(); }$/;"	f	class:HttpBodyFile
size	test/HttpFile/RingBuffer.h	/^    size_t size() { return (_size - space() - 1); }$/;"	f	class:RingBuffer
size	test/RingBuffer.h	/^    size_t size() { return (_size - space() - 1); }$/;"	f	class:RingBuffer
size	test/sendfile/HttpBodyFile.h	/^    size_t size() { return _file.getFileSize() + _ringbuf.size(); }$/;"	f	class:HttpBodyFile
size	test/sendfile/RingBuffer.h	/^    size_t size() { return (_size - space() -1); }$/;"	f	class:RingBuffer
size_	core/File.h	/^    off_t size_;$/;"	m	class:tigerso::File
size_	test/File.h	/^    off_t size_;$/;"	m	class:File
size_	test/HttpFile/File.h	/^    off_t size_;$/;"	m	class:File
size_	test/sendfile/File.h	/^    off_t size_;$/;"	m	class:File
skipBody	http/HttpParser.h	/^    bool skipBody() { return skipbody_; }$/;"	f	class:tigerso::HttpParser
skipbody_	http/HttpParser.h	/^    bool skipbody_ = false;$/;"	m	class:tigerso::HttpParser
sock_	net/Channel.h	/^    Socket* sock_;$/;"	m	class:tigerso::Channel
socketDisableReadEvent	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketDisableReadEvent(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketDisableReadEvent	test/backup/http_proxy.cpp	/^    bool socketDisableReadEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketDisableWriteEvent	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketDisableWriteEvent(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketDisableWriteEvent	test/backup/http_proxy.cpp	/^    bool socketDisableWriteEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketEnableReadEvent	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketEnableReadEvent(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketEnableReadEvent	test/backup/http_proxy.cpp	/^    bool socketEnableReadEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketEnableWriteEvent	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketEnableWriteEvent(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketEnableWriteEvent	test/backup/http_proxy.cpp	/^    bool socketEnableWriteEvent(Socket& sock) {$/;"	f	class:HttpProxyConnection	file:
socketNullHandle	http/HttpProxy.cpp	/^int HttpProxyConnection::socketNullHandle(Socket& sock) {$/;"	f	class:tigerso::HttpProxyConnection
socketNullHandle	test/backup/http_proxy.cpp	/^    int socketNullHandle(Socket& sock) {$/;"	f	class:HttpProxyConnection
socketSetEventHandle	http/HttpProxy.cpp	/^bool HttpProxyConnection::socketSetEventHandle(Socket& sock, EventFunc func, unsigned short flag) {$/;"	f	class:tigerso::HttpProxyConnection
socketSetEventHandle	test/backup/http_proxy.cpp	/^    bool socketSetEventHandle(Socket& sock, EventFunc func, unsigned short flag) {$/;"	f	class:HttpProxyConnection	file:
socket_role_t	net/Socket.h	/^typedef int socket_role_t;$/;"	t	namespace:tigerso
socket_stage_t	net/Socket.h	/^typedef int socket_stage_t;$/;"	t	namespace:tigerso
socket_t	dns/DNSResolver.h	/^typedef int socket_t;$/;"	t	namespace:tigerso
socket_t	net/Buffer.h	/^    typedef int socket_t;$/;"	t	class:tigerso::Buffer
socket_t	net/Socket.h	/^typedef int socket_t;$/;"	t	namespace:tigerso
sockfd	net/Channel.h	/^    int sockfd = -1;$/;"	m	class:tigerso::Channel
sockfd_	dns/DNSResolver.h	/^    socket_t sockfd_ = -1;$/;"	m	class:tigerso::DNSResolver
sockfd_	net/Socket.h	/^    socket_t sockfd_ = -1;$/;"	m	class:tigerso::Socket
sockfd_	test/test_http.cpp	/^    socket_t sockfd_  = -1;$/;"	m	class:ProxyConnection	file:
sockptr	test/http_server.cpp	/^    const SocketPtr sockptr;$/;"	m	class:HttpConnection	file:
sogouShow	test/HttpFile/index.html	/^		function sogouShow(){}$/;"	f
sosoShow	test/HttpFile/index.html	/^		function sosoShow(){}$/;"	f
space	net/RingBuffer.cpp	/^size_t RingBuffer::space() {$/;"	f	class:tigerso::RingBuffer
space	test/HttpFile/RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
space	test/RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
space	test/sendfile/RingBuffer.h	/^    size_t space() {$/;"	f	class:RingBuffer
sparser_	http/HttpProxy.h	/^    HttpParser sparser_;$/;"	m	class:tigerso::HttpProxyConnection
sparser_	test/backup/http_proxy.cpp	/^    HttpParser sparser_;$/;"	m	class:HttpProxyConnection	file:
ssockptr	http/HttpProxy.h	/^    const SocketPtr ssockptr;$/;"	m	class:tigerso::HttpProxyConnection
ssockptr	test/backup/http_proxy.cpp	/^    const SOCKETPTR ssockptr;$/;"	m	class:HttpProxyConnection	file:
stage_	net/Socket.h	/^    socket_stage_t stage_ = SOCKET_STAGE_UINIT;$/;"	m	class:tigerso::Socket
start	core/Thread.cpp	/^void Thread::start() {$/;"	f	class:tigerso::Thread
start	core/ThreadPool.h	/^    void start(const int threadNum) {$/;"	f	class:tigerso::ThreadPool
startLoop	http/HttpProxy.cpp	/^int HttpProxyLoop::startLoop() {$/;"	f	class:tigerso::HttpProxyLoop
startLoop	test/backup/http_proxy.cpp	/^    int startLoop() {$/;"	f	class:HttpProxyLoop
startProxy	test/http_proxy.cpp	/^int startProxy() {$/;"	f
startThread	core/Thread.cpp	/^void* startThread(void* obj) {$/;"	f	namespace:tigerso
startWithLabel	dns/DNSResolver.h	/^    inline bool startWithLabel(unsigned char* cur) {$/;"	f	class:tigerso::DNSResolver
startWithPointer	dns/DNSResolver.h	/^    inline bool startWithPointer(unsigned char* cur) {$/;"	f	class:tigerso::DNSResolver
start_	core/Thread.h	/^    bool start_ = false;$/;"	m	class:tigerso::Thread
start_state	http/lib/http_parser.c	445;"	d	file:
started	core/Thread.h	/^    bool started() const { return start_; }$/;"	f	class:tigerso::Thread
state	http/lib/http_parser.c	/^enum state$/;"	g	file:
state	http/lib/http_parser.h	/^  unsigned int state : 7;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser
state_	http/HttpParser.h	/^    PARSE_STATE state_;$/;"	m	class:tigerso::HttpParser
staticWebCGI	test/http_server.cpp	/^class staticWebCGI {$/;"	c	file:
status_code	http/lib/http_parser.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	struct:http_parser
status_pair_t	http/HttpMessage.cpp	/^typedef std::map<int, std::string>::value_type  status_pair_t;$/;"	t	namespace:tigerso	file:
statuscode_	http/HttpMessage.h	/^    int         statuscode_;$/;"	m	class:tigerso::HttpResponse
stickDNSData_	dns/DNSCache.h	/^    std::map<std::string, std::vector<std::string>> stickDNSData_;$/;"	m	class:tigerso::DNSCache
stop	core/ThreadPool.h	/^    void stop() {$/;"	f	class:tigerso::ThreadPool
stop	net/EventsLoop.h	/^    int stop() {loop_ = false;}$/;"	f	class:tigerso::EventsLoop
store2Memory	dns/DNSCache.cpp	/^int DNSCache::store2Memory(const char* host, const char* ip, int ttl) {$/;"	f	class:tigerso::DNSCache
storeX509ToPEMStr	ssl/SSLHelper.cpp	/^int storeX509ToPEMStr(X509* cert, char* buf, int len) {$/;"	f	namespace:tigerso
stransaction_	http/HttpProxy.h	/^    HttpTransaction stransaction_;$/;"	m	class:tigerso::HttpProxyConnection
stransaction_	test/backup/http_proxy.cpp	/^    HttpTransaction stransaction_;$/;"	m	class:HttpProxyConnection	file:
take	core/ThreadPool.h	/^    Task take() {$/;"	f	class:tigerso::ThreadPool
tasks_	core/ThreadPool.h	/^    std::deque<Task> tasks_;$/;"	m	class:tigerso::ThreadPool
tcpServer	test/test_http.cpp	/^int tcpServer(SocketPtr& master) {$/;"	f
test	test/backup/deleteself.cc	/^    mytest* test;$/;"	m	class:peer	file:
test	test/test_bind.cpp	/^    int test(nocopy& np) {$/;"	f	class:testbind
test	test/test_thread.cpp	/^void test() {$/;"	f
testExist	core/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:tigerso::File
testExist	test/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testExist	test/HttpFile/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testExist	test/sendfile/File.h	/^    inline bool testExist() { return TEST_FILEACCESS(filename_, F_OK); }$/;"	f	class:File
testRead	core/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:tigerso::File
testRead	test/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testRead	test/HttpFile/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testRead	test/sendfile/File.h	/^    inline bool testRead()  { return TEST_FILEACCESS(filename_, R_OK); }$/;"	f	class:File
testUpstreamThread	net/Upstream.h	/^    bool testUpstreamThread() {$/;"	f	class:tigerso::Upstream
testWrite	core/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:tigerso::File
testWrite	test/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testWrite	test/HttpFile/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testWrite	test/sendfile/File.h	/^    inline bool testWrite() { return TEST_FILEACCESS(filename_, W_OK); }$/;"	f	class:File
testbind	test/test_bind.cpp	/^    testbind() {}$/;"	f	class:testbind
testbind	test/test_bind.cpp	/^class testbind {$/;"	c	file:
testdata	test/backup/deleteself.cc	/^    static int testdata;$/;"	m	class:mytest	file:
testdata2	test/backup/deleteself.cc	/^    static int testdata2;$/;"	m	class:mytest	file:
testf	test/test_bind.cpp	/^int testf(function<int()> func) {$/;"	f
threadId_	core/Thread.h	/^    pthread_t threadId_ = 0;$/;"	m	class:tigerso::Thread
threadName_	core/Thread.cpp	/^   __thread const char* threadName_ = "unknow thread";$/;"	m	namespace:tigerso::CurrentThread	file:
threadNum_	core/ThreadPool.h	/^    int threadNum_;$/;"	m	class:tigerso::ThreadPool
threads_	core/ThreadPool.h	/^    std::vector<ThreadPtr> threads_;$/;"	m	class:tigerso::ThreadPool
tid	core/Thread.cpp	/^   pid_t tid() {$/;"	f	namespace:tigerso::CurrentThread
tid	core/Thread.h	/^    pid_t tid() const { return *tid_; }$/;"	f	class:tigerso::Thread
tidStrLength	core/Thread.cpp	/^   __thread size_t tidStrLength = 0;$/;"	m	namespace:tigerso::CurrentThread	file:
tidString	core/CurrentThread.h	/^   inline const char* tidString() { return tidString_; }$/;"	f	namespace:tigerso::CurrentThread
tidString_	core/Thread.cpp	/^   __thread char tidString_[32] = {0};$/;"	m	namespace:tigerso::CurrentThread	file:
tid_	core/Thread.h	/^    std::shared_ptr<pid_t> tid_;$/;"	m	class:tigerso::Thread
tigerso	core/BaseClass.h	/^namespace tigerso {$/;"	n
tigerso	core/Condition.h	/^namespace tigerso{$/;"	n
tigerso	core/ConfigParser.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/ConfigParser.h	/^namespace tigerso {$/;"	n
tigerso	core/CurrentThread.h	/^namespace tigerso {$/;"	n
tigerso	core/Dechex.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/Dechex.h	/^namespace tigerso {$/;"	n
tigerso	core/File.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/File.h	/^namespace tigerso {$/;"	n
tigerso	core/FileLock.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/FileLock.h	/^namespace tigerso {$/;"	n
tigerso	core/Logging.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/Logging.h	/^namespace tigerso {$/;"	n
tigerso	core/SysUtil.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/SysUtil.h	/^namespace tigerso {$/;"	n
tigerso	core/Thread.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	core/Thread.h	/^namespace tigerso {$/;"	n
tigerso	core/ThreadMutex.h	/^namespace tigerso {$/;"	n
tigerso	core/ThreadPool.h	/^namespace tigerso {$/;"	n
tigerso	core/tigerso.h	/^namespace tigerso {$/;"	n
tigerso	dns/DNSCache.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	dns/DNSCache.h	/^namespace tigerso {$/;"	n
tigerso	dns/DNSResolver.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	dns/DNSResolver.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpBodyFile.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpBodyFile.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpMessage.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpMessage.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpParser.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpParser.h	/^namespace tigerso {$/;"	n
tigerso	http/HttpProxy.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	http/HttpProxy.h	/^namespace tigerso {$/;"	n
tigerso	net/Buffer.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/Buffer.h	/^namespace tigerso {$/;"	n
tigerso	net/Channel.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/Channel.h	/^namespace tigerso {$/;"	n
tigerso	net/EventsLoop.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/EventsLoop.h	/^namespace tigerso {$/;"	n
tigerso	net/RingBuffer.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/RingBuffer.h	/^namespace tigerso {$/;"	n
tigerso	net/Socket.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/Socket.h	/^namespace tigerso {$/;"	n
tigerso	net/SocketUtil.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/SocketUtil.h	/^namespace tigerso {$/;"	n
tigerso	net/TimeWheelEvent.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	net/TimeWheelEvent.h	/^namespace tigerso {$/;"	n
tigerso	net/Upstream.h	/^namespace tigerso {$/;"	n
tigerso	ssl/SSLContext.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	ssl/SSLContext.h	/^namespace tigerso {$/;"	n
tigerso	ssl/SSLHelper.cpp	/^namespace tigerso {$/;"	n	file:
tigerso	ssl/SSLHelper.h	/^namespace tigerso {$/;"	n
tigerso	util/FileTypeDetector.h	/^namespace tigerso {$/;"	n
timeout_cb	net/Channel.h	/^    EventFunc timeout_cb = nullptr;$/;"	m	class:tigerso::Channel
timer_	net/EventsLoop.h	/^    TimeWheelEvent timer_;$/;"	m	class:tigerso::EventsLoop
toLower	core/SysUtil.h	/^    void toLower(std::string& src, std::string& dst) { std::transform(src.begin(), src.end(), dst.begin(), ::tolower); }$/;"	f	class:tigerso::SysUtil
toString	http/HttpMessage.h	/^    std::string toString() {$/;"	f	class:tigerso::HttpRequest
toString	http/HttpMessage.h	/^    std::string toString() {$/;"	f	class:tigerso::HttpResponse
toString	net/Buffer.cpp	/^std::string Buffer::toString() const {$/;"	f	class:tigerso::Buffer
toUpper	core/SysUtil.h	/^    void toUpper(std::string& src, std::string& dst) { std::transform(src.begin(), src.end(), dst.begin(), ::toupper); }$/;"	f	class:tigerso::SysUtil
tokens	http/lib/http_parser.c	/^static const char tokens[256] = {$/;"	v	file:
topFixed	test/HttpFile/index.html	/^	function topFixed(){$/;"	f
transFlag	net/EventsLoop.cpp	/^evf_t EventsLoop::transFlag(Channel* cnptr) {$/;"	f	class:tigerso::EventsLoop
transferProxyBuffer	http/HttpProxy.cpp	/^void HttpProxyConnection::transferProxyBuffer() {$/;"	f	class:tigerso::HttpProxyConnection
transferProxyBuffer	test/backup/http_proxy.cpp	/^    void transferProxyBuffer() {$/;"	f	class:HttpProxyConnection	file:
try_lock	core/FileLock.cpp	/^int FileLock::try_lock() {$/;"	f	class:tigerso::FileLock
try_lock	core/SysUtil.cpp	/^int ShmMutex::try_lock()$/;"	f	class:tigerso::ShmMutex
try_lock	core/ThreadMutex.h	/^    int try_lock() {$/;"	f	class:tigerso::ThreadMutex
tunnelReadClientCallback	test/test_http.cpp	/^int tunnelReadClientCallback(SocketPtr& clientptr) {$/;"	f
tunnelReadServerCallback	test/test_http.cpp	/^int tunnelReadServerCallback(SocketPtr& serverptr) {$/;"	f
tunnelWriteClientCallback	test/test_http.cpp	/^int tunnelWriteClientCallback(SocketPtr& clientptr) {$/;"	f
tunnelWriteServerCallback	test/test_http.cpp	/^int tunnelWriteServerCallback(SocketPtr& serverptr) {$/;"	f
type	http/lib/http_parser.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	struct:http_parser
typenum	util/FileTypeDetector.h	/^    int typenum;$/;"	m	struct:tigerso::ScanFileType
typenum	util/FileTypes/FileTypeDetector.h	/^    int typenum;$/;"	m	struct:tigerso::util::ScanFileType
udpsock	test/test_dns.cpp	/^Socket udpsock;$/;"	v
uint16_t	http/lib/http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	http/lib/http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	http/lib/http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	http/lib/http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t
unassignHolder	core/ThreadMutex.h	/^    void unassignHolder() {$/;"	f	class:tigerso::ThreadMutex
unhex	http/lib/http_parser.c	/^static const int8_t unhex[256] =$/;"	v	file:
unlink	core/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:tigerso::File
unlink	test/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlink	test/HttpFile/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlink	test/sendfile/File.h	/^    inline int unlink() { return ::unlink(filename_); }$/;"	f	class:File
unlinkServer	test/test_http.cpp	/^    bool unlinkServer(SocketPtr& sockptr) {$/;"	f	class:ProxyConnection
unlock	core/FileLock.cpp	/^int FileLock::unlock() {$/;"	f	class:tigerso::FileLock
unlock	core/SysUtil.cpp	/^int ShmMutex::unlock()$/;"	f	class:tigerso::ShmMutex
unlock	core/ThreadMutex.h	/^    int unlock() {$/;"	f	class:tigerso::ThreadMutex
unregisterChannel	net/EventsLoop.cpp	/^int EventsLoop::unregisterChannel(Socket& socket) {$/;"	f	class:tigerso::EventsLoop
update	net/Channel.cpp	/^bool Channel::update() {$/;"	f	class:tigerso::Channel
updateChannel	net/EventsLoop.cpp	/^int EventsLoop::updateChannel(Channel* cnptr) {$/;"	f	class:tigerso::EventsLoop
updateChannel	net/TimeWheelEvent.cpp	/^int TimeWheelEvent::updateChannel(Channel* cnptr) {$/;"	f	class:tigerso::TimeWheelEvent
updateChannel	test/TimedEvent.h	/^    int updateChannel(Channel* cnptr) {$/;"	f	class:TimedEvent
updateDNS	dns/DNSCache.cpp	/^int DNSCache::updateDNS(const char* host, const char* ip, int& ttl) {$/;"	f	class:tigerso::DNSCache
updateNode	dns/DNSCache.cpp	/^int DNSCache::updateNode(DNSNode& dst, const char* host, unsigned char* key, const char* ip, int& ttl) {$/;"	f	class:tigerso::DNSCache
upgrade	http/lib/http_parser.h	/^  unsigned int upgrade : 1;$/;"	m	struct:http_parser
url_	http/HttpMessage.h	/^    std::string url_;$/;"	m	class:tigerso::HttpRequest
userLogin	test/HttpFile/index.html	/^	function userLogin(){$/;"	f
util	util/FileTypes/FileTypeDetector.h	/^namespace tigerso::util {$/;"	n	class:tigerso
uuid	http/HttpProxy.cpp	/^IDTYPE HttpProxyConnection::uuid() {$/;"	f	class:tigerso::HttpProxyConnection
uuid	test/backup/http_proxy.cpp	/^    static IDTYPE uuid() {$/;"	f	class:HttpProxyConnection	file:
validChannel	net/EventsLoop.cpp	18;"	d	file:
validFd	core/tigerso.h	60;"	d
validFd	test/File.h	16;"	d
validFd	test/HttpFile/File.h	19;"	d
validFd	test/sendfile/File.h	16;"	d
validSSL	ssl/SSLHelper.cpp	/^bool SSLHelper::validSSL(SSL* ssl) {$/;"	f	class:tigerso::SSLHelper
validate_filename	core/SysUtil.cpp	/^bool SysUtil::validate_filename(const string& filename)$/;"	f	class:tigerso::SysUtil
version_	http/HttpMessage.h	/^    std::string version_ = "HTTP\/1.1";$/;"	m	class:tigerso::HttpMessage
wait	core/Condition.h	/^    void wait() {$/;"	f	class:tigerso::Condition
waitChannel	net/EventsLoop.cpp	/^int EventsLoop::waitChannel() {$/;"	f	class:tigerso::EventsLoop
waitForSeconds	core/Condition.h	/^    bool waitForSeconds(double seconds) {$/;"	f	class:tigerso::Condition
waitTime_	net/EventsLoop.h	/^    int waitTime_ = 10000; \/\/10s$/;"	m	class:tigerso::EventsLoop
wkTid_	core/Thread.cpp	/^    std::weak_ptr<pid_t> wkTid_;$/;"	m	class:tigerso::ThreadData	file:
wrapB64	ssl/scripts/ca_converter.py	/^def wrapB64(str, width = 70):$/;"	f
writeCallback	test/test_http.cpp	/^int writeCallback(SocketPtr& sockptr) {$/;"	f
writeFlag	net/Channel.h	/^        bool writeFlag;$/;"	m	struct:tigerso::Channel::__anon4
writeIdx_	net/Buffer.h	/^    size_t writeIdx_;$/;"	m	class:tigerso::Buffer
writeIn	core/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:tigerso::File
writeIn	http/HttpBodyFile.cpp	/^int HttpBodyFile::writeIn(const char* buf, size_t len) {$/;"	f	class:tigerso::HttpBodyFile
writeIn	net/RingBuffer.cpp	/^int RingBuffer::writeIn(const char* buf, size_t length) {$/;"	f	class:tigerso::RingBuffer
writeIn	test/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	test/HttpFile/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	test/HttpFile/RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writeIn	test/RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writeIn	test/sendfile/File.cpp	/^ssize_t File::writeIn(const char* buf, size_t len) {$/;"	f	class:File
writeIn	test/sendfile/RingBuffer.h	/^    int writeIn(const char* buf, size_t length) {$/;"	f	class:RingBuffer
writeInFromFile	net/RingBuffer.cpp	/^int RingBuffer::writeInFromFile(File& file) {$/;"	f	class:tigerso::RingBuffer
writeableBytes	net/Buffer.cpp	/^size_t Buffer::writeableBytes() const {$/;"	f	class:tigerso::Buffer
writeable_cb	net/Channel.h	/^    EventFunc writeable_cb = nullptr;$/;"	m	class:tigerso::Channel
~Buffer	net/Buffer.cpp	/^Buffer::~Buffer() {$/;"	f	class:tigerso::Buffer
~Condition	core/Condition.h	/^    ~Condition() {$/;"	f	class:tigerso::Condition
~ConfigParser	core/ConfigParser.h	/^    ~ConfigParser() { delete pInstance; }$/;"	f	class:tigerso::ConfigParser
~DNSCache	dns/DNSCache.cpp	/^DNSCache::~DNSCache() {$/;"	f	class:tigerso::DNSCache
~DNSResolver	dns/DNSResolver.cpp	/^DNSResolver::~DNSResolver() {$/;"	f	class:tigerso::DNSResolver
~EventsLoop	net/EventsLoop.h	/^    ~EventsLoop() {$/;"	f	class:tigerso::EventsLoop
~File	core/File.cpp	/^File::~File() {$/;"	f	class:tigerso::File
~File	test/File.cpp	/^File::~File() {$/;"	f	class:File
~File	test/HttpFile/File.cpp	/^File::~File() {$/;"	f	class:File
~File	test/sendfile/File.cpp	/^File::~File() {$/;"	f	class:File
~FileLock	core/FileLock.cpp	/^FileLock::~FileLock() {$/;"	f	class:tigerso::FileLock
~FileTypeDetector	util/FileTypeDetector.h	/^    ~FileTypeDetector() {$/;"	f	class:tigerso::FileTypeDetector
~FileTypeDetector	util/FileTypes/FileTypeDetector.h	/^    ~FileTypeDetector() {$/;"	f	class:tigerso::util::FileTypeDetector
~HttpProxyConnection	http/HttpProxy.cpp	/^HttpProxyConnection::~HttpProxyConnection() {}$/;"	f	class:tigerso::HttpProxyConnection
~HttpProxyConnection	test/backup/http_proxy.cpp	/^    ~HttpProxyConnection() {$/;"	f	class:HttpProxyConnection
~HttpsContext	test/SSLContex.h	/^    ~HttpsContext() {$/;"	f	class:HttpsContext
~HttpsContext	test/https_lib/SSLContext.cpp	/^    ~HttpsContext() {$/;"	f	class:SSLContext::HttpsContext
~LockGuard	core/SysUtil.h	/^    ~LockGuard() {$/;"	f	class:tigerso::LockGuard
~LockTryGuard	core/SysUtil.h	/^    ~LockTryGuard() {$/;"	f	class:tigerso::LockTryGuard
~RingBuffer	net/RingBuffer.cpp	/^RingBuffer::~RingBuffer() {$/;"	f	class:tigerso::RingBuffer
~RingBuffer	test/HttpFile/RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~RingBuffer	test/RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~RingBuffer	test/sendfile/RingBuffer.h	/^    ~RingBuffer() {$/;"	f	class:RingBuffer
~SSLContext	ssl/SSLContext.cpp	/^SSLContext::~SSLContext() {$/;"	f	class:tigerso::SSLContext
~SSLContextFactory	test/https_lib/Https.h	/^    ~SSLContextFactory() {$/;"	f	class:SSLContextFactory
~SharedMemory	core/SysUtil.h	/^    ~SharedMemory() {$/;"	f	class:tigerso::SharedMemory
~ShmMutex	core/SysUtil.cpp	/^ShmMutex::~ShmMutex()$/;"	f	class:tigerso::ShmMutex
~Socket	net/Socket.h	/^    ~Socket() { this->close(); }$/;"	f	class:tigerso::Socket
~Thread	core/Thread.cpp	/^Thread::~Thread() {$/;"	f	class:tigerso::Thread
~ThreadMutex	core/ThreadMutex.h	/^    ~ThreadMutex() {$/;"	f	class:tigerso::ThreadMutex
~TimeEvent	test/TimedEvent.h	/^    ~TimeEvent() { destory(); }$/;"	f	class:TimedEvent
~TimeWheelEvent	net/TimeWheelEvent.cpp	/^TimeWheelEvent::~TimeWheelEvent() { destory(); }$/;"	f	class:tigerso::TimeWheelEvent
~UnassignGuard	core/ThreadMutex.h	/^        ~UnassignGuard() {$/;"	f	class:tigerso::ThreadMutex::UnassignGuard
~Upstream	net/Upstream.h	/^    ~Upstream() { destory(); }$/;"	f	class:tigerso::Upstream
~mytest	test/backup/deleteself.cc	/^   ~mytest() {$/;"	f	class:mytest
~nocopyable	core/BaseClass.h	/^    ~nocopyable(){}$/;"	f	class:tigerso::nocopyable
~singleton	core/BaseClass.h	/^    virtual ~singleton(){ if ( pInstance != nullptr) { delete pInstance; } };$/;"	f	class:tigerso::singleton
