!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLDIRS	test/Makefile	/^ALLDIRS := $(shell ls -R $(WORKPATH) | grep '^\\\/.*$$' | grep -v "test" | awk '{gsub(":","");print}')$/;"	m
ALLLOG	core/Logging.h	/^	ALLLOG$/;"	e	enum:tigerso::core::LOGLEVEL
ARRAY_SIZE	http/lib/http_parser.c	41;"	d	file:
Accept	net/SocketUtil.cpp	/^int SocketUtil::Accept(Socket& listen_mcsock, Socket& accept_mcsock) {$/;"	f	class:tigerso::net::SocketUtil
BAD_REQUEST	http/HttpMessage.cpp	/^const std::string HttpResponse::BAD_REQUEST = "HTTP\/1.1 400 Bad Request\\r\\nserver: meltcat\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::http::HttpResponse	file:
BAD_REQUEST	http/HttpMessage.h	/^    static const std::string BAD_REQUEST; $/;"	m	class:tigerso::http::HttpResponse
BIT_AT	http/lib/http_parser.c	45;"	d	file:
BUILDDIR	test/Makefile	/^BUILDDIR := $(OUTPUT)\/Build\/objs$/;"	m
Bind	net/SocketUtil.cpp	/^int SocketUtil::Bind(Socket& mcsock, const std::string& s_addr, const std::string& port, const int family) {$/;"	f	class:tigerso::net::SocketUtil
Buffer	net/Buffer.cpp	/^Buffer:: Buffer(const size_t size)$/;"	f	class:tigerso::net::Buffer
Buffer	net/Buffer.h	/^class Buffer: public core::nocopyable {$/;"	c	namespace:tigerso::net
BufferPtr	net/Socket.h	/^    BufferPtr(std::shared_ptr<Buffer>& buffer)$/;"	f	struct:tigerso::net::BufferPtr
BufferPtr	net/Socket.h	/^    BufferPtr(std::shared_ptr<Buffer>& bufferIn, std::shared_ptr<Buffer>& bufferOut)$/;"	f	struct:tigerso::net::BufferPtr
BufferPtr	net/Socket.h	/^struct BufferPtr {$/;"	s	namespace:tigerso::net
CALLBACK_DATA	http/lib/http_parser.c	128;"	d	file:
CALLBACK_DATA_	http/lib/http_parser.c	105;"	d	file:
CALLBACK_DATA_NOADVANCE	http/lib/http_parser.c	132;"	d	file:
CALLBACK_NOTIFY	http/lib/http_parser.c	99;"	d	file:
CALLBACK_NOTIFY_	http/lib/http_parser.c	80;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	http/lib/http_parser.c	102;"	d	file:
CC	test/Makefile	/^CC := g++$/;"	m
CHUNKED	http/lib/http_parser.c	169;"	d	file:
CLOSE	http/lib/http_parser.c	171;"	d	file:
COMMENT	core/ConfigParser.h	/^const int COMMENT = 1;$/;"	m	namespace:tigerso::core
COMTB	core/ConfigParser.h	13;"	d
CONFIGFILE	core/tigerso.h	/^const std::string  CONFIGFILE  =  CONFIGPATH + "\/" + PROJECT  +".ini";$/;"	m	namespace:tigerso::core
CONFIGPATH	core/tigerso.h	/^const std::string  CONFIGPATH  =  WORKPATH + "\/etc";$/;"	m	namespace:tigerso::core
CONNECTION	http/lib/http_parser.c	165;"	d	file:
CONTENT_LENGTH	http/lib/http_parser.c	166;"	d	file:
COUNT_HEADER_SIZE	http/lib/http_parser.c	154;"	d	file:
CPPFLAGS	test/Makefile	/^CPPFLAGS := -fPIC -shared$/;"	m
CR	http/lib/http_parser.c	410;"	d	file:
CURRENT_STATE	http/lib/http_parser.c	59;"	d	file:
Channel	net/Channel.h	/^    Channel(EventsLoop& loop, const std::shared_ptr<Socket>& sock)$/;"	f	class:tigerso::net::Channel
Channel	net/Channel.h	/^class Channel: public std::enable_shared_from_this<Channel> {$/;"	c	namespace:tigerso::net
ChannelPtr	net/EventsLoop.h	/^typedef std::shared_ptr<Channel> ChannelPtr;$/;"	t	namespace:tigerso::net
Close	net/SocketUtil.cpp	/^int SocketUtil::Close(Socket& mcsock) {$/;"	f	class:tigerso::net::SocketUtil
Condition	core/Condition.h	/^    Condition(ThreadMutex& mutex)$/;"	f	class:tigerso::core::Condition
Condition	core/Condition.h	/^class Condition: public nocopyable {$/;"	c	namespace:tigerso::core
ConfigParser	core/ConfigParser.h	/^	ConfigParser() :isFileExisted(false), isRefreshed(false){}$/;"	f	class:tigerso::core::ConfigParser
ConfigParser	core/ConfigParser.h	/^class ConfigParser$/;"	c	namespace:tigerso::core
Connect	net/SocketUtil.cpp	/^int SocketUtil::Connect(Socket& mcsock, const std::string& s_addr, const std::string& port){$/;"	f	class:tigerso::net::SocketUtil
CreateListenSocket	net/SocketUtil.cpp	/^int SocketUtil::CreateListenSocket($/;"	f	class:tigerso::net::SocketUtil
CurrentThread	core/CurrentThread.h	/^namespace CurrentThread {$/;"	n	namespace:tigerso::core
CurrentThread	core/Thread.cpp	/^namespace CurrentThread {$/;"	n	namespace:tigerso::core	file:
DBG_LOG	core/Logging.h	23;"	d
DEBUG	core/Logging.h	/^	DEBUG,$/;"	e	enum:tigerso::core::LOGLEVEL
DEFAULT_CHANNEL_NUM	net/EventsLoop.h	/^static const int DEFAULT_CHANNEL_NUM = 1024;$/;"	m	namespace:tigerso::net
DEFAULT_SHM_MUTEX_FILENAME	core/SysUtil.h	/^const string DEFAULT_SHM_MUTEX_FILENAME = "TIGERSOSHMMUTEX";$/;"	m	namespace:tigerso::core
DEPY	test/Makefile	/^DEPY := http_parser$/;"	m
DESC	http/HttpMessage.cpp	/^const std::string HttpMessage::DESC = "DESC";$/;"	m	class:tigerso::http::HttpMessage	file:
DESC	http/HttpMessage.h	/^    static const std::string DESC;$/;"	m	class:tigerso::http::HttpMessage
ELEM_AT	http/lib/http_parser.c	51;"	d	file:
ERRLINE	core/ConfigParser.h	/^const int ERRLINE = -1;$/;"	m	namespace:tigerso::core
EVENT_CALLBACK_BREAK	net/Channel.h	/^const int EVENT_CALLBACK_BREAK = 1;$/;"	m	namespace:tigerso::net
EVENT_CALLBACK_CONTINUE	net/Channel.h	/^const int EVENT_CALLBACK_CONTINUE = 0;$/;"	m	namespace:tigerso::net
EventFunc	net/Channel.h	/^typedef int(*EventFunc)(SocketPtr&); $/;"	t	namespace:tigerso::net
EventsLoop	net/EventsLoop.h	/^    EventsLoop(const int channels = DEFAULT_CHANNEL_NUM) $/;"	f	class:tigerso::net::EventsLoop
EventsLoop	net/EventsLoop.h	/^class EventsLoop: public core::nocopyable {$/;"	c	namespace:tigerso::net
FORBIDDEN	http/HttpMessage.cpp	/^const std::string HttpResponse::FORBIDDEN = "HTTP\/1.1 403 Forbidden\\r\\nserver: meltcat\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::http::HttpResponse	file:
FORBIDDEN	http/HttpMessage.h	/^    static const std::string FORBIDDEN;$/;"	m	class:tigerso::http::HttpResponse
F_CHUNKED	http/lib/http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	http/lib/http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	http/lib/http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_CONNECTION_UPGRADE	http/lib/http_parser.h	/^  , F_CONNECTION_UPGRADE    = 1 << 3$/;"	e	enum:flags
F_CONTENTLENGTH	http/lib/http_parser.h	/^  , F_CONTENTLENGTH         = 1 << 7$/;"	e	enum:flags
F_SKIPBODY	http/lib/http_parser.h	/^  , F_SKIPBODY              = 1 << 6$/;"	e	enum:flags
F_TRAILING	http/lib/http_parser.h	/^  , F_TRAILING              = 1 << 4$/;"	e	enum:flags
F_UPGRADE	http/lib/http_parser.h	/^  , F_UPGRADE               = 1 << 5$/;"	e	enum:flags
FileTypeDetector	util/FileTypeDetector.h	/^    FileTypeDetector() {}$/;"	f	class:tigerso::util::FileTypeDetector
FileTypeDetector	util/FileTypeDetector.h	/^class FileTypeDetector: public core::nocopyable {$/;"	c	namespace:tigerso::util
GraceClose	net/SocketUtil.cpp	/^int SocketUtil::GraceClose(Socket& mcsock) {$/;"	f	class:tigerso::net::SocketUtil
HTTP_BOTH	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ERRNO_GEN	http/lib/http_parser.h	281;"	d
HTTP_ERRNO_GEN	http/lib/http_parser.h	285;"	d
HTTP_ERRNO_MAP	http/lib/http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	http/lib/http_parser.h	234;"	d
HTTP_INSPECTION_BLOCK	http/HttpMessage.h	/^const int HTTP_INSPECTION_BLOCK = -1;$/;"	m	namespace:tigerso::http
HTTP_INSPECTION_CONTINUE	http/HttpMessage.h	/^const int HTTP_INSPECTION_CONTINUE = 0;$/;"	m	namespace:tigerso::http
HTTP_INSPECTION_MODIFIED	http/HttpMessage.h	/^const int HTTP_INSPECTION_MODIFIED = 1;$/;"	m	namespace:tigerso::http
HTTP_MAX_HEADER_SIZE	http/lib/http_parser.h	64;"	d
HTTP_METHOD_MAP	http/lib/http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	http/lib/http_parser.h	164;"	d
HTTP_PARSER_ERRNO	http/lib/http_parser.h	289;"	d
HTTP_PARSER_STRICT	http/lib/http_parser.h	53;"	d
HTTP_PARSER_VERSION_MAJOR	http/lib/http_parser.h	28;"	d
HTTP_PARSER_VERSION_MINOR	http/lib/http_parser.h	29;"	d
HTTP_PARSER_VERSION_PATCH	http/lib/http_parser.h	30;"	d
HTTP_REQUEST	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ROLE_REQUEST	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_REQUEST = 0;$/;"	m	namespace:tigerso::http
HTTP_ROLE_RESPONSE	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_RESPONSE = 1;$/;"	m	namespace:tigerso::http
HTTP_ROLE_UINIT	http/HttpMessage.h	/^const http_role_t HTTP_ROLE_UINIT = -1;$/;"	m	namespace:tigerso::http
HTTP_STATUS_MAP	http/lib/http_parser.h	/^  HTTP_STATUS_MAP(XX)$/;"	e	enum:http_status
HTTP_STATUS_MAP	http/lib/http_parser.h	94;"	d
HTTP_STRERROR_GEN	http/lib/http_parser.c	464;"	d	file:
HTTP_STRERROR_GEN	http/lib/http_parser.c	471;"	d	file:
HttpHelper	http/HttpMessage.h	/^    HttpHelper(){}$/;"	f	class:tigerso::http::HttpHelper
HttpHelper	http/HttpMessage.h	/^class HttpHelper {$/;"	c	namespace:tigerso::http
HttpInSpection	http/HttpMessage.h	/^class HttpInSpection {$/;"	c	namespace:tigerso::http
HttpMessage	http/HttpMessage.h	/^class HttpMessage {$/;"	c	namespace:tigerso::http
HttpParser	http/HttpMessage.h	/^    HttpParser(): buffer_(nullptr), length_(0) {}$/;"	f	class:tigerso::http::HttpParser
HttpParser	http/HttpMessage.h	/^class HttpParser: public core::nocopyable {$/;"	c	namespace:tigerso::http
HttpRequest	http/HttpMessage.h	/^    HttpRequest() { role_ = HTTP_ROLE_REQUEST; }$/;"	f	class:tigerso::http::HttpRequest
HttpRequest	http/HttpMessage.h	/^class HttpRequest: public HttpMessage {$/;"	c	namespace:tigerso::http
HttpResponse	http/HttpMessage.h	/^    HttpResponse() { role_ = HTTP_ROLE_RESPONSE; }$/;"	f	class:tigerso::http::HttpResponse
HttpResponse	http/HttpMessage.h	/^class HttpResponse: public HttpMessage {$/;"	c	namespace:tigerso::http
INCFLAGS	test/Makefile	/^INCFLAGS := -I $(WORKPATH)$/;"	m
INCS	test/Makefile	/^INCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.h))$/;"	m
INFO	core/Logging.h	/^	INFO,$/;"	e	enum:tigerso::core::LOGLEVEL
INFO_LOG	core/Logging.h	24;"	d
IS_ALPHA	http/lib/http_parser.c	413;"	d	file:
IS_ALPHANUM	http/lib/http_parser.c	415;"	d	file:
IS_HEADER_CHAR	http/lib/http_parser.c	442;"	d	file:
IS_HEX	http/lib/http_parser.c	416;"	d	file:
IS_HOST_CHAR	http/lib/http_parser.c	429;"	d	file:
IS_HOST_CHAR	http/lib/http_parser.c	434;"	d	file:
IS_MARK	http/lib/http_parser.c	417;"	d	file:
IS_NUM	http/lib/http_parser.c	414;"	d	file:
IS_URL_CHAR	http/lib/http_parser.c	428;"	d	file:
IS_URL_CHAR	http/lib/http_parser.c	432;"	d	file:
IS_USERINFO_CHAR	http/lib/http_parser.c	420;"	d	file:
InitSocket	net/SocketUtil.cpp	/^int SocketUtil::InitSocket(const int domain, const int type, Socket& mcsock) {$/;"	f	class:tigerso::net::SocketUtil
Inspect	http/HttpMessage.cpp	/^int HttpInSpection::Inspect(const std::string& header,  const std::weak_ptr<HttpMessage>& wptr) {$/;"	f	class:tigerso::http::HttpInSpection
KEEP_ALIVE	http/lib/http_parser.c	170;"	d	file:
KEYB	core/ConfigParser.h	14;"	d
KEYVAL	core/ConfigParser.h	/^const int KEYVAL = 2;$/;"	m	namespace:tigerso::core
LF	http/lib/http_parser.c	411;"	d	file:
LIBFLAGS	test/Makefile	/^LIBFLAGS := -L$(LIBPATH) -l$(DEPY) $(PTHREAD_FLAG) $(SHM_FLAG)$/;"	m
LIKELY	http/lib/http_parser.c	71;"	d	file:
LIKELY	http/lib/http_parser.c	74;"	d	file:
LOGLEVEL	core/Logging.h	/^enum LOGLEVEL{$/;"	g	namespace:tigerso::core
LOGNAME	core/tigerso.h	/^const std::string  LOGNAME     =  "httpd";$/;"	m	namespace:tigerso::core
LOGPATH	core/tigerso.h	/^const std::string  LOGPATH     =  WORKPATH + "\/log";$/;"	m	namespace:tigerso::core
LOWER	http/lib/http_parser.c	412;"	d	file:
Listen	net/SocketUtil.cpp	/^int SocketUtil::Listen(Socket& mcsock, const int backlog) {$/;"	f	class:tigerso::net::SocketUtil
Lock	core/SysUtil.h	/^class Lock: public nocopyable {$/;"	c	namespace:tigerso::core
LockGuard	core/SysUtil.h	/^   explicit LockGuard(Lock& Lock)$/;"	f	class:tigerso::core::LockGuard
LockGuard	core/SysUtil.h	/^class LockGuard {$/;"	c	namespace:tigerso::core
LockTryGuard	core/SysUtil.h	/^    explicit LockTryGuard(Lock& Lock)$/;"	f	class:tigerso::core::LockTryGuard
LockTryGuard	core/SysUtil.h	/^class LockTryGuard {$/;"	c	namespace:tigerso::core
Lock_obj	core/SysUtil.h	/^    Lock& Lock_obj;$/;"	m	class:tigerso::core::LockGuard
Lock_obj	core/SysUtil.h	/^    Lock& Lock_obj;$/;"	m	class:tigerso::core::LockTryGuard
Logging	core/Logging.h	/^	Logging():endFmt("<__FUNC__>@__FILE__"), level(NOLOG){}$/;"	f	class:tigerso::core::Logging
Logging	core/Logging.h	/^class Logging {$/;"	c	namespace:tigerso::core
MARK	http/lib/http_parser.c	136;"	d	file:
MAX_CHANNEL_NUM	net/EventsLoop.h	/^static const int MAX_CHANNEL_NUM = 10240;$/;"	m	namespace:tigerso::net
MCBUFFER_DEBUG_	test/buffer_test.cc	14;"	d	file:
MCBUFFER_DEBUG_	test/test_buffer.cpp	16;"	d	file:
MC_LOCK_PRIVATE	core/SysUtil.h	/^const int MC_LOCK_PRIVATE = 0;$/;"	m	namespace:tigerso::core
MC_LOCK_SHARE_PROCESS	core/SysUtil.h	/^const int MC_LOCK_SHARE_PROCESS = 1;$/;"	m	namespace:tigerso::core
METHOD	http/HttpMessage.cpp	/^const std::string HttpMessage::METHOD = "METHOD";$/;"	m	class:tigerso::http::HttpMessage	file:
METHOD	http/HttpMessage.h	/^    static const std::string METHOD;$/;"	m	class:tigerso::http::HttpMessage
MIN	http/lib/http_parser.c	37;"	d	file:
NEW_MESSAGE	http/lib/http_parser.c	456;"	d	file:
NEW_MESSAGE	http/lib/http_parser.c	459;"	d	file:
NOLOG	core/Logging.h	/^	NOLOG = 0,$/;"	e	enum:tigerso::core::LOGLEVEL
NOT_FOUND	http/HttpMessage.cpp	/^const std::string HttpResponse::NOT_FOUND = "HTTP\/1.1 404 Not Found\\r\\nserver: meltcat\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::http::HttpResponse	file:
NOT_FOUND	http/HttpMessage.h	/^    static const std::string NOT_FOUND;$/;"	m	class:tigerso::http::HttpResponse
OBJS	test/Makefile	/^OBJS := $(foreach obj, $(OBJSLIST), $(BUILDDIR)\/$(obj))$/;"	m
OBJSLIST	test/Makefile	/^OBJSLIST := $(notdir $(OLDOBJS))$/;"	m
OK	http/HttpMessage.cpp	/^const std::string HttpResponse::OK = "HTTP\/1.1 200 OK\\r\\nserver: meltcat\/" + core::VERSION + "\\r\\n\\r\\n";$/;"	m	class:tigerso::http::HttpResponse	file:
OK	http/HttpMessage.h	/^    static const std::string OK;$/;"	m	class:tigerso::http::HttpResponse
OLDOBJS	test/Makefile	/^OLDOBJS := $(patsubst %.cpp, %.o, $(SRCS))$/;"	m
OUTPUT	test/Makefile	/^OUTPUT := $(WORKPATH)\/output$/;"	m
PARSING_HEADER	http/lib/http_parser.c	360;"	d	file:
PROJECT	core/tigerso.h	/^const std::string  PROJECT     =  "tigerso";$/;"	m	namespace:tigerso::core
PROJECT	test/Makefile	/^PROJECT := httpd$/;"	m
PROXY_CONNECTION	http/lib/http_parser.c	164;"	d	file:
PTHREAD_FLAG	test/Makefile	/^PTHREAD_FLAG := -lpthread$/;"	m
PackSockAddr	net/SocketUtil.cpp	/^int SocketUtil::PackSockAddr(const std::string& s_addr, const std::string& port, const int family, sockaddr_in& sock_addr) {$/;"	f	class:tigerso::net::SocketUtil
REEXECUTE	http/lib/http_parser.c	66;"	d	file:
RESPONSE_STATUS_MAP	http/HttpMessage.h	/^    static const std::map<int, std::string> RESPONSE_STATUS_MAP;$/;"	m	class:tigerso::http::HttpHelper
RETURN	http/lib/http_parser.c	61;"	d	file:
Register	http/HttpMessage.cpp	/^void HttpInSpection::Register(const std::string& header, httpInspectCallback callback, http_role_t role) { $/;"	f	class:tigerso::http::HttpInSpection
ResolveHost2IP	net/SocketUtil.cpp	/^int SocketUtil::ResolveHost2IP(const std::string& hostname, std::vector<std::string>& ip_vec ) {$/;"	f	class:tigerso::net::SocketUtil
ResolveSockAddr	net/SocketUtil.cpp	/^int SocketUtil::ResolveSockAddr(const sockaddr_in& sock_addr, std::string& s_addr, std::string& port) {$/;"	f	class:tigerso::net::SocketUtil
SECTB	core/ConfigParser.h	11;"	d
SECTE	core/ConfigParser.h	12;"	d
SECTION	core/ConfigParser.h	/^const int SECTION = 0;$/;"	m	namespace:tigerso::core
SET_ERRNO	http/lib/http_parser.c	54;"	d	file:
SHELL	test/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHM_FLAG	test/Makefile	/^SHM_FLAG := -lrt$/;"	m
SOCKET_IOSTATE_CLOSED	net/Buffer.h	/^const int SOCKET_IOSTATE_CLOSED   = -1;$/;"	m	namespace:tigerso::net
SOCKET_IOSTATE_CONTINUE	net/Buffer.h	/^const int SOCKET_IOSTATE_CONTINUE = 0;$/;"	m	namespace:tigerso::net
SOCKET_IOSTATE_ERROR	net/Buffer.h	/^const int SOCKET_IOSTATE_ERROR    = -2;$/;"	m	namespace:tigerso::net
SOCKET_ROLE_CLIENT	net/Socket.h	/^const socket_role_t SOCKET_ROLE_CLIENT =  0;$/;"	m	namespace:tigerso::net
SOCKET_ROLE_SERVER	net/Socket.h	/^const socket_role_t SOCKET_ROLE_SERVER =  1;$/;"	m	namespace:tigerso::net
SOCKET_ROLE_UINIT	net/Socket.h	/^const socket_role_t SOCKET_ROLE_UINIT  = -1;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_ACCEPT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_ACCEPT  =  3;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_BIND	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_BIND    =  1;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_CLOSE	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_CLOSE   =  7;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_CONNECT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_CONNECT =  4;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_LISTEN	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_LISTEN  =  2;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_RECV	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_RECV    =  5;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_SEND	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_SEND    =  6;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_SOCKET	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_SOCKET  =  0;$/;"	m	namespace:tigerso::net
SOCKET_STAGE_UINIT	net/Socket.h	/^const socket_stage_t SOCKET_STAGE_UINIT   = -1;$/;"	m	namespace:tigerso::net
SPLIT	core/Logging.h	15;"	d
SPLIT	core/Logging.h	18;"	d
SRCS	test/Makefile	/^SRCS := $(foreach dir, $(ALLDIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
STATUSCODE	http/HttpMessage.cpp	/^const std::string HttpMessage::STATUSCODE = "STATUSCODE";$/;"	m	class:tigerso::http::HttpMessage	file:
STATUSCODE	http/HttpMessage.h	/^    static const std::string STATUSCODE;$/;"	m	class:tigerso::http::HttpMessage
STRICT_CHECK	http/lib/http_parser.c	449;"	d	file:
STRICT_CHECK	http/lib/http_parser.c	458;"	d	file:
STRICT_TOKEN	http/lib/http_parser.c	424;"	d	file:
ScanFileType	util/FileTypeDetector.h	/^struct ScanFileType {$/;"	s	namespace:tigerso::util
SetAddrReuseable	net/SocketUtil.cpp	/^bool SocketUtil::SetAddrReuseable(Socket& mcsock, bool on) {$/;"	f	class:tigerso::net::SocketUtil
SetCloseOnExec	net/SocketUtil.cpp	/^bool SocketUtil::SetCloseOnExec(Socket& mcsock) {$/;"	f	class:tigerso::net::SocketUtil
SetKeepAlive	net/SocketUtil.cpp	/^bool SocketUtil::SetKeepAlive(Socket& mcsock, bool on) {$/;"	f	class:tigerso::net::SocketUtil
SetPortReuseable	net/SocketUtil.cpp	/^bool SocketUtil::SetPortReuseable(Socket& mcsock, bool on) {$/;"	f	class:tigerso::net::SocketUtil
SetTcpNoDelay	net/SocketUtil.cpp	/^bool SocketUtil::SetTcpNoDelay(Socket& mcsock, bool on) {$/;"	f	class:tigerso::net::SocketUtil
SharedMemory	core/SysUtil.h	/^    SharedMemory():$/;"	f	class:tigerso::core::SharedMemory
SharedMemory	core/SysUtil.h	/^    SharedMemory(const string& name, const size_t size, const int prot = MAP_SHARED):$/;"	f	class:tigerso::core::SharedMemory
SharedMemory	core/SysUtil.h	/^class SharedMemory: public nocopyable {$/;"	c	namespace:tigerso::core
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex()$/;"	f	class:tigerso::core::ShmMutex
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex(const ShmMutex& mutex)$/;"	f	class:tigerso::core::ShmMutex
ShmMutex	core/SysUtil.cpp	/^ShmMutex::ShmMutex(const string& shm_name)$/;"	f	class:tigerso::core::ShmMutex
ShmMutex	core/SysUtil.h	/^class ShmMutex: public Lock {$/;"	c	namespace:tigerso::core
Socket	net/Socket.h	/^    Socket(): bufPtr_(inBuffer_, outBuffer_) {$/;"	f	class:tigerso::net::Socket
Socket	net/Socket.h	/^class Socket: public core::nocopyable {$/;"	c	namespace:tigerso::net
SocketPtr	net/Socket.h	/^typedef std::shared_ptr<Socket> SocketPtr;$/;"	t	namespace:tigerso::net
SocketUtil	net/SocketUtil.h	/^class SocketUtil {$/;"	c	namespace:tigerso::net
SysUtil	core/SysUtil.h	/^class SysUtil {$/;"	c	namespace:tigerso::core
T	http/lib/http_parser.c	237;"	d	file:
T	http/lib/http_parser.c	239;"	d	file:
T	http/lib/http_parser.c	277;"	d	file:
TARGET	test/Makefile	/^TARGET := $(OUTPUT)\/$(PROJECT)$/;"	m
TOKEN	http/lib/http_parser.c	427;"	d	file:
TOKEN	http/lib/http_parser.c	431;"	d	file:
TRANSFER_ENCODING	http/lib/http_parser.c	167;"	d	file:
TS_CORE_BASECLASS_H_	core/BaseClass.h	2;"	d
TS_CORE_CONDITION_H_	core/Condition.h	2;"	d
TS_CORE_CONFIGPARSER_H_	core/ConfigParser.h	2;"	d
TS_CORE_CURRENTTHREAD_H_	core/CurrentThread.h	2;"	d
TS_CORE_LOGGING_H_	core/Logging.h	7;"	d
TS_CORE_PTHREAD_H_	core/Thread.h	2;"	d
TS_CORE_SYSUTIL_H_	core/SysUtil.h	2;"	d
TS_CORE_THREADMUTEX_H_	core/ThreadMutex.h	2;"	d
TS_CORE_THREADPOOL_H_	core/ThreadPool.h	2;"	d
TS_CORE_TIGERSO_H_	core/tigerso.h	2;"	d
TS_HTTP_HTTPMESSAGE_H_	http/HttpMessage.h	2;"	d
TS_NET_BUFFER_H_	net/Buffer.h	2;"	d
TS_NET_CHANNEL_H_	net/Channel.h	2;"	d
TS_NET_EVENTSLOOP_H_	net/EventsLoop.h	2;"	d
TS_NET_SOCKETUTIL_H_	net/SocketUtil.h	2;"	d
TS_NET_SOCKET_H_	net/Socket.h	2;"	d
TS_NET_TCPCONNECTION_H_	net/TcpConnection.h	2;"	d
TS_UTIL_FILETYPEDETECTOR_H_	util/FileTypeDetector.h	2;"	d
Task	core/ThreadPool.h	/^    typedef Thread::ThreadFunc Task;$/;"	t	class:tigerso::core::ThreadPool
TcpConnection	net/TcpConnection.h	/^class TcpConnection: public core::nocopyable {$/;"	c	namespace:tigerso::net
TestConnect	net/SocketUtil.cpp	/^bool SocketUtil::TestConnect(Socket& sock) {$/;"	f	class:tigerso::net::SocketUtil
Thread	core/Thread.cpp	/^Thread::Thread(const ThreadFunc& func, const std::string& name)$/;"	f	class:tigerso::core::Thread
Thread	core/Thread.h	/^class Thread: public nocopyable {$/;"	c	namespace:tigerso::core
ThreadData	core/Thread.cpp	/^    ThreadData(const ThreadFunc& func,$/;"	f	class:tigerso::core::ThreadData
ThreadData	core/Thread.cpp	/^class ThreadData {$/;"	c	namespace:tigerso::core	file:
ThreadFunc	core/Thread.cpp	/^    typedef Thread::ThreadFunc ThreadFunc;$/;"	t	class:tigerso::core::ThreadData	file:
ThreadFunc	core/Thread.h	/^    typedef std::function<void()>  ThreadFunc;$/;"	t	class:tigerso::core::Thread
ThreadInit	core/Thread.cpp	/^    ThreadInit() {$/;"	f	class:tigerso::core::initmain__::ThreadInit
ThreadInit	core/Thread.cpp	/^class ThreadInit {$/;"	c	namespace:tigerso::core::initmain__	file:
ThreadMutex	core/ThreadMutex.h	/^    ThreadMutex()$/;"	f	class:tigerso::core::ThreadMutex
ThreadMutex	core/ThreadMutex.h	/^class ThreadMutex: public Lock {$/;"	c	namespace:tigerso::core
ThreadPool	core/ThreadPool.h	/^    explicit ThreadPool(const std::string& name = "ThreadPool")$/;"	f	class:tigerso::core::ThreadPool
ThreadPool	core/ThreadPool.h	/^class ThreadPool: public nocopyable {$/;"	c	namespace:tigerso::core
ThreadPtr	core/ThreadPool.h	/^    typedef std::shared_ptr<Thread> ThreadPtr;$/;"	t	class:tigerso::core::ThreadPool
UF_FRAGMENT	http/lib/http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	http/lib/http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	http/lib/http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	http/lib/http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	http/lib/http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	http/lib/http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	http/lib/http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	http/lib/http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
ULLONG_MAX	http/lib/http_parser.c	33;"	d	file:
UNLIKELY	http/lib/http_parser.c	72;"	d	file:
UNLIKELY	http/lib/http_parser.c	75;"	d	file:
UPDATE_STATE	http/lib/http_parser.c	60;"	d	file:
UPGRADE	http/lib/http_parser.c	168;"	d	file:
URL	http/HttpMessage.cpp	/^const std::string HttpMessage::URL = "URL";$/;"	m	class:tigerso::http::HttpMessage	file:
URL	http/HttpMessage.h	/^    static const std::string URL;$/;"	m	class:tigerso::http::HttpMessage
UnassignGuard	core/ThreadMutex.h	/^        UnassignGuard(ThreadMutex& mutex)$/;"	f	class:tigerso::core::ThreadMutex::UnassignGuard
UnassignGuard	core/ThreadMutex.h	/^    class UnassignGuard {$/;"	c	class:tigerso::core::ThreadMutex
Unregister	http/HttpMessage.cpp	/^void HttpInSpection::Unregister(const std::string& header, http_role_t role) {$/;"	f	class:tigerso::http::HttpInSpection
VERSION	core/tigerso.h	/^const std::string  VERSION     =  "1.0.0";$/;"	m	namespace:tigerso::core
VERSION	http/HttpMessage.cpp	/^const std::string HttpMessage::VERSION = "VERSION";$/;"	m	class:tigerso::http::HttpMessage	file:
VERSION	http/HttpMessage.h	/^    static const std::string VERSION;$/;"	m	class:tigerso::http::HttpMessage
ValidateAddr	net/SocketUtil.cpp	/^bool SocketUtil::ValidateAddr(const std::string& addr) {$/;"	f	class:tigerso::net::SocketUtil
ValidatePort	net/SocketUtil.cpp	/^bool SocketUtil::ValidatePort(const std::string& sport) {$/;"	f	class:tigerso::net::SocketUtil
WORKPATH	core/tigerso.h	/^const std::string  WORKPATH    =  "\/usr\/" + PROJECT;$/;"	m	namespace:tigerso::core
WORKPATH	test/Makefile	/^WORKPATH := $(shell cd .. && pwd)$/;"	m
XX	http/lib/http_parser.c	1013;"	d	file:
XX	http/lib/http_parser.c	1034;"	d	file:
XX	http/lib/http_parser.c	176;"	d	file:
XX	http/lib/http_parser.c	178;"	d	file:
XX	http/lib/http_parser.h	157;"	d
XX	http/lib/http_parser.h	159;"	d
XX	http/lib/http_parser.h	208;"	d
XX	http/lib/http_parser.h	210;"	d
acceptMasterSocket	test/test_http.cpp	/^int acceptMasterSocket(SocketPtr& master) {$/;"	f
addChannel	net/EventsLoop.cpp	/^int EventsLoop::addChannel(const ChannelPtr& cnptr) {$/;"	f	class:tigerso::net::EventsLoop
addData	net/Buffer.cpp	/^size_t Buffer::addData(const char* buf, size_t len) {$/;"	f	class:tigerso::net::Buffer
addData	net/Buffer.cpp	/^size_t Buffer::addData(const std::string& data) {$/;"	f	class:tigerso::net::Buffer
addr_	net/Socket.h	/^    std::string addr_;$/;"	m	class:tigerso::net::Socket
afterCallback	test/test_http.cpp	/^int afterCallback(SocketPtr& sockptr) {$/;"	f
afterFork	core/Thread.cpp	/^void afterFork() {$/;"	f	namespace:tigerso::core::initmain__
after_cb	net/Channel.h	/^    EventFunc after_cb = nullptr;$/;"	m	class:tigerso::net::Channel
align	net/Buffer.cpp	/^int Buffer::align() {$/;"	f	class:tigerso::net::Buffer
alive	net/Channel.cpp	/^bool Channel::alive() {$/;"	f	class:tigerso::net::Channel
assignHolder	core/ThreadMutex.h	/^    void assignHolder() {$/;"	f	class:tigerso::core::ThreadMutex
beforeCallback	test/test_http.cpp	/^int beforeCallback(SocketPtr& sockptr) {$/;"	f
before_cb	net/Channel.h	/^    EventFunc before_cb = nullptr;$/;"	m	class:tigerso::net::Channel
blockIO_	net/Socket.h	/^    bool blockIO_ = false;$/;"	m	class:tigerso::net::Socket
body_	http/HttpMessage.h	/^    std::string body_;$/;"	m	class:tigerso::http::HttpMessage
bufPtr_	net/Socket.h	/^    BufferPtr bufPtr_;$/;"	m	class:tigerso::net::Socket
buffer_	http/HttpMessage.h	/^    const char* buffer_;$/;"	m	class:tigerso::http::HttpParser
buffer_	net/Buffer.h	/^    char* buffer_;$/;"	m	class:tigerso::net::Buffer
bufsize_	net/Buffer.h	/^    size_t bufsize_;$/;"	m	class:tigerso::net::Buffer
c_ptr	test/test_mutex.cpp	/^share_count* c_ptr = nullptr;$/;"	v
cacheTid_	core/Thread.cpp	/^   __thread int cacheTid_ = 0;$/;"	m	namespace:tigerso::core::CurrentThread	file:
channelNum_	net/EventsLoop.h	/^    const int channelNum_ = DEFAULT_CHANNEL_NUM;$/;"	m	class:tigerso::net::EventsLoop
channelPtr_	net/Socket.h	/^    std::shared_ptr<Channel> channelPtr_ = nullptr;$/;"	m	class:tigerso::net::Socket
channels_	net/EventsLoop.h	/^    std::map<socket_t, ChannelPtr> channels_;$/;"	m	class:tigerso::net::EventsLoop
child_start	test/test_mutex.cpp	/^int child_start() {$/;"	f
clear	http/HttpMessage.h	/^    virtual void clear() {$/;"	f	class:tigerso::http::HttpMessage
clear	http/HttpMessage.h	/^    void clear() {$/;"	f	class:tigerso::http::HttpRequest
clear	http/HttpMessage.h	/^    void clear() {$/;"	f	class:tigerso::http::HttpResponse
clear	net/Buffer.cpp	/^size_t Buffer::clear() {$/;"	f	class:tigerso::net::Buffer
close	net/Socket.cpp	/^int Socket::close() {$/;"	f	class:tigerso::net::Socket
cond_	core/Condition.h	/^    pthread_cond_t cond_;$/;"	m	class:tigerso::core::Condition
configMap	core/ConfigParser.h	/^	std::map<std::string, std::map<std::string, std::string> > configMap;$/;"	m	class:tigerso::core::ConfigParser
contains	net/EventsLoop.cpp	/^bool EventsLoop::contains(const ChannelPtr& cnnl) {$/;"	f	class:tigerso::net::EventsLoop
contains	net/EventsLoop.cpp	/^bool EventsLoop::contains(const SocketPtr& sockptr) {$/;"	f	class:tigerso::net::EventsLoop
content_length	http/lib/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser
cookie_	util/FileTypeDetector.h	/^    magic_t cookie_ = NULL;$/;"	m	class:tigerso::util::FileTypeDetector
core	core/BaseClass.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/Condition.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/ConfigParser.cpp	/^namespace tigerso::core {$/;"	n	class:tigerso	file:
core	core/ConfigParser.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/CurrentThread.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/Logging.cpp	/^namespace tigerso::core {$/;"	n	class:tigerso	file:
core	core/Logging.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/SysUtil.cpp	/^namespace tigerso::core {$/;"	n	class:tigerso	file:
core	core/SysUtil.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/Thread.cpp	/^namespace tigerso::core {$/;"	n	class:tigerso	file:
core	core/Thread.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/ThreadMutex.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/ThreadPool.h	/^namespace tigerso::core {$/;"	n	class:tigerso
core	core/tigerso.h	/^namespace tigerso::core {$/;"	n	class:tigerso
count	test/test_mutex.cpp	/^    int count;$/;"	m	struct:share_count	file:
createEpollBase	net/EventsLoop.cpp	/^int EventsLoop::createEpollBase() {$/;"	f	class:tigerso::net::EventsLoop
create_process_shared_memory	core/SysUtil.cpp	/^void* SysUtil::create_process_shared_memory(const string& shm_name, size_t len)$/;"	f	class:tigerso::core::SysUtil
ctlChannel	net/EventsLoop.cpp	/^int EventsLoop::ctlChannel(const ChannelPtr& cnptr, const int op) {$/;"	f	class:tigerso::net::EventsLoop
data	http/lib/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser
dbgLog	core/Logging.cpp	/^int Logging::dbgLog(const char* fmt, ...)$/;"	f	class:tigerso::core::Logging
decideLineType	core/ConfigParser.cpp	/^int ConfigParser::decideLineType(const std::string& line, std::string& content)$/;"	f	class:tigerso::core::ConfigParser
deleteFromSocketList	test/test_http.cpp	/^int deleteFromSocketList(const SocketPtr& sockptr) {$/;"	f
desc_	http/HttpMessage.h	/^    std::string desc_;$/;"	m	class:tigerso::http::HttpResponse
description	http/lib/http_parser.c	/^  const char *description;$/;"	m	struct:__anon2	file:
destroy	core/SysUtil.cpp	/^int SharedMemory::destroy() {$/;"	f	class:tigerso::core::SharedMemory
destroy	core/SysUtil.cpp	/^int ShmMutex::destroy()$/;"	f	class:tigerso::core::ShmMutex
destroy	core/ThreadMutex.h	/^    int destroy() {$/;"	f	class:tigerso::core::ThreadMutex
destroy_process_shared_memory	core/SysUtil.cpp	/^int SysUtil::destroy_process_shared_memory(const string& shm_name, void* ptr, size_t len)$/;"	f	class:tigerso::core::SysUtil
detectBuffer	util/FileTypeDetector.h	/^    const char* detectBuffer(const char* buffer, size_t len) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFd	util/FileTypeDetector.h	/^    const char* detectFd(const int fd) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFile	util/FileTypeDetector.h	/^    const char* detectFile(const char* filename) {$/;"	f	class:tigerso::util::FileTypeDetector
detectFile	util/FileTypeDetector.h	/^    const char* detectFile(const std::string& file) { return detectFile(file.c_str()); }$/;"	f	class:tigerso::util::FileTypeDetector
disableAllEvent	net/Channel.cpp	/^bool Channel::disableAllEvent() {$/;"	f	class:tigerso::net::Channel
disableReadEvent	net/Channel.cpp	/^bool Channel::disableReadEvent() {$/;"	f	class:tigerso::net::Channel
disableWriteEvent	net/Channel.cpp	/^bool Channel::disableWriteEvent() {$/;"	f	class:tigerso::net::Channel
displayChannelList	net/EventsLoop.cpp	/^void EventsLoop::displayChannelList() const{$/;"	f	class:tigerso::net::EventsLoop
edgeFlag	net/Channel.h	/^        bool edgeFlag;$/;"	m	struct:tigerso::net::Channel::__anon3
enableReadEvent	net/Channel.cpp	/^bool Channel::enableReadEvent() {$/;"	f	class:tigerso::net::Channel
enableWriteEvent	net/Channel.cpp	/^bool Channel::enableWriteEvent() {$/;"	f	class:tigerso::net::Channel
endFmt	core/Logging.h	/^	const std::string endFmt;$/;"	m	class:tigerso::core::Logging
epevents_	net/EventsLoop.h	/^    epoll_event epevents_[MAX_CHANNEL_NUM];$/;"	m	class:tigerso::net::EventsLoop
epfd_	net/EventsLoop.h	/^    int epfd_ = -1;$/;"	m	class:tigerso::net::EventsLoop
errorCallback	test/test_http.cpp	/^int errorCallback(SocketPtr& sockptr) {$/;"	f
error_cb	net/Channel.h	/^    EventFunc error_cb = nullptr;$/;"	m	class:tigerso::net::Channel
events	net/Channel.h	/^    } events;$/;"	m	class:tigerso::net::Channel	typeref:struct:tigerso::net::Channel::__anon3
evf_t	net/Channel.h	/^typedef unsigned int evf_t;$/;"	t	namespace:tigerso::net
exist	net/Socket.cpp	/^bool Socket::exist() const {$/;"	f	class:tigerso::net::Socket
ext_list	util/FileTypeDetector.h	/^    const char* ext_list;$/;"	m	struct:tigerso::util::ScanFileType
field_data	http/lib/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon1
field_set	http/lib/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url
filename	core/ConfigParser.h	/^	std::string filename;$/;"	m	class:tigerso::core::ConfigParser
flags	http/lib/http_parser.h	/^  unsigned int flags : 8;        \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser
flags	http/lib/http_parser.h	/^enum flags$/;"	g
func_	core/Thread.cpp	/^    ThreadFunc func_;$/;"	m	class:tigerso::core::ThreadData	file:
func_	core/Thread.h	/^    ThreadFunc func_;$/;"	m	class:tigerso::core::Thread
gain_gap	net/Buffer.h	/^    static const size_t gain_gap = 512;$/;"	m	class:tigerso::net::Buffer
getAllKey	core/ConfigParser.cpp	/^void ConfigParser::getAllKey()$/;"	f	class:tigerso::core::ConfigParser
getBody	http/HttpMessage.h	/^    virtual std::string& getBody() { return body_; }$/;"	f	class:tigerso::http::HttpMessage
getChannel	net/EventsLoop.cpp	/^ChannelPtr EventsLoop::getChannel(const SocketPtr& sockptr) {$/;"	f	class:tigerso::net::EventsLoop
getChannel	net/Socket.cpp	/^std::shared_ptr<Channel>& Socket::getChannel() { $/;"	f	class:tigerso::net::Socket
getChannelSocket	net/Channel.cpp	/^std::shared_ptr<Socket> Channel::getChannelSocket() const {$/;"	f	class:tigerso::net::Channel
getDesc	http/HttpMessage.h	/^    std::string getDesc() { return desc_; }$/;"	f	class:tigerso::http::HttpResponse
getDesc	http/HttpMessage.h	/^    virtual std::string getDesc(){ return ""; };$/;"	f	class:tigerso::http::HttpMessage
getEpollBase	net/EventsLoop.cpp	/^int EventsLoop::getEpollBase() const {$/;"	f	class:tigerso::net::EventsLoop
getFormatTime	core/SysUtil.cpp	/^string SysUtil::getFormatTime(const string& fmt){$/;"	f	class:tigerso::core::SysUtil
getInBufferPtr	net/Socket.h	/^    std::shared_ptr<Buffer> getInBufferPtr() const { return bufPtr_.in_.lock(); }$/;"	f	class:tigerso::net::Socket
getInstance	core/ConfigParser.cpp	/^ConfigParser* ConfigParser::getInstance()$/;"	f	class:tigerso::core::ConfigParser
getInstance	core/Logging.cpp	/^Logging* Logging::getInstance()$/;"	f	class:tigerso::core::Logging
getLogFile	core/Logging.cpp	/^std::string Logging::getLogFile() const$/;"	f	class:tigerso::core::Logging
getMethod	http/HttpMessage.h	/^    std::string getMethod() { return method_; }$/;"	f	class:tigerso::http::HttpRequest
getMethod	http/HttpMessage.h	/^    virtual std::string getMethod(){ return ""; };$/;"	f	class:tigerso::http::HttpMessage
getOutBufferPtr	net/Socket.h	/^    std::shared_ptr<Buffer> getOutBufferPtr() const { return bufPtr_.out_.lock(); }$/;"	f	class:tigerso::net::Socket
getPtr	net/Channel.cpp	/^std::shared_ptr<Channel> Channel::getPtr() {$/;"	f	class:tigerso::net::Channel
getReadIdx	net/Buffer.cpp	/^size_t Buffer::getReadIdx() const {$/;"	f	class:tigerso::net::Buffer
getReadPtr	net/Buffer.cpp	/^const char* Buffer::getReadPtr() const {$/;"	f	class:tigerso::net::Buffer
getReadableBytes	net/Buffer.cpp	/^ssize_t Buffer::getReadableBytes() const {$/;"	f	class:tigerso::net::Buffer
getResponseStatusDesc	http/HttpMessage.h	/^    static std::string getResponseStatusDesc(const int code) {$/;"	f	class:tigerso::http::HttpHelper
getRole	http/HttpMessage.h	/^    virtual http_role_t getRole() { return role_; }$/;"	f	class:tigerso::http::HttpMessage
getRole	net/Socket.cpp	/^socket_role_t Socket::getRole() const {$/;"	f	class:tigerso::net::Socket
getSockAddr	net/Socket.cpp	/^int Socket::getSockAddr(sockaddr_in& inaddr) {$/;"	f	class:tigerso::net::Socket
getSocket	net/Socket.cpp	/^socket_t Socket::getSocket() const {$/;"	f	class:tigerso::net::Socket
getStage	net/Socket.cpp	/^socket_stage_t Socket::getStage() const {$/;"	f	class:tigerso::net::Socket
getStatuscode	http/HttpMessage.h	/^    int         getStatuscode() { return statuscode_; }$/;"	f	class:tigerso::http::HttpResponse
getStatuscode	http/HttpMessage.h	/^    virtual int         getStatuscode(){ return 0; };$/;"	f	class:tigerso::http::HttpMessage
getStrAddr	net/Socket.cpp	/^std::string Socket::getStrAddr() const {$/;"	f	class:tigerso::net::Socket
getStrPort	net/Socket.cpp	/^std::string Socket::getStrPort() const {$/;"	f	class:tigerso::net::Socket
getThreadMutex	core/ThreadMutex.h	/^    pthread_mutex_t* getThreadMutex() {$/;"	f	class:tigerso::core::ThreadMutex
getTime	core/Logging.cpp	/^std::string Logging::getTime()$/;"	f	class:tigerso::core::Logging
getUrl	http/HttpMessage.h	/^    std::string getUrl() { return url_; }$/;"	f	class:tigerso::http::HttpRequest
getUrl	http/HttpMessage.h	/^    virtual std::string getUrl(){ return ""; };$/;"	f	class:tigerso::http::HttpMessage
getValueByHeader	http/HttpMessage.h	/^    virtual std::string getValueByHeader(const std::string& header) {$/;"	f	class:tigerso::http::HttpMessage
getValueByKey	core/ConfigParser.cpp	/^std::string ConfigParser::getValueByKey(const std::string& section, const std::string& key)$/;"	f	class:tigerso::core::ConfigParser
getVersion	http/HttpMessage.h	/^    virtual std::string getVersion() { return version_; };$/;"	f	class:tigerso::http::HttpMessage
getWriteIdx	net/Buffer.cpp	/^size_t Buffer::getWriteIdx() const {$/;"	f	class:tigerso::net::Buffer
get_shm_mutex	core/SysUtil.cpp	/^shm_mutex_t* ShmMutex::get_shm_mutex() const$/;"	f	class:tigerso::core::ShmMutex
get_shm_name	core/SysUtil.cpp	/^string ShmMutex::get_shm_name() const$/;"	f	class:tigerso::core::ShmMutex
get_shm_ptr	core/SysUtil.cpp	/^void* SharedMemory::get_shm_ptr() const {$/;"	f	class:tigerso::core::SharedMemory
get_work_path	core/SysUtil.cpp	/^string SysUtil::get_work_path()$/;"	f	class:tigerso::core::SysUtil
group	util/FileTypeDetector.h	/^    const char* group;$/;"	m	struct:tigerso::util::ScanFileType
h_C	http/lib/http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	http/lib/http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	http/lib/http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	http/lib/http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	http/lib/http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	http/lib/http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_connection_upgrade	http/lib/http_parser.c	/^  , h_connection_upgrade$/;"	e	enum:header_states	file:
h_content_length	http/lib/http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_general	http/lib/http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	http/lib/http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	http/lib/http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	http/lib/http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_connection_token	http/lib/http_parser.c	/^  , h_matching_connection_token$/;"	e	enum:header_states	file:
h_matching_connection_token_start	http/lib/http_parser.c	/^  , h_matching_connection_token_start$/;"	e	enum:header_states	file:
h_matching_connection_upgrade	http/lib/http_parser.c	/^  , h_matching_connection_upgrade$/;"	e	enum:header_states	file:
h_matching_content_length	http/lib/http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	http/lib/http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	http/lib/http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	http/lib/http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	http/lib/http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	http/lib/http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	http/lib/http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	http/lib/http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
header_field	http/HttpMessage.h	/^    std::string header_field;$/;"	m	class:tigerso::http::HttpMessage
header_state	http/lib/http_parser.h	/^  unsigned int header_state : 7; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser
header_states	http/lib/http_parser.c	/^enum header_states$/;"	g	file:
headers_	http/HttpMessage.h	/^    headers_t headers_;$/;"	m	class:tigerso::http::HttpMessage
headers_t	http/HttpMessage.h	/^typedef std::vector<std::pair<std::string,std::string>> headers_t;$/;"	t	namespace:tigerso::http
holder_	core/ThreadMutex.h	/^    pid_t holder_ = 0;$/;"	m	class:tigerso::core::ThreadMutex
http	http/HttpMessage.cpp	/^namespace tigerso::http {$/;"	n	class:tigerso	file:
http	http/HttpMessage.h	/^namespace tigerso::http {$/;"	n	class:tigerso
httpInspectCallback	http/HttpMessage.h	/^typedef int (*httpInspectCallback)(const std::weak_ptr<HttpMessage>&);$/;"	t	namespace:tigerso::http
http_body_is_final	http/lib/http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f
http_cb	http/lib/http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t
http_data_cb	http/lib/http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t
http_errno	http/lib/http_parser.h	/^  unsigned int http_errno : 7;$/;"	m	struct:http_parser
http_errno	http/lib/http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	http/lib/http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f
http_errno_name	http/lib/http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f
http_host_state	http/lib/http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	http/lib/http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser
http_message_needs_eof	http/lib/http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f
http_method	http/lib/http_parser.h	/^enum http_method$/;"	g
http_method_str	http/lib/http_parser.c	/^http_method_str (enum http_method m)$/;"	f
http_minor	http/lib/http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser
http_parse_host	http/lib/http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	file:
http_parse_host_char	http/lib/http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	file:
http_parser	http/lib/http_parser.h	/^struct http_parser {$/;"	s
http_parser	http/lib/http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser_execute	http/lib/http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f
http_parser_h	http/lib/http_parser.h	22;"	d
http_parser_init	http/lib/http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f
http_parser_parse_url	http/lib/http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f
http_parser_pause	http/lib/http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f
http_parser_settings	http/lib/http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	http/lib/http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_settings_init	http/lib/http_parser.c	/^http_parser_settings_init(http_parser_settings *settings)$/;"	f
http_parser_type	http/lib/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	http/lib/http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	http/lib/http_parser.h	/^enum http_parser_url_fields$/;"	g
http_parser_url_init	http/lib/http_parser.c	/^http_parser_url_init(struct http_parser_url *u) {$/;"	f
http_parser_version	http/lib/http_parser.c	/^http_parser_version(void) {$/;"	f
http_role_t	http/HttpMessage.h	/^typedef int http_role_t;$/;"	t	namespace:tigerso::http
http_should_keep_alive	http/lib/http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f
http_status	http/lib/http_parser.h	/^enum http_status$/;"	g
http_strerror_tab	http/lib/http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon2	file:
hupFlag	net/Channel.h	/^        bool hupFlag;$/;"	m	struct:tigerso::net::Channel::__anon3
inBuffer_	net/Socket.h	/^    std::shared_ptr<Buffer> inBuffer_ = std::make_shared<Buffer>();$/;"	m	class:tigerso::net::Socket
inBuffer_	net/TcpConnection.h	/^    std::shared_ptr<Buffer> inBuffer_;$/;"	m	class:tigerso::net::TcpConnection
in_	net/Socket.h	/^    std::weak_ptr<Buffer> in_;$/;"	m	struct:tigerso::net::BufferPtr
index	http/lib/http_parser.h	/^  unsigned int index : 7;        \/* index into current matcher *\/$/;"	m	struct:http_parser
infoLog	core/Logging.cpp	/^int Logging::infoLog(const char* fmt, ...)$/;"	f	class:tigerso::core::Logging
init	core/SysUtil.cpp	/^int SharedMemory::init() {$/;"	f	class:tigerso::core::SharedMemory
init	core/SysUtil.cpp	/^int ShmMutex::init()$/;"	f	class:tigerso::core::ShmMutex
init	core/Thread.cpp	/^ThreadInit init;$/;"	m	namespace:tigerso::core::initmain__	file:
init	core/ThreadMutex.h	/^    int init() {$/;"	f	class:tigerso::core::ThreadMutex
init	util/FileTypeDetector.h	/^    int init(int flags = MAGIC_MIME_TYPE) {$/;"	f	class:tigerso::util::FileTypeDetector
initParser	http/HttpMessage.cpp	/^int HttpParser::initParser(HttpMessage& message) {$/;"	f	class:tigerso::http::HttpParser
initmain__	core/Thread.cpp	/^namespace initmain__ {$/;"	n	namespace:tigerso::core	file:
int16_t	http/lib/http_parser.h	/^typedef __int16 int16_t;$/;"	t
int32_t	http/lib/http_parser.h	/^typedef __int32 int32_t;$/;"	t
int64_t	http/lib/http_parser.h	/^typedef __int64 int64_t;$/;"	t
int8_t	http/lib/http_parser.h	/^typedef __int8 int8_t;$/;"	t
isFileExisted	core/ConfigParser.h	/^	bool isFileExisted;$/;"	m	class:tigerso::core::ConfigParser
isFull	core/ThreadPool.h	/^    bool isFull() const {$/;"	f	class:tigerso::core::ThreadPool
isLocked	core/SysUtil.h	/^    bool isLocked() const {$/;"	f	class:tigerso::core::LockTryGuard
isLockedByCurrentThread	core/ThreadMutex.h	/^    bool isLockedByCurrentThread() const {$/;"	f	class:tigerso::core::ThreadMutex
isMainThread	core/CurrentThread.h	/^   inline bool isMainThread() { return CurrentThread::tid() == getpid(); }$/;"	f	namespace:tigerso::core::CurrentThread
isNIO	net/Socket.cpp	/^bool Socket::isNIO() const {$/;"	f	class:tigerso::net::Socket
isRefreshed	core/ConfigParser.h	/^	bool isRefreshed;$/;"	m	class:tigerso::core::ConfigParser
isVaildResponseStatusCode	http/HttpMessage.h	/^    static bool isVaildResponseStatusCode(const int code) {$/;"	f	class:tigerso::http::HttpHelper
join	core/Thread.cpp	/^int Thread::join() {$/;"	f	class:tigerso::core::Thread
joined_	core/Thread.h	/^    bool joined_ = false;$/;"	m	class:tigerso::core::Thread
keepFlag	net/Channel.h	/^        bool keepFlag;$/;"	m	struct:tigerso::net::Channel::__anon3
least_len	net/Buffer.h	/^    static const size_t least_len = 10240;$/;"	m	class:tigerso::net::Buffer
len	http/lib/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon1
length_	http/HttpMessage.h	/^    size_t length_;$/;"	m	class:tigerso::http::HttpParser
lenient_http_headers	http/lib/http_parser.h	/^  unsigned int lenient_http_headers : 1;$/;"	m	struct:http_parser
level	core/Logging.h	/^	int level;$/;"	m	class:tigerso::core::Logging
listen_sock	test/buffer_test.cc	/^McSocket listen_sock;$/;"	v
listen_sock	test/test_buffer.cpp	/^McSocket listen_sock;$/;"	v
loadConfig2Map	core/ConfigParser.cpp	/^int ConfigParser::loadConfig2Map()$/;"	f	class:tigerso::core::ConfigParser
lock	core/SysUtil.cpp	/^int ShmMutex::lock()$/;"	f	class:tigerso::core::ShmMutex
lock	core/ThreadMutex.h	/^    int lock() {$/;"	f	class:tigerso::core::ThreadMutex
locked	core/SysUtil.h	/^    bool locked;$/;"	m	class:tigerso::core::LockTryGuard
logFile	core/Logging.h	/^	std::string logFile;$/;"	m	class:tigerso::core::Logging
logPath	core/Logging.h	/^	std::string logPath;$/;"	m	class:tigerso::core::Logging
log_ptr	test/test_mutex.cpp	/^Logging* log_ptr = nullptr;$/;"	v
loop	net/EventsLoop.cpp	/^int EventsLoop::loop() {$/;"	f	class:tigerso::net::EventsLoop
loop_	net/Channel.h	/^    EventsLoop& loop_;$/;"	m	class:tigerso::net::Channel
loop_	net/EventsLoop.h	/^    bool loop_ = false;$/;"	m	class:tigerso::net::EventsLoop
main	test/buffer_test.cc	/^int main(){$/;"	f
main	test/main.cpp	/^int main() {$/;"	f
main	test/test_buffer.cpp	/^int main(){$/;"	f
main	test/test_http.cpp	/^int main() {$/;"	f
main	test/test_mutex.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test/test_thread.cpp	/^int main() {$/;"	f
makeSpace	net/Buffer.cpp	/^int Buffer::makeSpace(const size_t len) {$/;"	f	class:tigerso::net::Buffer
make_dirtree	core/SysUtil.cpp	/^int SysUtil::make_dirtree(const string& dirname)$/;"	f	class:tigerso::core::SysUtil
method	http/lib/http_parser.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	struct:http_parser
method_	http/HttpMessage.h	/^    std::string method_;$/;"	m	class:tigerso::http::HttpRequest
method_strings	http/lib/http_parser.c	/^static const char *method_strings[] =$/;"	v	file:
mime	util/FileTypeDetector.h	/^    const char* mime;$/;"	m	struct:tigerso::util::ScanFileType
mutex	core/SysUtil.h	/^    pthread_mutex_t mutex;$/;"	m	struct:tigerso::core::shm_mutex_t
mutex_	core/Condition.h	/^    ThreadMutex& mutex_;$/;"	m	class:tigerso::core::Condition
mutex_	core/ThreadMutex.h	/^    pthread_mutex_t  mutex_;$/;"	m	class:tigerso::core::ThreadMutex
mutex_	core/ThreadPool.h	/^    mutable ThreadMutex mutex_;$/;"	m	class:tigerso::core::ThreadPool
mutex_ptr	core/SysUtil.h	/^    shm_mutex_t* mutex_ptr;$/;"	m	class:tigerso::core::ShmMutex
mutexattr	core/SysUtil.h	/^    pthread_mutexattr_t mutexattr;$/;"	m	struct:tigerso::core::shm_mutex_t
name	core/CurrentThread.h	/^   inline const char* name() { return threadName_; }$/;"	f	namespace:tigerso::core::CurrentThread
name	core/Thread.h	/^    const std::string& name() { return name_; }$/;"	f	class:tigerso::core::Thread
name	http/lib/http_parser.c	/^  const char *name;$/;"	m	struct:__anon2	file:
name	util/FileTypeDetector.h	/^    const char* name;$/;"	m	struct:tigerso::util::ScanFileType
name_	core/Thread.cpp	/^    std::string name_;$/;"	m	class:tigerso::core::ThreadData	file:
name_	core/Thread.h	/^    std::string name_="";$/;"	m	class:tigerso::core::Thread
name_	core/ThreadPool.h	/^    std::string name_;$/;"	m	class:tigerso::core::ThreadPool
net	net/Buffer.cpp	/^namespace tigerso::net {$/;"	n	class:tigerso	file:
net	net/Buffer.h	/^namespace tigerso::net {$/;"	n	class:tigerso
net	net/Channel.cpp	/^namespace tigerso::net {$/;"	n	class:tigerso	file:
net	net/Channel.h	/^namespace tigerso::net {$/;"	n	class:tigerso
net	net/EventsLoop.cpp	/^namespace tigerso::net {$/;"	n	class:tigerso	file:
net	net/EventsLoop.h	/^namespace tigerso::net {$/;"	n	class:tigerso
net	net/Socket.cpp	/^namespace tigerso::net {$/;"	n	class:tigerso	file:
net	net/Socket.h	/^namespace tigerso::net {$/;"	n	class:tigerso
net	net/SocketUtil.cpp	/^namespace tigerso::net {$/;"	n	class:tigerso	file:
net	net/SocketUtil.h	/^namespace tigerso::net {$/;"	n	class:tigerso
net	net/TcpConnection.h	/^namespace tigerso::net {$/;"	n	class:tigerso
nocopyable	core/BaseClass.h	/^    nocopyable(){}$/;"	f	class:tigerso::core::nocopyable
nocopyable	core/BaseClass.h	/^class nocopyable {$/;"	c	namespace:tigerso::core
normal_url_char	http/lib/http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	file:
notEmpty	core/ThreadPool.h	/^    bool notEmpty = false;$/;"	m	class:tigerso::core::ThreadPool
notEmpty_	core/ThreadPool.h	/^    Condition notEmpty_;$/;"	m	class:tigerso::core::ThreadPool
notFull	core/ThreadPool.h	/^    bool notFull = true;$/;"	m	class:tigerso::core::ThreadPool
notFull_	core/ThreadPool.h	/^    Condition notFull_;$/;"	m	class:tigerso::core::ThreadPool
notify	core/Condition.h	/^    void notify() {$/;"	f	class:tigerso::core::Condition
notifyAll	core/Condition.h	/^    void notifyAll() {$/;"	f	class:tigerso::core::Condition
nread	http/lib/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser
numCreated	core/Thread.h	/^    static int numCreated() { return numCreated_.load(); }$/;"	f	class:tigerso::core::Thread
numCreated_	core/Thread.h	/^    static std::atomic<int> numCreated_;$/;"	m	class:tigerso::core::Thread
off	http/lib/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon1
on_body	http/HttpMessage.cpp	/^int HttpParser::on_body(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::http::HttpParser
on_body	http/lib/http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings
on_chunk_complete	http/lib/http_parser.h	/^  http_cb      on_chunk_complete;$/;"	m	struct:http_parser_settings
on_chunk_header	http/lib/http_parser.h	/^  http_cb      on_chunk_header;$/;"	m	struct:http_parser_settings
on_header_field	http/HttpMessage.cpp	/^int HttpParser::on_header_field(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::http::HttpParser
on_header_field	http/lib/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings
on_header_value	http/HttpMessage.cpp	/^int HttpParser::on_header_value(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::http::HttpParser
on_header_value	http/lib/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings
on_headers_complete	http/HttpMessage.cpp	/^int HttpParser::on_headers_complete(http_parser* parser) {$/;"	f	class:tigerso::http::HttpParser
on_headers_complete	http/lib/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings
on_message_begin	http/HttpMessage.cpp	/^int HttpParser::on_message_begin(http_parser* parser) {$/;"	f	class:tigerso::http::HttpParser
on_message_begin	http/lib/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings
on_message_complete	http/HttpMessage.cpp	/^int HttpParser::on_message_complete(http_parser* parser) {$/;"	f	class:tigerso::http::HttpParser
on_message_complete	http/lib/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings
on_status	http/HttpMessage.cpp	/^int HttpParser::on_status(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::http::HttpParser
on_status	http/lib/http_parser.h	/^  http_data_cb on_status;$/;"	m	struct:http_parser_settings
on_url	http/HttpMessage.cpp	/^int HttpParser::on_url(http_parser* parser, const char* at, size_t len) {$/;"	f	class:tigerso::http::HttpParser
on_url	http/lib/http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings
operator <	net/Socket.cpp	/^bool Socket::operator<(const Socket& sock) const {$/;"	f	class:tigerso::net::Socket
operator =	core/SysUtil.cpp	/^ShmMutex ShmMutex::operator=(const ShmMutex& mutex)$/;"	f	class:tigerso::core::ShmMutex
operator ==	net/Socket.cpp	/^bool Socket::operator==(const Socket& sock) const {$/;"	f	class:tigerso::net::Socket
operator ==	net/Socket.cpp	/^bool Socket::operator==(const socket_t& fd) const {$/;"	f	class:tigerso::net::Socket
operator >	net/Socket.cpp	/^bool Socket::operator>(const Socket& sock) const {$/;"	f	class:tigerso::net::Socket
operator int	net/Socket.h	/^    operator int() const { return sockfd_; }$/;"	f	class:tigerso::net::Socket
outBuffer_	net/Socket.h	/^    std::shared_ptr<Buffer> outBuffer_ = std::make_shared<Buffer>();$/;"	m	class:tigerso::net::Socket
outBuffer_	net/TcpConnection.h	/^    std::shared_ptr<Buffer> outBuffer_;$/;"	m	class:tigerso::net::TcpConnection
out_	net/Socket.h	/^    std::weak_ptr<Buffer> out_;$/;"	m	struct:tigerso::net::BufferPtr
owner_	core/ThreadMutex.h	/^        ThreadMutex& owner_;$/;"	m	class:tigerso::core::ThreadMutex::UnassignGuard
pInstance	core/BaseClass.h	/^    static singleton* pInstance; $/;"	m	class:tigerso::core::singleton
pInstance	core/ConfigParser.cpp	/^ConfigParser* ConfigParser::pInstance = NULL;$/;"	m	class:tigerso::core::ConfigParser	file:
pInstance	core/ConfigParser.h	/^	static ConfigParser* pInstance;$/;"	m	class:tigerso::core::ConfigParser
pInstance	core/Logging.cpp	/^Logging* Logging::pInstance = NULL;$/;"	m	class:tigerso::core::Logging	file:
pInstance	core/Logging.h	/^	static Logging* pInstance;$/;"	m	class:tigerso::core::Logging
parse	http/HttpMessage.cpp	/^int HttpParser::parse(const char* buf,size_t len, HttpMessage& message) {$/;"	f	class:tigerso::http::HttpParser
parse	http/HttpMessage.cpp	/^int HttpParser::parse(const std::string& buffer, HttpMessage& message) {$/;"	f	class:tigerso::http::HttpParser
parse_url_char	http/lib/http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	file:
parser	test/test_http.cpp	/^HttpParser parser;$/;"	v
parser_	http/HttpMessage.h	/^    http_parser parser_;$/;"	m	class:tigerso::http::HttpParser
peerSockPtrs_	net/TcpConnection.h	/^    std::vector<SocketPtr> peerSockPtrs_;$/;"	m	class:tigerso::net::TcpConnection
pid	test/test_mutex.cpp	/^    pid_t pid;$/;"	m	struct:share_count	file:
plog	test/main.cpp	/^Logging* plog = Logging::getInstance();$/;"	v
port	http/lib/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url
port_	net/Socket.h	/^    std::string port_;$/;"	m	class:tigerso::net::Socket
prefix_	net/Buffer.h	/^    const size_t prefix_;$/;"	m	class:tigerso::net::Buffer
prefreeBytes	net/Buffer.cpp	/^size_t Buffer::prefreeBytes() const {$/;"	f	class:tigerso::net::Buffer
pregap	net/Buffer.h	/^    static const size_t pregap = 8;$/;"	m	class:tigerso::net::Buffer
printInfo	net/Buffer.cpp	/^void Buffer::printInfo() const {$/;"	f	class:tigerso::net::Buffer
printInfo	test/buffer_test.cc	/^void printInfo() {$/;"	f
printInfo	test/test_buffer.cpp	/^void printInfo() {$/;"	f
print_share_count	test/test_mutex.cpp	/^void print_share_count() {$/;"	f
readCallback	test/test_http.cpp	/^int readCallback(SocketPtr& sockptr) {$/;"	f
readFlag	net/Channel.h	/^        bool readFlag;$/;"	m	struct:tigerso::net::Channel::__anon3
readIdx_	net/Buffer.h	/^    size_t readIdx_;$/;"	m	class:tigerso::net::Buffer
readableBytes	net/Buffer.cpp	/^size_t Buffer::readableBytes() const {$/;"	f	class:tigerso::net::Buffer
readable_cb	net/Channel.h	/^    EventFunc readable_cb = nullptr;$/;"	m	class:tigerso::net::Channel
recvBIO	net/Buffer.cpp	/^ssize_t Buffer::recvBIO(const socket_t fd) {$/;"	f	class:tigerso::net::Buffer
recvBIO	net/Socket.cpp	/^ssize_t Socket::recvBIO() {$/;"	f	class:tigerso::net::Socket
recvNIO	net/Buffer.cpp	/^ssize_t Buffer::recvNIO(const socket_t sockfd) {$/;"	f	class:tigerso::net::Buffer
recvNIO	net/Socket.cpp	/^ssize_t Socket::recvNIO() {$/;"	f	class:tigerso::net::Socket
refer_num	core/SysUtil.h	/^    int refer_num;$/;"	m	struct:tigerso::core::shm_mutex_t
registerChannel	net/EventsLoop.cpp	/^int EventsLoop::registerChannel(const ChannelPtr& cnnl) {$/;"	f	class:tigerso::net::EventsLoop
reload	core/ConfigParser.cpp	/^int ConfigParser::reload() {$/;"	f	class:tigerso::core::ConfigParser
remove	net/Channel.cpp	/^void Channel::remove() {$/;"	f	class:tigerso::net::Channel
removeChannel	net/EventsLoop.cpp	/^int EventsLoop::removeChannel(const ChannelPtr& cnptr) {$/;"	f	class:tigerso::net::EventsLoop
removeData	net/Buffer.cpp	/^size_t Buffer::removeData(std::string& data, const size_t len) {$/;"	f	class:tigerso::net::Buffer
remove_file	core/SysUtil.cpp	/^int SysUtil::remove_file(const string& file)$/;"	f	class:tigerso::core::SysUtil
requestCallbacks_	http/HttpMessage.h	/^    std::map<std::string, httpInspectCallback> requestCallbacks_;$/;"	m	class:tigerso::http::HttpInSpection
reset	net/Channel.cpp	/^void Channel::reset() {$/;"	f	class:tigerso::net::Channel
resetFlag	net/Channel.cpp	/^void Channel::resetFlag() {$/;"	f	class:tigerso::net::Channel
responseCallbacks_	http/HttpMessage.h	/^    std::map<std::string, httpInspectCallback> responseCallbacks_;$/;"	m	class:tigerso::http::HttpInSpection
response_status_array	http/HttpMessage.cpp	/^static const status_pair_t response_status_array [] = {$/;"	m	namespace:tigerso::http	file:
role_	http/HttpMessage.h	/^    http_role_t role_ = HTTP_ROLE_UINIT;$/;"	m	class:tigerso::http::HttpMessage
role_	net/Socket.h	/^    socket_role_t role_ = SOCKET_ROLE_UINIT;$/;"	m	class:tigerso::net::Socket
run	core/ThreadPool.h	/^    void run(const Task task) {$/;"	f	class:tigerso::core::ThreadPool
runInThread	core/Thread.cpp	/^    void runInThread() {$/;"	f	class:tigerso::core::ThreadData
runInThread	core/ThreadPool.h	/^    void runInThread() {$/;"	f	class:tigerso::core::ThreadPool
running_	core/ThreadPool.h	/^    std::atomic<bool> running_;$/;"	m	class:tigerso::core::ThreadPool
s_body_identity	http/lib/http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	http/lib/http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chunk_data	http/lib/http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	http/lib/http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	http/lib/http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	http/lib/http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	http/lib/http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	http/lib/http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	http/lib/http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	http/lib/http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_header_almost_done	http/lib/http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	http/lib/http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	http/lib/http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	http/lib/http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_discard_lws	http/lib/http_parser.c	/^  , s_header_value_discard_lws$/;"	e	enum:state	file:
s_header_value_discard_ws	http/lib/http_parser.c	/^  , s_header_value_discard_ws$/;"	e	enum:state	file:
s_header_value_discard_ws_almost_done	http/lib/http_parser.c	/^  , s_header_value_discard_ws_almost_done$/;"	e	enum:state	file:
s_header_value_lws	http/lib/http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	http/lib/http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	http/lib/http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	http/lib/http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	http/lib/http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	http/lib/http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	http/lib/http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	http/lib/http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	http/lib/http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	http/lib/http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	http/lib/http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	http/lib/http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone	http/lib/http_parser.c	/^  , s_http_host_v6_zone$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone_start	http/lib/http_parser.c	/^  , s_http_host_v6_zone_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	http/lib/http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	http/lib/http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_message_done	http/lib/http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_req_first_http_major	http/lib/http_parser.c	/^  , s_req_first_http_major$/;"	e	enum:state	file:
s_req_first_http_minor	http/lib/http_parser.c	/^  , s_req_first_http_minor$/;"	e	enum:state	file:
s_req_fragment	http/lib/http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	http/lib/http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	http/lib/http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	http/lib/http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	http/lib/http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	http/lib/http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_major	http/lib/http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	http/lib/http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	http/lib/http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	http/lib/http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	http/lib/http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	http/lib/http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	http/lib/http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	http/lib/http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	http/lib/http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	http/lib/http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	http/lib/http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	http/lib/http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	http/lib/http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	http/lib/http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	http/lib/http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	http/lib/http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	http/lib/http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	http/lib/http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	http/lib/http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_http_major	http/lib/http_parser.c	/^  , s_res_first_http_major$/;"	e	enum:state	file:
s_res_first_http_minor	http/lib/http_parser.c	/^  , s_res_first_http_minor$/;"	e	enum:state	file:
s_res_first_status_code	http/lib/http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_major	http/lib/http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	http/lib/http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	http/lib/http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	http/lib/http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	http/lib/http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	http/lib/http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_res_status_start	http/lib/http_parser.c	/^  , s_res_status_start$/;"	e	enum:state	file:
s_start_req	http/lib/http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	http/lib/http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	http/lib/http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
sem	test/test_mutex.cpp	/^ShmMutex* sem = nullptr;$/;"	v
sendBIO	net/Buffer.cpp	/^ssize_t Buffer::sendBIO(const socket_t fd) {$/;"	f	class:tigerso::net::Buffer
sendBIO	net/Socket.cpp	/^ssize_t Socket::sendBIO() {$/;"	f	class:tigerso::net::Socket
sendNIO	net/Buffer.cpp	/^ssize_t Buffer::sendNIO(const socket_t sockfd) {$/;"	f	class:tigerso::net::Buffer
sendNIO	net/Socket.cpp	/^ssize_t Socket::sendNIO() {$/;"	f	class:tigerso::net::Socket
sendNIO	net/Socket.cpp	/^ssize_t Socket::sendNIO(std::string& data) {$/;"	f	class:tigerso::net::Socket
setAfterCallback	net/Channel.cpp	/^EventFunc Channel::setAfterCallback(EventFunc func) {$/;"	f	class:tigerso::net::Channel
setBeforeCallback	net/Channel.cpp	/^EventFunc Channel::setBeforeCallback(EventFunc func) {$/;"	f	class:tigerso::net::Channel
setBody	http/HttpMessage.h	/^    virtual void setBody(const std::string& body) {$/;"	f	class:tigerso::http::HttpMessage
setChannel	net/Socket.cpp	/^void Socket::setChannel(std::shared_ptr<Channel>& ptr) {$/;"	f	class:tigerso::net::Socket
setConfigPath	core/ConfigParser.cpp	/^void ConfigParser::setConfigPath(const std::string& file)$/;"	f	class:tigerso::core::ConfigParser
setDefaultName	core/Thread.cpp	/^void Thread::setDefaultName() {$/;"	f	class:tigerso::core::Thread
setDesc	http/HttpMessage.h	/^    virtual void setDesc(const std::string&){};$/;"	f	class:tigerso::http::HttpMessage
setDesc	http/HttpMessage.h	/^    void setDesc(const std::string& desc) { desc_ = desc; }$/;"	f	class:tigerso::http::HttpResponse
setErrorCallback	net/Channel.cpp	/^EventFunc Channel::setErrorCallback(EventFunc func) {$/;"	f	class:tigerso::net::Channel
setEvents	net/Channel.cpp	/^int Channel::setEvents(bool readable, bool writeable, bool edge, bool keep) {$/;"	f	class:tigerso::net::Channel
setInBufferPtr	net/Socket.h	/^    void setInBufferPtr(std::shared_ptr<Buffer> inptr) { bufPtr_.in_ = inptr; }$/;"	f	class:tigerso::net::Socket
setKeepAlive	net/Socket.cpp	/^void Socket::setKeepAlive(bool on) {$/;"	f	class:tigerso::net::Socket
setLevel	core/Logging.cpp	/^int Logging::setLevel(const std::string& le)$/;"	f	class:tigerso::core::Logging
setLogFile	core/Logging.cpp	/^int Logging::setLogFile(const std::string& file)$/;"	f	class:tigerso::core::Logging
setLogPath	core/Logging.cpp	/^int Logging::setLogPath(const std::string& path)$/;"	f	class:tigerso::core::Logging
setMethod	http/HttpMessage.h	/^    virtual void setMethod(const std::string& method){};$/;"	f	class:tigerso::http::HttpMessage
setMethod	http/HttpMessage.h	/^    void setMethod(const std::string& method) { method_ = method; }$/;"	f	class:tigerso::http::HttpRequest
setNIO	net/Socket.cpp	/^void Socket::setNIO(bool unblock) {$/;"	f	class:tigerso::net::Socket
setOutBufferPtr	net/Socket.h	/^    void setOutBufferPtr(std::shared_ptr<Buffer> outptr) { bufPtr_.out_ = outptr; }$/;"	f	class:tigerso::net::Socket
setReadCallback	net/Channel.cpp	/^EventFunc Channel::setReadCallback(EventFunc func) {$/;"	f	class:tigerso::net::Channel
setRole	net/Socket.cpp	/^void Socket::setRole(const socket_role_t& role) {$/;"	f	class:tigerso::net::Socket
setSocket	net/Socket.cpp	/^void Socket::setSocket(const socket_t& sockfd) {$/;"	f	class:tigerso::net::Socket
setStage	net/Socket.cpp	/^void Socket::setStage(const socket_stage_t& stage) {$/;"	f	class:tigerso::net::Socket
setStatuscode	http/HttpMessage.h	/^    virtual void setStatuscode(int){};$/;"	f	class:tigerso::http::HttpMessage
setStatuscode	http/HttpMessage.h	/^    void setStatuscode(int code) { $/;"	f	class:tigerso::http::HttpResponse
setStrAddr	net/Socket.cpp	/^void Socket::setStrAddr(const std::string& addr) {$/;"	f	class:tigerso::net::Socket
setStrPort	net/Socket.cpp	/^void Socket::setStrPort(const std::string& port) {$/;"	f	class:tigerso::net::Socket
setTcpNoDelay	net/Socket.cpp	/^void Socket::setTcpNoDelay(bool on) {$/;"	f	class:tigerso::net::Socket
setTimeout	net/EventsLoop.cpp	/^void EventsLoop::setTimeout(const int time) {$/;"	f	class:tigerso::net::EventsLoop
setUrl	http/HttpMessage.h	/^    virtual void setUrl(const std::string& Url){};$/;"	f	class:tigerso::http::HttpMessage
setUrl	http/HttpMessage.h	/^    void setUrl(const std::string& url) { url_ = url; }$/;"	f	class:tigerso::http::HttpRequest
setValueByHeader	http/HttpMessage.h	/^    virtual void setValueByHeader(const std::string& header, const std::string& value) {$/;"	f	class:tigerso::http::HttpMessage
setVersion	http/HttpMessage.h	/^    virtual void setVersion(const std::string& verison) { version_ = verison; }$/;"	f	class:tigerso::http::HttpMessage
setWriteCallback	net/Channel.cpp	/^EventFunc Channel::setWriteCallback(EventFunc func) {$/;"	f	class:tigerso::net::Channel
set_signal_handler	core/SysUtil.cpp	/^signal_func* SysUtil::set_signal_handler(int signo, signal_func* func) {$/;"	f	class:tigerso::core::SysUtil
settings_	http/HttpMessage.h	/^    http_parser_settings settings_;$/;"	m	class:tigerso::http::HttpParser
share_count	test/test_mutex.cpp	/^    share_count():count(0), pid(-1) {}$/;"	f	struct:share_count
share_count	test/test_mutex.cpp	/^struct share_count {$/;"	s	file:
shm_len	core/SysUtil.h	/^    size_t shm_len;$/;"	m	class:tigerso::core::SharedMemory
shm_mutex_t	core/SysUtil.h	/^struct shm_mutex_t {$/;"	s	namespace:tigerso::core
shm_name	core/SysUtil.h	/^    string shm_name;$/;"	m	class:tigerso::core::SharedMemory
shm_name	core/SysUtil.h	/^    string shm_name;$/;"	m	class:tigerso::core::ShmMutex
shm_name	core/SysUtil.h	/^    string shm_name;$/;"	m	struct:tigerso::core::shm_mutex_t
shm_pid	core/SysUtil.h	/^    pid_t shm_pid;$/;"	m	class:tigerso::core::SharedMemory
shm_pid	core/SysUtil.h	/^    pid_t shm_pid;$/;"	m	class:tigerso::core::ShmMutex
shm_prot	core/SysUtil.h	/^    int shm_prot;$/;"	m	class:tigerso::core::SharedMemory
shm_ptr	core/SysUtil.h	/^    void* shm_ptr;$/;"	m	class:tigerso::core::SharedMemory
signal_func	core/SysUtil.h	/^typedef void (signal_func)(int);$/;"	t	namespace:tigerso::core
singleton	core/BaseClass.h	/^class singleton {$/;"	c	namespace:tigerso::core
sock_	net/Channel.h	/^    const std::weak_ptr<Socket> sock_;$/;"	m	class:tigerso::net::Channel
socket_role_t	net/Socket.h	/^typedef int socket_role_t;$/;"	t	namespace:tigerso::net
socket_stage_t	net/Socket.h	/^typedef int socket_stage_t;$/;"	t	namespace:tigerso::net
socket_t	net/Buffer.h	/^    typedef int socket_t;$/;"	t	class:tigerso::net::Buffer
socket_t	net/Socket.h	/^typedef int socket_t;$/;"	t	namespace:tigerso::net
sockfd_	net/Socket.h	/^    socket_t sockfd_ = -1;$/;"	m	class:tigerso::net::Socket
socklist	test/test_http.cpp	/^vector<SocketPtr> socklist;$/;"	v
sockptr_	net/TcpConnection.h	/^    const SocketPtr sockptr_;$/;"	m	class:tigerso::net::TcpConnection
stage_	net/Socket.h	/^    socket_stage_t stage_ = SOCKET_STAGE_UINIT;$/;"	m	class:tigerso::net::Socket
start	core/Thread.cpp	/^void Thread::start() {$/;"	f	class:tigerso::core::Thread
start	core/ThreadPool.h	/^    void start(const int threadNum) {$/;"	f	class:tigerso::core::ThreadPool
startThread	core/Thread.cpp	/^void* startThread(void* obj) {$/;"	f	namespace:tigerso::core
start_	core/Thread.h	/^    bool start_ = false;$/;"	m	class:tigerso::core::Thread
start_state	http/lib/http_parser.c	445;"	d	file:
started	core/Thread.h	/^    bool started() const { return start_; }$/;"	f	class:tigerso::core::Thread
state	http/lib/http_parser.c	/^enum state$/;"	g	file:
state	http/lib/http_parser.h	/^  unsigned int state : 7;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser
status_code	http/lib/http_parser.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	struct:http_parser
status_pair_t	http/HttpMessage.cpp	/^typedef std::map<int, std::string>::value_type  status_pair_t;$/;"	t	namespace:tigerso::http	file:
statuscode_	http/HttpMessage.h	/^    int         statuscode_;$/;"	m	class:tigerso::http::HttpResponse
stop	core/ThreadPool.h	/^    void stop() {$/;"	f	class:tigerso::core::ThreadPool
take	core/ThreadPool.h	/^    Task take() {$/;"	f	class:tigerso::core::ThreadPool
tasks_	core/ThreadPool.h	/^    std::deque<Task> tasks_;$/;"	m	class:tigerso::core::ThreadPool
tcpServer	test/test_http.cpp	/^int tcpServer(SocketPtr& master) {$/;"	f
threadId_	core/Thread.h	/^    pthread_t threadId_ = 0;$/;"	m	class:tigerso::core::Thread
threadName_	core/Thread.cpp	/^   __thread const char* threadName_ = "unknow thread";$/;"	m	namespace:tigerso::core::CurrentThread	file:
threadNum_	core/ThreadPool.h	/^    int threadNum_;$/;"	m	class:tigerso::core::ThreadPool
threads_	core/ThreadPool.h	/^    std::vector<ThreadPtr> threads_;$/;"	m	class:tigerso::core::ThreadPool
tid	core/Thread.cpp	/^   pid_t tid() {$/;"	f	namespace:tigerso::core::CurrentThread
tid	core/Thread.h	/^    pid_t tid() const { return *tid_; }$/;"	f	class:tigerso::core::Thread
tidStrLength	core/Thread.cpp	/^   __thread size_t tidStrLength = 0;$/;"	m	namespace:tigerso::core::CurrentThread	file:
tidString	core/CurrentThread.h	/^   inline const char* tidString() { return tidString_; }$/;"	f	namespace:tigerso::core::CurrentThread
tidString_	core/Thread.cpp	/^   __thread char tidString_[32] = {0};$/;"	m	namespace:tigerso::core::CurrentThread	file:
tid_	core/Thread.h	/^    std::shared_ptr<pid_t> tid_;$/;"	m	class:tigerso::core::Thread
toLower	core/SysUtil.h	/^    void toLower(std::string& src, std::string& dst) { std::transform(src.begin(), src.end(), dst.begin(), ::tolower); }$/;"	f	class:tigerso::core::SysUtil
toString	http/HttpMessage.h	/^    std::string toString() {$/;"	f	class:tigerso::http::HttpRequest
toString	http/HttpMessage.h	/^    std::string toString() {$/;"	f	class:tigerso::http::HttpResponse
toString	net/Buffer.cpp	/^std::string Buffer::toString() const {$/;"	f	class:tigerso::net::Buffer
toUpper	core/SysUtil.h	/^    void toUpper(std::string& src, std::string& dst) { std::transform(src.begin(), src.end(), dst.begin(), ::toupper); }$/;"	f	class:tigerso::core::SysUtil
tokens	http/lib/http_parser.c	/^static const char tokens[256] = {$/;"	v	file:
transFlag	net/EventsLoop.cpp	/^evf_t EventsLoop::transFlag(const ChannelPtr& cnptr) {$/;"	f	class:tigerso::net::EventsLoop
try_lock	core/SysUtil.cpp	/^int ShmMutex::try_lock()$/;"	f	class:tigerso::core::ShmMutex
try_lock	core/ThreadMutex.h	/^    int try_lock() {$/;"	f	class:tigerso::core::ThreadMutex
type	http/lib/http_parser.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	struct:http_parser
typenum	util/FileTypeDetector.h	/^    int typenum;$/;"	m	struct:tigerso::util::ScanFileType
uint16_t	http/lib/http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	http/lib/http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	http/lib/http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	http/lib/http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t
unassignHolder	core/ThreadMutex.h	/^    void unassignHolder() {$/;"	f	class:tigerso::core::ThreadMutex
unhex	http/lib/http_parser.c	/^static const int8_t unhex[256] =$/;"	v	file:
unlock	core/SysUtil.cpp	/^int ShmMutex::unlock()$/;"	f	class:tigerso::core::ShmMutex
unlock	core/ThreadMutex.h	/^    int unlock() {$/;"	f	class:tigerso::core::ThreadMutex
unregisterChannel	net/EventsLoop.cpp	/^int EventsLoop::unregisterChannel(const ChannelPtr& cnnl) {$/;"	f	class:tigerso::net::EventsLoop
update	net/Channel.cpp	/^bool Channel::update() {$/;"	f	class:tigerso::net::Channel
updateChannel	net/EventsLoop.cpp	/^int EventsLoop::updateChannel(const ChannelPtr& cnptr) {$/;"	f	class:tigerso::net::EventsLoop
upgrade	http/lib/http_parser.h	/^  unsigned int upgrade : 1;$/;"	m	struct:http_parser
upstreamAddr_	net/TcpConnection.h	/^    std::string upstreamAddr_;$/;"	m	class:tigerso::net::TcpConnection
url_	http/HttpMessage.h	/^    std::string url_;$/;"	m	class:tigerso::http::HttpRequest
util	util/FileTypeDetector.h	/^namespace tigerso::util {$/;"	n	class:tigerso
validate_filename	core/SysUtil.cpp	/^bool SysUtil::validate_filename(const string& filename)$/;"	f	class:tigerso::core::SysUtil
version_	http/HttpMessage.h	/^    std::string version_ = "HTTP\/1.1";$/;"	m	class:tigerso::http::HttpMessage
wait	core/Condition.h	/^    void wait() {$/;"	f	class:tigerso::core::Condition
waitChannel	net/EventsLoop.cpp	/^int EventsLoop::waitChannel() {$/;"	f	class:tigerso::net::EventsLoop
waitForSeconds	core/Condition.h	/^    bool waitForSeconds(double seconds) {$/;"	f	class:tigerso::core::Condition
waitTime_	net/EventsLoop.h	/^    int waitTime_ = 10000;$/;"	m	class:tigerso::net::EventsLoop
wkTid_	core/Thread.cpp	/^    std::weak_ptr<pid_t> wkTid_;$/;"	m	class:tigerso::core::ThreadData	file:
writeCallback	test/test_http.cpp	/^int writeCallback(SocketPtr& sockptr) {$/;"	f
writeFlag	net/Channel.h	/^        bool writeFlag;$/;"	m	struct:tigerso::net::Channel::__anon3
writeIdx_	net/Buffer.h	/^    size_t writeIdx_;$/;"	m	class:tigerso::net::Buffer
writeableBytes	net/Buffer.cpp	/^size_t Buffer::writeableBytes() const {$/;"	f	class:tigerso::net::Buffer
writeable_cb	net/Channel.h	/^    EventFunc writeable_cb = nullptr;$/;"	m	class:tigerso::net::Channel
~Buffer	net/Buffer.cpp	/^Buffer::~Buffer() {$/;"	f	class:tigerso::net::Buffer
~Condition	core/Condition.h	/^    ~Condition() {$/;"	f	class:tigerso::core::Condition
~ConfigParser	core/ConfigParser.h	/^    ~ConfigParser() { delete pInstance; }$/;"	f	class:tigerso::core::ConfigParser
~FileTypeDetector	util/FileTypeDetector.h	/^    ~FileTypeDetector() {$/;"	f	class:tigerso::util::FileTypeDetector
~LockGuard	core/SysUtil.h	/^    ~LockGuard() {$/;"	f	class:tigerso::core::LockGuard
~LockTryGuard	core/SysUtil.h	/^    ~LockTryGuard() {$/;"	f	class:tigerso::core::LockTryGuard
~SharedMemory	core/SysUtil.h	/^    ~SharedMemory() {$/;"	f	class:tigerso::core::SharedMemory
~ShmMutex	core/SysUtil.cpp	/^ShmMutex::~ShmMutex()$/;"	f	class:tigerso::core::ShmMutex
~Socket	net/Socket.h	/^    ~Socket() { this->close(); }$/;"	f	class:tigerso::net::Socket
~Thread	core/Thread.cpp	/^Thread::~Thread() {$/;"	f	class:tigerso::core::Thread
~ThreadMutex	core/ThreadMutex.h	/^    ~ThreadMutex() {$/;"	f	class:tigerso::core::ThreadMutex
~UnassignGuard	core/ThreadMutex.h	/^        ~UnassignGuard() {$/;"	f	class:tigerso::core::ThreadMutex::UnassignGuard
~singleton	core/BaseClass.h	/^    virtual ~singleton(){ if ( pInstance != nullptr) { delete pInstance; } };$/;"	f	class:tigerso::core::singleton
